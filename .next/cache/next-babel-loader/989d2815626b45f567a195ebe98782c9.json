{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { createContext, useCallback, useState, useContext } from \"react\";\nimport { Modal, ModalOverlay } from \"@chakra-ui/core\";\nexport const Context = createContext({\n  onPresent: () => {},\n  onDismiss: () => {}\n});\nexport const ModalContext = ({\n  children\n}) => {\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const {\n    0: content,\n    1: setContent\n  } = useState();\n  const {\n    1: setModalKey\n  } = useState();\n  const handlePresent = useCallback((modalContent, key) => {\n    setModalKey(key);\n    setContent(modalContent);\n    setIsOpen(true);\n  }, [setContent, setIsOpen, setModalKey]);\n  const handleDismiss = useCallback(() => {\n    setContent(undefined);\n    setIsOpen(false);\n  }, [setContent, setIsOpen]);\n  return __jsx(Context.Provider, {\n    value: {\n      content,\n      isOpen,\n      onPresent: handlePresent,\n      onDismiss: handleDismiss\n    }\n  }, children, __jsx(Modal, {\n    onClose: () => setIsOpen(false),\n    isOpen: isOpen,\n    isCentered: true\n  }, __jsx(ModalOverlay, null, React.isValidElement(content) && React.cloneElement(content, {\n    onDismiss: handleDismiss\n  }))));\n};\nexport const useModal = (modal, key) => {\n  const {\n    onDismiss,\n    onPresent\n  } = useContext(Context);\n  const handlePresent = useCallback(() => {\n    onPresent(modal, key);\n  }, [key, modal, onPresent]);\n  return [handlePresent, onDismiss];\n};","map":null,"metadata":{},"sourceType":"module"}