{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { createContext, useState, useContext, useEffect, useCallback } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport BigNumber from \"bignumber.js\";\nimport { getPoolStats, getPoolPriceInUSD } from \"src/utils/pools\";\nimport { yfiToken, sushiToken, bandToken, kncToken, compToken, linkToken, lendToken, snxToken, mkrToken, renToken, yfiPool, bandPool, compPool, kncPool, lendPool, linkPool, mkrPool, renPool, snxPool, sushiPool } from \"src/constants/tokenAddresses\";\nimport { usePriceFeedContext } from \"./PriceFeedContext\";\nexport const ALL_POOLS = [{\n  name: \"Yearn Alpha (YFI)\",\n  code: \"yfi_pool\",\n  order: 0,\n  icon: \"/images/yfi-icon.png\",\n  address: yfiPool,\n  tokenContract: yfiToken,\n  tokenTicker: \"yfi\"\n}, {\n  name: \"Omakase (SUSHI)\",\n  code: \"eth_pool\",\n  order: 1,\n  icon: \"/images/sushi-icon.png\",\n  address: sushiPool,\n  tokenContract: sushiToken,\n  tokenTicker: \"sushi\"\n}, {\n  name: \"Band Wagons (BAND)\",\n  code: \"band_pool\",\n  order: 2,\n  icon: \"/images/band-icon.svg\",\n  address: bandPool,\n  tokenContract: bandToken,\n  tokenTicker: \"band\"\n}, {\n  name: \"Kyber Corp (KNC)\",\n  code: \"knc_pool\",\n  order: 3,\n  icon: \"/images/knc-logo.svg\",\n  address: kncPool,\n  tokenContract: kncToken,\n  tokenTicker: \"knc\"\n}, {\n  name: \"Compound Soils (COMP)\",\n  code: \"comp_pool\",\n  order: 4,\n  icon: \"/images/comp-logo.svg\",\n  address: compPool,\n  tokenContract: compToken,\n  tokenTicker: \"comp\"\n}, {\n  name: \"Marine Corps (LINK)\",\n  code: \"link_pool\",\n  order: 5,\n  icon: \"/images/link-logo.svg\",\n  address: linkPool,\n  tokenContract: linkToken,\n  tokenTicker: \"link\"\n}, {\n  name: \"Aave Nauts (LEND)\",\n  code: \"lend_pool\",\n  order: 6,\n  icon: \"/images/lend-logo.svg\",\n  address: lendPool,\n  tokenContract: lendToken,\n  tokenTicker: \"lend\"\n}, {\n  name: \"Synth Spartans (SNX)\",\n  code: \"snx_pool\",\n  order: 7,\n  icon: \"/images/snx-logo.svg\",\n  address: snxPool,\n  tokenContract: snxToken,\n  tokenTicker: \"snx\"\n}, {\n  name: \"Maker Mountain (MKR)\",\n  code: \"mkr_pool\",\n  order: 8,\n  icon: \"/images/mkr-logo.svg\",\n  address: mkrPool,\n  tokenContract: mkrToken,\n  tokenTicker: \"mkr\"\n}, {\n  name: \"Ren Moon (REN)\",\n  code: \"ren_pool\",\n  order: 8,\n  icon: \"/images/ren-logo.svg\",\n  address: renPool,\n  tokenContract: renToken,\n  tokenTicker: \"ren\"\n}];\nexport const PoolContext = createContext({\n  pools: []\n});\nexport const PoolProvider = ({\n  children\n}) => {\n  const {\n    0: pools,\n    1: setPools\n  } = useState([]);\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const {\n    coinGecko\n  } = usePriceFeedContext();\n  const getStats = useCallback(async () => {\n    const promisedPoolsArr = ALL_POOLS.map(async pool => {\n      const poolStats = await getPoolStats(ethereum, pool.address);\n      const poolPriceInUSD = await getPoolPriceInUSD(pool.tokenContract, poolStats === null || poolStats === void 0 ? void 0 : poolStats.poolSize, coinGecko);\n      return {\n        name: pool.name,\n        icon: pool.icon,\n        code: pool.code,\n        order: pool.order,\n        address: pool.address,\n        tokenContract: pool.tokenContract,\n        tokenTicker: pool.tokenTicker,\n        poolSize: (poolStats === null || poolStats === void 0 ? void 0 : poolStats.poolSize) ? new BigNumber(poolStats === null || poolStats === void 0 ? void 0 : poolStats.poolSize) : null,\n        poolPriceInUSD: poolPriceInUSD ? poolPriceInUSD : null,\n        periodFinish: (poolStats === null || poolStats === void 0 ? void 0 : poolStats.periodFinish) ? new BigNumber(poolStats.periodFinish) : null,\n        boosterPrice: (poolStats === null || poolStats === void 0 ? void 0 : poolStats.boosterPrice) ? new BigNumber(poolStats.boosterPrice) : null\n      };\n    });\n    const poolArr = await Promise.all(promisedPoolsArr);\n    setPools(poolArr);\n  }, [ethereum, coinGecko]);\n  useEffect(() => {\n    getStats();\n  }, [setPools, account, getStats]);\n  return __jsx(PoolContext.Provider, {\n    value: {\n      pools\n    }\n  }, children);\n};\nexport const usePoolContext = () => useContext(PoolContext);","map":null,"metadata":{},"sourceType":"module"}