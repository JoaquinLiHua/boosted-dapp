{"ast":null,"code":"var __jsx = React.createElement;\nimport { ModalContent, ModalHeader, ModalCloseButton, ModalBody, Stack, ModalFooter, Button, Text } from \"@chakra-ui/core\";\nimport React, { useCallback, useState, useMemo } from \"react\";\nexport const DisclaimerModal = ({\n  onConfirm,\n  onDismiss\n}) => {\n  const {\n    0: step,\n    1: setStep\n  } = useState(\"disclaimer\");\n  const handleConfirm = useCallback(() => {\n    if (onDismiss) {\n      onConfirm();\n      onDismiss();\n    }\n  }, [onConfirm, onDismiss]);\n  const modalContent = useMemo(() => {\n    if (step === \"disclaimer\") {\n      return __jsx(Stack, null, __jsx(Text, null, \"\\u26A0\\uFE0F Audits: Zilch \\u26A0\\uFE0F \"), __jsx(Text, null, \"There have been no official third-party audits for Boosted Finance although core contributors have made extensive efforts to secure smart contracts including forking the codebases of notable and established projects.\"), __jsx(Text, null, \"We urge all users who engage with staking contracts to self-audit and read through contracts before putting your tokens at stake. You will be using this BETA product at your own risk.\"));\n    } else {\n      return __jsx(Stack, null, __jsx(Text, {\n        fontWeight: \"bold\"\n      }, \"Genesis Pool Staking Cap\"), __jsx(Text, null, \"COMP: $251.89 = 79.3997379808647\"), __jsx(Text, null, \"MKR: $690.02 = 28.9846671110982\"), __jsx(Text, null, \"LEND: $0.73491 = 27214.2167068076\"), __jsx(Text, null, \"SNX: $7.49 = 2670.22696929239\"), __jsx(Text, null, \"REN: $0.56933 = 35129.0112939771\"), __jsx(Text, null, \"YFI: $33968.42 = 0.58878216884977\"), __jsx(Text, null, \"LINK:$15.76 = 1269.03553299492\"), __jsx(Text, null, \"BAND: $13.13 = 1523.22924600152\"), __jsx(Text, null, \"SUSHI: $6.61 = 3025.7186081694\"), __jsx(Text, null, \"KNC: $1.81 = 11049.7237569061\"));\n    }\n  }, [step]);\n  const button = useMemo(() => {\n    if (step === \"disclaimer\") {\n      return __jsx(Button, {\n        onClick: () => setStep(\"uniswap\")\n      }, \"Next\");\n    } else {\n      return __jsx(Button, {\n        onClick: handleConfirm\n      }, \"Houston, all problems are yours\");\n    }\n  }, [setStep, step, handleConfirm]);\n  return __jsx(ModalContent, null, __jsx(ModalHeader, {\n    fontSize: \"m\"\n  }, \"This project is currently unaudited.\"), __jsx(ModalCloseButton, null), __jsx(ModalBody, null, __jsx(Stack, null, modalContent)), __jsx(ModalFooter, null, button));\n};","map":null,"metadata":{},"sourceType":"module"}