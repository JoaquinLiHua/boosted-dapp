{"version":3,"sources":["../../src/toast.utils.ts"],"names":["findById","arr","id","find","toast","findToast","toasts","position","getToastPosition","index","findIndex","forEach","pos","found","isVisible","Object","values","getToastStyle","style","display","flexDirection","alignItems","includes"],"mappings":";;;;;;;;;AACA;;AAEA;;;;AAIO,SAASA,QAAT,CAAkBC,GAAlB,EAAuCC,EAAvC,EAAoD;AACzD,SAAOD,GAAG,CAACE,IAAJ,CAAS,UAACC,KAAD;AAAA,WAAWA,KAAK,CAACF,EAAN,KAAaA,EAAxB;AAAA,GAAT,CAAP;AACD;AAED;;;;;;AAIO,SAASG,SAAT,CAAmBC,MAAnB,EAAuCJ,EAAvC,EAAoD;AACzD,MAAMK,QAAQ,GAAGC,gBAAgB,CAACF,MAAD,EAASJ,EAAT,CAAjC;AAEA,MAAMO,KAAK,GAAGF,QAAQ,GAClBD,MAAM,CAACC,QAAD,CAAN,CAAiBG,SAAjB,CAA2B,UAACN,KAAD;AAAA,WAAWA,KAAK,CAACF,EAAN,IAAYA,EAAvB;AAAA,GAA3B,CADkB,GAElB,CAAC,CAFL;AAIA,SAAO;AACLK,IAAAA,QAAQ,EAARA,QADK;AAELE,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;AAED;;;;;;AAIO,SAASD,gBAAT,CAA0BF,MAA1B,EAA8CJ,EAA9C,EAA2D;AAChE,MAAIK,QAAJ;AAEA,yBAAWD,MAAX,EAAmBK,OAAnB,CAA2B,UAACC,GAAD,EAAS;AAClC,QAAMC,KAAK,GAAGb,QAAQ,CAACM,MAAM,CAACM,GAAD,CAAP,EAAcV,EAAd,CAAtB;AACA,QAAIW,KAAJ,EAAWN,QAAQ,GAAGK,GAAX;AACZ,GAHD;AAKA,SAAOL,QAAP;AACD;AAED;;;;;;AAIO,SAASO,SAAT,CAAmBR,MAAnB,EAAuCJ,EAAvC,EAAoD;AACzD,MAAIW,KAAJ;AAEAE,EAAAA,MAAM,CAACC,MAAP,CAAcV,MAAd,EAAsBK,OAAtB,CAA8B,UAACL,MAAD,EAAY;AACxCO,IAAAA,KAAK,GAAGP,MAAM,CAACH,IAAP,CAAY,UAACC,KAAD;AAAA,aAAWA,KAAK,CAACF,EAAN,KAAaA,EAAxB;AAAA,KAAZ,CAAR;AACD,GAFD;AAIA,SAAO,CAAC,CAACW,KAAT;AACD;AAED;;;;;;AAIO,SAASI,aAAT,CAAuBV,QAAvB,EAAgD;AACrD,MAAMW,KAA0B,GAAG;AACjCC,IAAAA,OAAO,EAAE,MADwB;AAEjCC,IAAAA,aAAa,EAAE,QAFkB;AAGjCC,IAAAA,UAAU,EAAE;AAHqB,GAAnC;;AAMA,MAAId,QAAQ,CAACe,QAAT,CAAkB,OAAlB,CAAJ,EAAgC;AAC9BJ,IAAAA,KAAK,CAACG,UAAN,GAAmB,UAAnB;AACD,GAFD,MAEO,IAAId,QAAQ,CAACe,QAAT,CAAkB,MAAlB,CAAJ,EAA+B;AACpCJ,IAAAA,KAAK,CAACG,UAAN,GAAmB,YAAnB;AACD;;AAED,SAAOH,KAAP;AACD","sourcesContent":["import { ToastPosition, ToastOptions, ToastState, ToastId } from \"./toast.types\"\nimport { objectKeys } from \"@chakra-ui/utils\"\n\n/**\n * Given an array of toasts for a specific position.\n * It returns the toast that matches the `id` passed\n */\nexport function findById(arr: ToastOptions[], id: ToastId) {\n  return arr.find((toast) => toast.id === id)\n}\n\n/**\n * Given the toast manager state, finds the toast that matches\n * the id and return it's position and index\n */\nexport function findToast(toasts: ToastState, id: ToastId) {\n  const position = getToastPosition(toasts, id)\n\n  const index = position\n    ? toasts[position].findIndex((toast) => toast.id == id)\n    : -1\n\n  return {\n    position,\n    index,\n  }\n}\n\n/**\n * Given the toast manager state, finds the position of the toast that\n * matches the `id`\n */\nexport function getToastPosition(toasts: ToastState, id: ToastId) {\n  let position: ToastPosition | undefined\n\n  objectKeys(toasts).forEach((pos) => {\n    const found = findById(toasts[pos], id)\n    if (found) position = pos\n  })\n\n  return position\n}\n\n/**\n * Given the toast manager state, checks if a specific toast is\n * still in the state, which means it's still visible on screen.\n */\nexport function isVisible(toasts: ToastState, id: ToastId) {\n  let found: any\n\n  Object.values(toasts).forEach((toasts) => {\n    found = toasts.find((toast) => toast.id === id)\n  })\n\n  return !!found\n}\n\n/**\n * Get's the styles to be applied to a toast's container\n * based on it's position in the manager\n */\nexport function getToastStyle(position: ToastPosition) {\n  const style: React.CSSProperties = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  }\n\n  if (position.includes(\"right\")) {\n    style.alignItems = \"flex-end\"\n  } else if (position.includes(\"left\")) {\n    style.alignItems = \"flex-start\"\n  }\n\n  return style\n}\n"],"file":"toast.utils.js"}