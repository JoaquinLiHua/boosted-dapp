{"version":3,"sources":["../../src/use-toast.tsx"],"names":["Alert","AlertDescription","AlertIcon","AlertTitle","CloseButton","chakra","ThemeProvider","useTheme","isFunction","merge","React","toast","Toast","props","status","variant","id","title","isClosable","onClose","description","defaults","duration","position","useToast","theme","useMemo","toastImpl","options","render","Message","opts","notify","close","closeAll","update","rest","message","isActive"],"mappings":"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","sourcesContent":["import {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n} from \"@chakra-ui/alert\"\nimport type { AlertStatus } from \"@chakra-ui/alert\"\nimport { CloseButton } from \"@chakra-ui/close-button\"\nimport { chakra, ThemeProvider, useTheme } from \"@chakra-ui/system\"\nimport { isFunction, merge } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { toast } from \"./toast.class\"\nimport { RenderProps, ToastOptions, ToastId } from \"./toast.types\"\n\nexport interface UseToastOptions {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastOptions[\"position\"]\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: string\n  /**\n   * The description of the toast\n   */\n  description?: string\n  /**\n   * If `true`, toast will show a close button\n   */\n  isClosable?: boolean\n  /**\n   * The alert component `variant` to use\n   */\n  variant?: string\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n}\n\nexport type IToast = UseToastOptions\n\nconst Toast: React.FC<any> = (props) => {\n  const { status, variant, id, title, isClosable, onClose, description } = props\n\n  return (\n    <Alert\n      status={status}\n      variant={variant}\n      id={id}\n      textAlign=\"left\"\n      boxShadow=\"lg\"\n      borderRadius=\"md\"\n      alignItems=\"start\"\n      margin={2}\n      paddingRight={8}\n    >\n      <AlertIcon />\n      <chakra.div flex=\"1\">\n        {title && <AlertTitle>{title}</AlertTitle>}\n        {description && (\n          <AlertDescription marginTop=\"px\" lineHeight=\"short\">\n            {description}\n          </AlertDescription>\n        )}\n      </chakra.div>\n      {isClosable && (\n        <CloseButton\n          size=\"sm\"\n          onClick={onClose}\n          position=\"absolute\"\n          right=\"4px\"\n          top=\"4px\"\n        />\n      )}\n    </Alert>\n  )\n}\n\nconst defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\",\n} as const\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast() {\n  const theme = useTheme()\n\n  return React.useMemo(() => {\n    const toastImpl = function (options: UseToastOptions) {\n      const { render } = options\n\n      const Message: React.FC<RenderProps> = (props) => (\n        <ThemeProvider theme={theme}>\n          {isFunction(render) ? (\n            render(props)\n          ) : (\n            <Toast {...{ ...props, ...opts }} />\n          )}\n        </ThemeProvider>\n      )\n\n      const opts = merge({}, defaults, options)\n\n      return toast.notify(Message, opts)\n    }\n\n    toastImpl.close = toast.close\n    toastImpl.closeAll = toast.closeAll\n\n    // toasts can only be updated if they have a valid id\n    toastImpl.update = (id: ToastId, options: Omit<UseToastOptions, \"id\">) => {\n      const { render, ...rest } = options\n\n      if (!id) return\n\n      const opts = merge({}, defaults, rest) as any\n\n      toast.update(id, {\n        ...opts,\n        message: (props) => (\n          <ThemeProvider theme={theme}>\n            {isFunction(render) ? (\n              render(props)\n            ) : (\n              <Toast {...{ ...props, ...opts }} />\n            )}\n          </ThemeProvider>\n        ),\n      })\n    }\n\n    toastImpl.isActive = toast.isActive\n\n    return toastImpl\n  }, [theme])\n}\n\nexport default useToast\n"],"file":"use-toast.js"}