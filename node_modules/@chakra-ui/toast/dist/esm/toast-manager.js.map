{"version":3,"sources":["../../src/toast-manager.tsx"],"names":["objectKeys","React","Toast","findToast","getToastPosition","ToastManager","Component","constructor","props","top","bottom","message","options","toast","createToast","position","id","setState","prevToasts","isTop","includes","prevState","nextState","index","state","forEach","closeToast","counter","duration","onCloseComplete","onRequestRemove","removeToast","String","status","map","requestClose","filter","Boolean","style","zIndex","pointerEvents","margin","textAlign","right","left","methods","notify","closeAll","close","update","updateToast","isActive","isVisible","render","toasts","getStyle"],"mappings":"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","sourcesContent":["import { objectKeys } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Toast } from \"./toast\"\nimport {\n  ToastId,\n  ToastMessage,\n  ToastOptions,\n  ToastPosition,\n} from \"./toast.types\"\nimport { findToast, getToastPosition } from \"./toast.utils\"\n\nexport interface Methods {\n  notify: (message: ToastMessage, options: CreateToastOptions) => ToastId\n  closeAll: () => void\n  close: (id: ToastId) => void\n  update: (id: ToastId, options: CreateToastOptions) => void\n  isActive: (id: ToastId) => boolean\n}\n\ninterface Props {\n  notify: (methods: Methods) => void\n}\n\ntype State = { [K in ToastPosition]: ToastOptions[] }\n\ntype CreateToastOptions = Partial<\n  Pick<\n    ToastOptions,\n    \"status\" | \"duration\" | \"position\" | \"id\" | \"onCloseComplete\"\n  >\n>\n\n/**\n * Manages the creation, and removal of toasts\n * across all corners (\"top\", \"bottom\", etc.)\n */\nexport class ToastManager extends React.Component<Props, State> {\n  /**\n   * Static id counter to create unique ids\n   * for each toast\n   */\n  static counter = 0\n\n  /**\n   * State to track all the toast across all positions\n   */\n  state: State = {\n    top: [],\n    \"top-left\": [],\n    \"top-right\": [],\n    \"bottom-left\": [],\n    bottom: [],\n    \"bottom-right\": [],\n  }\n\n  constructor(props: Props) {\n    super(props)\n\n    const methods = {\n      notify: this.notify,\n      closeAll: this.closeAll,\n      close: this.closeToast,\n      update: this.updateToast,\n      isActive: this.isVisible,\n    }\n\n    props.notify(methods)\n  }\n\n  /**\n   * Function to actually create a toast and add it\n   * to state at the specified position\n   */\n  notify = (message: ToastMessage, options: CreateToastOptions) => {\n    const toast = this.createToast(message, options)\n    const { position, id } = toast\n\n    this.setState((prevToasts) => {\n      /**\n       * - If the toast is positioned at the top edges, the\n       * recent toast stacks on top of the other toasts.\n       *\n       * - If the toast is positioned at the bottom edges, the recent\n       * toast stacks below the other toasts.\n       */\n      const isTop = position.includes(\"top\")\n\n      return {\n        ...prevToasts,\n        [position]: isTop\n          ? [toast, ...prevToasts[position]]\n          : [...prevToasts[position], toast],\n      }\n    })\n\n    return id\n  }\n\n  /**\n   * Update a specific toast with new options based on the\n   * passed `id`\n   */\n  updateToast = (id: ToastId, options: CreateToastOptions) => {\n    this.setState((prevState) => {\n      const nextState = { ...prevState }\n      const { position, index } = findToast(nextState, id)\n\n      if (position && index !== -1) {\n        nextState[position][index] = {\n          ...nextState[position][index],\n          ...options,\n        }\n      }\n\n      return nextState\n    })\n  }\n\n  /**\n   * Close all toasts at once\n   */\n  closeAll = () => {\n    objectKeys(this.state).forEach((position) => {\n      this.state[position].forEach((toast) => {\n        this.closeToast(toast.id)\n      })\n    })\n  }\n\n  /**\n   * Create properties for a new toast\n   */\n  createToast = (message: ToastMessage, options: CreateToastOptions) => {\n    const id = options.id ?? ++ToastManager.counter\n\n    const position = options.position ?? \"top\"\n\n    return {\n      id,\n      message,\n      position,\n      duration: options.duration,\n      onCloseComplete: options.onCloseComplete,\n      onRequestRemove: () => this.removeToast(String(id), position),\n      status: options.status,\n    }\n  }\n\n  /**\n   * Requests to close a toast based on it's id and position\n   */\n  closeToast = (id: ToastId) => {\n    this.setState((prevState) => {\n      const position = getToastPosition(prevState, id)\n\n      if (!position) return prevState\n\n      return {\n        ...prevState,\n        [position]: prevState[position].map((toast) => ({\n          ...toast,\n          requestClose: toast.id == id,\n        })),\n      }\n    })\n  }\n\n  /**\n   * Delete a toast record at it's position\n   */\n  removeToast = (id: ToastId, position: ToastPosition) => {\n    this.setState((prevState) => {\n      return {\n        ...prevState,\n        [position]: prevState[position].filter((toast) => toast.id != id),\n      }\n    })\n  }\n\n  isVisible = (id: ToastId) => {\n    const { position } = findToast(this.state, id)\n    return Boolean(position)\n  }\n\n  /**\n   * Compute the style of a toast based on it's position\n   */\n  getStyle = (position: ToastPosition) => {\n    const style: React.CSSProperties = {\n      position: \"fixed\",\n      zIndex: 5500,\n      pointerEvents: \"none\",\n    }\n\n    if (position === \"top\" || position === \"bottom\") {\n      style.margin = \"0 auto\"\n      style.textAlign = \"center\"\n    }\n\n    if (position.includes(\"top\")) {\n      style.top = 0\n    }\n\n    if (position.includes(\"bottom\")) {\n      style.bottom = 0\n    }\n\n    if (!position.includes(\"left\")) {\n      style.right = 0\n    }\n\n    if (!position.includes(\"right\")) {\n      style.left = 0\n    }\n\n    return style\n  }\n\n  render() {\n    return objectKeys(this.state).map((position) => {\n      const toasts = this.state[position]\n      return (\n        <span\n          key={position}\n          id={\"chakra-toast-manager-\" + position}\n          style={this.getStyle(position)}\n        >\n          {toasts.map((toast) => (\n            <Toast key={toast.id} {...toast} />\n          ))}\n        </span>\n      )\n    })\n  }\n}\n"],"file":"toast-manager.js"}