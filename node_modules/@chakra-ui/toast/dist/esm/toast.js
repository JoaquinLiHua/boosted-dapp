function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { useTimeout } from "@chakra-ui/hooks";
import { Transition } from "@chakra-ui/transition";
import { isFunction, __DEV__ } from "@chakra-ui/utils";
import ReachAlert from "@reach/alert";
import { useRect } from "@reach/rect";
import * as React from "react";
import { getToastStyle } from "./toast.utils";
export var Toast = props => {
  var _rect$height;

  var {
    id,
    message,
    onCloseComplete,
    onRequestRemove,
    requestClose = false,
    position = "bottom",
    duration = 5000
  } = props;
  var ref = React.useRef(null);
  var [delay, setDelay] = React.useState(duration);
  var [show, setShow] = React.useState(true);
  React.useEffect(() => {
    setDelay(duration);
  }, [duration]);

  var onMouseEnter = () => {
    setDelay(null);
  };

  var onMouseLeave = () => {
    setDelay(duration);
  };

  var onExited = () => {
    if (!show) {
      onRequestRemove();
    }

    onCloseComplete == null ? void 0 : onCloseComplete();
  };

  var close = () => {
    setShow(false);
  };

  React.useEffect(() => {
    if (requestClose) {
      setShow(false);
    }
  }, [requestClose]);
  useTimeout(close, delay);
  var style = React.useMemo(() => getToastStyle(position), [position]);
  var rect = useRect(ref);
  var height = (_rect$height = rect == null ? void 0 : rect.height) != null ? _rect$height : 0;
  var isTop = position.includes("top");
  /**
   * @todo
   *
   * Make it possible to configure this toast transition
   * from `theme.transitions.toast`
   */

  var y = isTop ? "-" + height + "px" : 0;
  var styles = {
    init: {
      opacity: 0,
      height: 0,
      transform: "translateY(" + y + ") scale(1)"
    },
    entered: {
      opacity: 1,
      height,
      transform: "translateY(0) scale(1)"
    },
    exiting: {
      opacity: 0,
      height: 0,
      transform: "translateY(0) scale(0.9)"
    }
  };
  return /*#__PURE__*/React.createElement(Transition, {
    styles: styles
    /**
     * We use the `easeInOutQuint` from https://easings.net/en#
     */
    ,
    transition: "all 0.3s cubic-bezier(0.23, 1, 0.32, 1)",
    in: show,
    timeout: {
      enter: 0,
      exit: 150
    },
    onExited: onExited
  }, styles => /*#__PURE__*/React.createElement("div", {
    "data-toast": "",
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    style: _extends({
      willChange: "transform, height, opacity"
    }, style, styles)
  }, /*#__PURE__*/React.createElement("div", {
    ref: ref,
    "data-toast-inner": "",
    style: {
      pointerEvents: "auto",
      maxWidth: 560,
      minWidth: 300
    }
  }, /*#__PURE__*/React.createElement(ReachAlert, null, isFunction(message) ? message({
    id,
    onClose: close
  }) : message))));
};

if (__DEV__) {
  Toast.displayName = "Toast";
}
//# sourceMappingURL=toast.js.map