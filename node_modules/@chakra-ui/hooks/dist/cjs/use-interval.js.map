{"version":3,"sources":["../../src/use-interval.ts"],"names":["useInterval","callback","delay","savedCallback","React","useEffect","tick","current","id","setInterval","clearInterval"],"mappings":";;;;;AAAA;;AACA;;;;;;AAEA;;;;;;AAMO,SAASA,WAAT,CAAqBC,QAArB,EAA2CC,KAA3C,EAAiE;AACtE,MAAMC,aAAa,GAAG,gCAAaF,QAAb,CAAtB;AAEAG,EAAAA,KAAK,CAACC,SAAN,CAAgB,YAAM;AACpB,QAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjBH,MAAAA,aAAa,CAACI,OAAd,oBAAAJ,aAAa,CAACI,OAAd;AACD,KAFD;;AAGA,QAAIL,KAAK,KAAK,IAAd,EAAoB;AAClB,UAAMM,EAAE,GAAGC,WAAW,CAACH,IAAD,EAAOJ,KAAP,CAAtB;AACA,aAAO;AAAA,eAAMQ,aAAa,CAACF,EAAD,CAAnB;AAAA,OAAP;AACD;AACF,GARD,EAQG,CAACN,KAAD,EAAQC,aAAR,CARH;AASD","sourcesContent":["import * as React from \"react\"\nimport { useLatestRef } from \"./use-latest-ref\"\n\n/**\n * React Hook that provides a declarative `setInterval`\n *\n * @param callback the callback to execute at interval\n * @param delay the `setInterval` delay (in ms)\n */\nexport function useInterval(callback: () => void, delay: number | null) {\n  const savedCallback = useLatestRef(callback)\n\n  React.useEffect(() => {\n    const tick = () => {\n      savedCallback.current?.()\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay, savedCallback])\n}\n"],"file":"use-interval.js"}