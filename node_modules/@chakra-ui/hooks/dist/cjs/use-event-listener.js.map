{"version":3,"sources":["../../src/use-event-listener.ts"],"names":["useEventListener","event","handler","doc","options","isBrowser","document","savedHandler","React","useEffect","listener","current","addEventListener","removeEventListener"],"mappings":";;;;;AAAA;;AACA;;AACA;;;;;;AAIA;;;;;;;;AAQO,SAASA,gBAAT,CACLC,KADK,EAELC,OAFK,EAGLC,GAHK,EAILC,OAJK,EAKL;AAAA,MAFAD,GAEA;AAFAA,IAAAA,GAEA,GAFuBE,mBAAYC,QAAZ,GAAuB,IAE9C;AAAA;;AACA,MAAMC,YAAY,GAAG,gCAAaL,OAAb,CAArB;AAEAM,EAAAA,KAAK,CAACC,SAAN,CAAgB,YAAM;AACpB,QAAI,CAACN,GAAL,EAAU;;AAEV,QAAMO,QAAQ,GAAG,SAAXA,QAAW,CAACT,KAAD,EAAgB;AAC/BM,MAAAA,YAAY,CAACI,OAAb,CAAqBV,KAArB;AACD,KAFD;;AAIAE,IAAAA,GAAG,CAACS,gBAAJ,CAAqBX,KAArB,EAA4BS,QAA5B,EAAsCN,OAAtC;AAEA,WAAO,YAAM;AACXD,MAAAA,GAAG,CAACU,mBAAJ,CAAwBZ,KAAxB,EAA+BS,QAA/B,EAAyCN,OAAzC;AACD,KAFD;AAGD,GAZD,EAYG,CAACH,KAAD,EAAQE,GAAR,EAAaC,OAAb,EAAsBG,YAAtB,CAZH;AAcA,SAAO,YAAM;AAAA;;AACX,YAAAJ,GAAG,SAAH,iBAAKU,mBAAL,CAAyBZ,KAAzB,EAAgCM,YAAY,CAACI,OAA7C,EAAsDP,OAAtD;AACD,GAFD;AAGD","sourcesContent":["import * as React from \"react\"\nimport { isBrowser, FunctionArguments } from \"@chakra-ui/utils\"\nimport { useLatestRef } from \"./use-latest-ref\"\n\ntype AddEventListener = FunctionArguments<typeof document.addEventListener>\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n */\nexport function useEventListener(\n  event: keyof WindowEventMap,\n  handler: (event: any) => void,\n  doc: Document | null = isBrowser ? document : null,\n  options?: AddEventListener[2],\n) {\n  const savedHandler = useLatestRef(handler)\n\n  React.useEffect(() => {\n    if (!doc) return\n\n    const listener = (event: any) => {\n      savedHandler.current(event)\n    }\n\n    doc.addEventListener(event, listener, options)\n\n    return () => {\n      doc.removeEventListener(event, listener, options)\n    }\n  }, [event, doc, options, savedHandler])\n\n  return () => {\n    doc?.removeEventListener(event, savedHandler.current, options)\n  }\n}\n"],"file":"use-event-listener.js"}