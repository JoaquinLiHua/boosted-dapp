{"version":3,"sources":["../../src/use-controllable.ts"],"names":["useControllableProp","prop","state","React","useRef","undefined","isControlled","current","value","defaultPropsMap","defaultValue","onChange","useControllableState","props","valueProp","shouldUpdate","name","propsMap","useState","valueState","setValue","useEffect","nextIsControlled","nextMode","mode","condition","message","_defaultValue","JSON","stringify","updateValue","useCallback","next","nextValue","shouldUpdateState"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { runIfFn, warn } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const { current: isControlled } = React.useRef(prop !== undefined)\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state\n  return [isControlled, value] as const\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T)\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (nextValue: T) => void\n  /**\n   * The condition to update the state\n   */\n  shouldUpdate?: (prevState: T, state: T) => boolean\n  /**\n   * The component name (for warnings)\n   */\n  name?: string\n  /**\n   * A mapping for the props to give more contextual warning messages.\n   *\n   * In some components `value` might be called `index`, and defaultValue\n   * might be called `defaultIndex`, so this map helps us generate\n   * contextual warning messages\n   */\n  propsMap?: {\n    value?: string\n    defaultValue?: string\n    onChange?: string\n  }\n}\n\nconst defaultPropsMap = {\n  value: \"value\",\n  defaultValue: \"defaultValue\",\n  onChange: \"onChange\",\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = () => true,\n    name = \"Component\",\n    propsMap = defaultPropsMap,\n  } = props\n\n  const [valueState, setValue] = React.useState(defaultValue as T)\n  const { current: isControlled } = React.useRef(valueProp !== undefined)\n\n  // don't switch from controlled to uncontrolled\n  React.useEffect(() => {\n    const nextIsControlled = valueProp !== undefined\n\n    const nextMode = nextIsControlled ? \"a controlled\" : \"an uncontrolled\"\n    const mode = isControlled ? \"a controlled\" : \"an uncontrolled\"\n\n    warn({\n      condition: isControlled !== nextIsControlled,\n      message:\n        `Warning: ${name} is changing from ${mode} to ${nextMode} component. ` +\n        `Components should not switch from controlled to uncontrolled (or vice versa). ` +\n        `Use the '${propsMap[\"value\"]}' with an '${propsMap[\"onChange\"]}' handler. ` +\n        `If you want an uncontrolled component, remove the ${propsMap[\"value\"]} prop and use '${propsMap[\"defaultValue\"]}' instead. \"` +\n        `More info: https://fb.me/react-controlled-components`,\n    })\n  }, [valueProp, isControlled, name])\n\n  const { current: _defaultValue } = React.useRef(defaultValue)\n\n  React.useEffect(() => {\n    warn({\n      condition: _defaultValue !== defaultValue,\n      message:\n        `Warning: A component is changing the default value of an uncontrolled ${name} after being initialized. ` +\n        `To suppress this warning opt to use a controlled ${name}.`,\n    })\n  }, [JSON.stringify(defaultValue)])\n\n  const value = isControlled ? (valueProp as T) : valueState\n\n  const updateValue = React.useCallback(\n    (next: React.SetStateAction<T>) => {\n      const nextValue = runIfFn(next, value)\n      const shouldUpdateState = shouldUpdate(value, nextValue)\n\n      if (!shouldUpdateState) return\n\n      if (!isControlled) {\n        setValue(next)\n      }\n\n      onChange?.(nextValue)\n    },\n    [onChange, shouldUpdate, isControlled, value],\n  )\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"],"file":"use-controllable.js"}