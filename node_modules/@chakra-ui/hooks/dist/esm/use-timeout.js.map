{"version":3,"sources":["../../src/use-timeout.ts"],"names":["React","useLatestRef","useTimeout","callback","delay","savedCallback","useEffect","timeoutId","setTimeout","current","clearTimeout"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA;;;;;;;AAMA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAAwCC,KAAxC,EAA8D;AACnE,MAAMC,aAAa,GAAGJ,YAAY,CAACE,QAAD,CAAlC;AAEAH,EAAAA,KAAK,CAACM,SAAN,CAAgB,MAAM;AACpB,QAAIF,KAAK,IAAI,IAAb,EAAmB;AAEnB,QAAMG,SAAS,GAAGC,UAAU,CAAC,MAAM;AACjCH,MAAAA,aAAa,CAACI,OAAd,oBAAAJ,aAAa,CAACI,OAAd;AACD,KAF2B,EAEzBL,KAFyB,CAA5B;AAIA,WAAO,MAAMM,YAAY,CAACH,SAAD,CAAzB;AACD,GARD,EAQG,CAACH,KAAD,EAAQC,aAAR,CARH;AASD","sourcesContent":["import * as React from \"react\"\nimport { useLatestRef } from \"./use-latest-ref\"\n\n/**\n * React hook that provides a declarative `setTimeout`\n *\n * @param callback the callback to run after specified delay\n * @param delay the delay (in ms)\n */\nexport function useTimeout(callback: Function, delay: number | null) {\n  const savedCallback = useLatestRef(callback)\n\n  React.useEffect(() => {\n    if (delay == null) return\n\n    const timeoutId = setTimeout(() => {\n      savedCallback.current?.()\n    }, delay)\n\n    return () => clearTimeout(timeoutId)\n  }, [delay, savedCallback])\n}\n"],"file":"use-timeout.js"}