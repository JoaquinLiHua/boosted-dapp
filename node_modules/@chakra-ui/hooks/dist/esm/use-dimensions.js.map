{"version":3,"sources":["../../src/use-dimensions.ts"],"names":["React","getBox","useSafeLayoutEffect","useDimensions","ref","observe","dimensions","setDimensions","useState","rafId","useRef","current","node","measure","requestAnimationFrame","boxModel","window","addEventListener","cancelAnimationFrame","removeEventListener"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAiC,kBAAjC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA;;;;;;;AAMA,OAAO,SAASC,aAAT,CACLC,GADK,EAELC,OAFK,EAGL;AACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,KAAK,CAACQ,QAAN,CAAgC,IAAhC,CAApC;AACA,MAAMC,KAAK,GAAGT,KAAK,CAACU,MAAN,EAAd;AAEAR,EAAAA,mBAAmB,CAAC,MAAM;AACxB,QAAI,CAACE,GAAG,CAACO,OAAT,EAAkB;AAElB,QAAMC,IAAI,GAAGR,GAAG,CAACO,OAAjB;;AAEA,aAASE,OAAT,GAAmB;AACjBJ,MAAAA,KAAK,CAACE,OAAN,GAAgBG,qBAAqB,CAAC,MAAM;AAC1C,YAAMC,QAAQ,GAAGd,MAAM,CAACW,IAAD,CAAvB;AACAL,QAAAA,aAAa,CAACQ,QAAD,CAAb;AACD,OAHoC,CAArC;AAID;;AAEDF,IAAAA,OAAO;;AAEP,QAAIR,OAAJ,EAAa;AACXW,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCJ,OAAlC;AACAG,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCJ,OAAlC;AAEA,aAAO,MAAM;AACX,YAAIJ,KAAK,CAACE,OAAV,EAAmB;AACjBO,UAAAA,oBAAoB,CAACT,KAAK,CAACE,OAAP,CAApB;AACD;;AACDK,QAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCN,OAArC;AACAG,QAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCN,OAArC;AACD,OAND;AAOD;;AAED,WAAO,MAAM;AACX,UAAIJ,KAAK,CAACE,OAAV,EAAmB;AACjBO,QAAAA,oBAAoB,CAACT,KAAK,CAACE,OAAP,CAApB;AACD;AACF,KAJD;AAKD,GAhCkB,EAgChB,CAACP,GAAD,EAAMC,OAAN,CAhCgB,CAAnB;AAkCA,SAAOC,UAAP;AACD","sourcesContent":["import * as React from \"react\"\nimport { getBox, BoxModel } from \"@chakra-ui/utils\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\n\n/**\n * Reack hook to measure a component's dimensions\n *\n * @param ref ref of the component to measure\n * @param observe if `true`, resize and scroll observers will be turned on\n */\nexport function useDimensions(\n  ref: React.RefObject<HTMLElement>,\n  observe?: boolean,\n) {\n  const [dimensions, setDimensions] = React.useState<BoxModel | null>(null)\n  const rafId = React.useRef<number>()\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return\n\n    const node = ref.current\n\n    function measure() {\n      rafId.current = requestAnimationFrame(() => {\n        const boxModel = getBox(node)\n        setDimensions(boxModel)\n      })\n    }\n\n    measure()\n\n    if (observe) {\n      window.addEventListener(\"resize\", measure)\n      window.addEventListener(\"scroll\", measure)\n\n      return () => {\n        if (rafId.current) {\n          cancelAnimationFrame(rafId.current)\n        }\n        window.removeEventListener(\"resize\", measure)\n        window.removeEventListener(\"scroll\", measure)\n      }\n    }\n\n    return () => {\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current)\n      }\n    }\n  }, [ref, observe])\n\n  return dimensions\n}\n"],"file":"use-dimensions.js"}