{"version":3,"sources":["../../src/form-control.tsx"],"names":["useBoolean","useId","useSafeLayoutEffect","Icon","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyleConfig","useStyles","createContext","cx","__DEV__","React","useFormControlLabel","FormControlProvider","useFormControlContext","strict","name","useProvider","props","id","idProp","isRequired","isInvalid","isDisabled","isLoading","isReadOnly","htmlProps","uuid","labelId","feedbackId","helpTextId","hasHelpText","setHasHelpText","isFocused","setFocus","context","onFocus","on","onBlur","off","FormControl","ref","styles","rest","_className","className","width","position","displayName","FormLabel","children","ownProps","field","display","textAlign","RequiredIndicator","requiredIndicator","FormHelperText","helperText","FormErrorMessage","alignItems","errorText","FormErrorIcon","errorIcon"],"mappings":"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","sourcesContent":["import { useBoolean, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport { Icon, IconProps } from \"@chakra-ui/icon\"\nimport {\n  chakra,\n  forwardRef,\n  PropsOf,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useFormControlLabel } from \"./use-form-control\"\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-requred` set to `true`\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the form control will be in it's `loading` state\n   */\n  isLoading?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The error message to be displayed when `isInvalid` is set to `true`\n   */\n  errorText?: string\n  /**\n   * The assistive text to be displayed that provides additional guidance to users\n   */\n  helperText?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype ControlContext = Omit<ReturnType<typeof useProvider>, \"htmlProps\">\n\nconst [FormControlProvider, useFormControlContext] = createContext<\n  ControlContext\n>({\n  strict: false,\n  name: \"FormControlContext\",\n})\n\nexport { useFormControlContext }\n\nfunction useProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isLoading,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track of when the `FormHelperText` has been rendered.\n   * We use this to append it's id the the `aria-describedby` of the `input`\n   */\n  const [hasHelpText, setHasHelpText] = useBoolean()\n\n  // Let's keep track of when we focus the form element (e.g, `input`)\n  const [isFocused, setFocus] = useBoolean()\n\n  const context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isLoading: !!isLoading,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n  }\n\n  return context\n}\n\nexport interface FormControlProps\n  extends PropsOf<typeof chakra.div>,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const rest = omitThemingProps(props)\n    const { htmlProps, ...context } = useProvider(rest)\n\n    const _className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <StylesProvider value={styles}>\n          <chakra.div\n            role=\"group\"\n            ref={ref}\n            {...htmlProps}\n            className={_className}\n            __css={{\n              width: \"100%\",\n              position: \"relative\",\n            }}\n          />\n        </StylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\"\n}\n\nexport interface FormLabelProps\n  extends PropsOf<typeof chakra.label>,\n    ThemingProps {}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", props)\n  const { className, children, ...rest } = omitThemingProps(props)\n\n  const ownProps = useFormControlLabel(rest)\n  const field = useFormControlContext()\n\n  return (\n    <chakra.label\n      ref={ref}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"left\",\n        ...styles,\n      }}\n      {...ownProps}\n    >\n      {children}\n      {field?.isRequired && <RequiredIndicator />}\n    </chakra.label>\n  )\n})\n\nif (__DEV__) {\n  FormLabel.displayName = \"FormLabel\"\n}\n\nexport interface RequiredIndicatorProps extends PropsOf<typeof chakra.span> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useStyles()\n\n    if (!field?.isRequired) return null\n\n    const _className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        role=\"presentation\"\n        aria-hidden\n        ref={ref}\n        {...props}\n        __css={styles.requiredIndicator}\n        className={_className}\n        children={props.children || \"*\"}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  RequiredIndicator.displayName = \"RequiredIndicator\"\n}\n\nexport interface HelpTextProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided\n */\nexport const FormHelperText = forwardRef<HelpTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useStyles()\n\n    /**\n     * Notify the field context when the help text is rendered on\n     * screen, so we can apply the correct `aria-describedby` to the field (e.g. input, textarea)\n     */\n    useSafeLayoutEffect(() => {\n      field?.setHasHelpText.on()\n      return () => field?.setHasHelpText.off()\n    }, [])\n\n    const _className = cx(\"chakra-form__helper-text\", props.className)\n\n    return (\n      <chakra.div\n        ref={ref}\n        __css={styles.helperText}\n        {...props}\n        className={_className}\n        id={props.id ?? field?.helpTextId}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\"\n}\n\nexport interface FormErrorMessageProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * Used to provide feedback about an invalid input,\n * and suggest clear instrctions on how to fix it.\n */\nexport const FormErrorMessage = forwardRef<FormErrorMessageProps, \"div\">(\n  function FormErrorMessage(props, ref) {\n    const styles = useStyles()\n    const field = useFormControlContext()\n\n    if (!field?.isInvalid) return null\n\n    const _className = cx(\"chakra-form__error-message\", props.className)\n\n    return (\n      <chakra.div\n        aria-live=\"polite\"\n        ref={ref}\n        {...props}\n        __css={{\n          display: \"flex\",\n          alignItems: \"center\",\n          ...styles.errorText,\n        }}\n        className={_className}\n        id={props.id ?? field?.feedbackId}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  FormErrorMessage.displayName = \"FormErrorMessage\"\n}\n\n/**\n * Used as the visual indicator that a field is invalid or\n * a field has incorrect values.\n */\nexport const FormErrorIcon = forwardRef<IconProps, \"svg\">(\n  function FormErrorIcon(props, ref) {\n    const styles = useStyles()\n    const field = useFormControlContext()\n\n    if (!field?.isInvalid) return null\n\n    const _className = cx(\"chakra-form__error-icon\", props.className)\n\n    return (\n      <Icon\n        ref={ref}\n        aria-hidden\n        {...props}\n        __css={styles.errorIcon}\n        className={_className}\n      >\n        <path\n          fill=\"currentColor\"\n          d=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n        />\n      </Icon>\n    )\n  },\n)\n\nif (__DEV__) {\n  FormErrorIcon.displayName = \"FormErrorIcon\"\n}\n"],"file":"form-control.js"}