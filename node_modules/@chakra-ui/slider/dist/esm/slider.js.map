{"version":3,"sources":["../../src/slider.tsx"],"names":["chakra","useMultiStyleConfig","omitThemingProps","StylesProvider","useStyles","forwardRef","createContext","__DEV__","cx","React","useSlider","SliderProvider","useSliderContext","name","errorMessage","Slider","props","ref","styles","realProps","getInputProps","getRootProps","context","rootProps","inputProps","rootStyles","display","position","cursor","container","children","defaultProps","orientation","displayName","SliderThumb","getThumbProps","thumbStyles","alignItems","justifyContent","outline","thumb","thumbProps","className","SliderTrack","getTrackProps","trackStyles","overflow","track","trackProps","SliderFilledTrack","getInnerTrackProps","width","height","filledTrack","SliderMark","getMarkerProps","markProps"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  PropsOf,\n  ThemingProps,\n  useMultiStyleConfig,\n  omitThemingProps,\n  StylesProvider,\n  useStyles,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { createContext, __DEV__, cx } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useSlider, UseSliderProps, UseSliderReturn } from \"./use-slider\"\n\ninterface SliderContext\n  extends Omit<UseSliderReturn, \"getInputProps\" | \"getRootProps\"> {}\n\nconst [SliderProvider, useSliderContext] = createContext<SliderContext>({\n  name: \"SliderContext\",\n  errorMessage:\n    \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <Slider />\",\n})\n\nexport { SliderProvider, useSliderContext }\n\nexport interface SliderProps\n  extends UseSliderProps,\n    ThemingProps,\n    Omit<PropsOf<typeof chakra.div>, \"size\" | \"defaultValue\" | \"onChange\"> {}\n\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/components/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#slider\n */\nexport const Slider = forwardRef<SliderProps, \"div\">(function Slider(\n  props,\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Slider\", props)\n  const realProps = omitThemingProps(props)\n\n  const { getInputProps, getRootProps, ...context } = useSlider(realProps)\n\n  const rootProps = getRootProps()\n  const inputProps = getInputProps({}, ref)\n\n  const rootStyles = {\n    display: \"inline-block\",\n    position: \"relative\",\n    cursor: \"pointer\",\n    ...styles.container,\n  }\n\n  return (\n    <SliderProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div {...rootProps} className=\"chakra-slider\" __css={rootStyles}>\n          {props.children}\n          <input {...inputProps} />\n        </chakra.div>\n      </StylesProvider>\n    </SliderProvider>\n  )\n})\n\nSlider.defaultProps = {\n  orientation: \"horizontal\",\n}\n\nif (__DEV__) {\n  Slider.displayName = \"Slider\"\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nexport interface SliderThumbProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\nexport const SliderThumb = forwardRef<SliderThumbProps, \"div\">(\n  function SliderThumb(props, ref) {\n    const { getThumbProps } = useSliderContext()\n\n    const styles = useStyles()\n    const thumbStyles = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      position: \"absolute\",\n      outline: 0,\n      ...styles.thumb,\n    }\n\n    const thumbProps = getThumbProps(props)\n\n    return (\n      <chakra.div\n        {...thumbProps}\n        className={cx(\"chakra-slider__thumb\", props.className)}\n        __css={thumbStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  SliderThumb.displayName = \"SliderThumb\"\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nexport interface SliderTrackProps extends PropsOf<typeof chakra.div> {}\n\nexport const SliderTrack = forwardRef<SliderTrackProps, \"div\">(\n  function SliderTrack(props, ref) {\n    const { getTrackProps } = useSliderContext()\n\n    const styles = useStyles()\n    const trackStyles = {\n      overflow: \"hidden\",\n      ...styles.track,\n    }\n\n    const trackProps = getTrackProps(props)\n\n    return (\n      <chakra.div\n        {...trackProps}\n        className={cx(\"chakra-slider__track\", props.className)}\n        __css={trackStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  SliderTrack.displayName = \"SliderTrack\"\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nexport type SliderInnerTrackProps = PropsOf<typeof chakra.div>\n\nexport const SliderFilledTrack: React.FC<SliderInnerTrackProps> = (props) => {\n  const { getInnerTrackProps } = useSliderContext()\n\n  const styles = useStyles()\n  const trackStyles = {\n    width: \"inherit\",\n    height: \"inherit\",\n    ...styles.filledTrack,\n  }\n\n  const trackProps = getInnerTrackProps(props)\n\n  return (\n    <chakra.div\n      {...trackProps}\n      className=\"chakra-slider__filled-track\"\n      __css={trackStyles}\n    />\n  )\n}\n\nif (__DEV__) {\n  SliderFilledTrack.displayName = \"SliderFilledTrack\"\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nexport interface SliderMarkProps extends PropsOf<typeof chakra.div> {\n  value: number\n}\n\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/components/slider\n */\nexport const SliderMark: React.FC<SliderMarkProps> = (props) => {\n  const { getMarkerProps } = useSliderContext()\n  const markProps = getMarkerProps(props)\n  return (\n    <chakra.div\n      {...markProps}\n      className={cx(\"chakra-slider__marker\", props.className)}\n    />\n  )\n}\n\nif (__DEV__) {\n  SliderMark.displayName = \"SliderMark\"\n}\n"],"file":"slider.js"}