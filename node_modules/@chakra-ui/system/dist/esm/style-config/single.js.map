{"version":3,"sources":["../../../src/style-config/single.ts"],"names":["React","get","runIfFn","merge","filterUndefined","useChakra","isEqual","useStyleConfig","themeKey","props","styleConfig","styleConfigProp","rest","theme","colorMode","themeStyleConfig","propsWithDefault","defaultProps","allProps","stylesRef","useRef","useMemo","baseStyles","baseStyle","variantStyle","variants","variant","sizeStyle","sizes","size","styles","isStyleEqual","current"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAeC,GAAf,EAAoBC,OAApB,EAA6BC,KAA7B,EAAoCC,eAApC,QAA2D,kBAA3D;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA,OAAOC,OAAP,MAAoB,oBAApB;AAWA,OAAO,SAASC,cAAT,CAAwBC,QAAxB,EAA0CC,KAA1C,EAAuD;AAAA;;AAC5D,MAAM;AAAEC,IAAAA,WAAW,EAAEC;AAAf,MAA4CF,KAAlD;AAAA,MAAyCG,IAAzC,iCAAkDH,KAAlD;;AAEA,MAAM;AAAEI,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAuBT,SAAS,EAAtC;AAEA,MAAMU,gBAAgB,GAAGd,GAAG,CAACY,KAAD,kBAAsBL,QAAtB,CAA5B;AACA,MAAME,WAAW,GAAIC,eAAe,IAAII,gBAAxC;AAEA,MAAMC,gBAAgB,GAAGb,KAAK,CAC5B,EAD4B,2BAE5BO,WAF4B,oBAE5BA,WAAW,CAAEO,YAFe,oCAEC,EAFD,EAG5Bb,eAAe,CAACQ,IAAD,CAHa,CAA9B;;AAMA,MAAMM,QAAQ,gBACTF,gBADS;AAEZH,IAAAA,KAFY;AAGZC,IAAAA;AAHY,IAAd;;AAMA,MAAMK,SAAS,GAAGnB,KAAK,CAACoB,MAAN,CAAgC,EAAhC,CAAlB;AAEA,SAAOpB,KAAK,CAACqB,OAAN,CAAc,MAAM;AACzB,QAAIX,WAAJ,EAAiB;AAAA;;AACf,UAAMY,UAAU,GAAGpB,OAAO,0BAACQ,WAAW,CAACa,SAAb,oCAA0B,EAA1B,EAA8BL,QAA9B,CAA1B;AAEA,UAAMM,YAAY,GAAGtB,OAAO,oDAC1BQ,WAAW,CAACe,QADc,qBAC1B,uBAAuBP,QAAQ,CAACQ,OAAhC,CAD0B,oCACkB,EADlB,EAE1BR,QAF0B,CAA5B;AAKA,UAAMS,SAAS,GAAGzB,OAAO,gDACvBQ,WAAW,CAACkB,KADW,qBACvB,mBAAoBV,QAAQ,CAACW,IAA7B,CADuB,oCACe,EADf,EAEvBX,QAFuB,CAAzB;AAKA,UAAMY,MAAyB,GAAG3B,KAAK,CACrC,EADqC,EAErCmB,UAFqC,EAGrCK,SAHqC,EAIrCH,YAJqC,CAAvC;AAOA,UAAMO,YAAY,GAAGzB,OAAO,CAACa,SAAS,CAACa,OAAX,EAAoBF,MAApB,CAA5B;;AAEA,UAAI,CAACC,YAAL,EAAmB;AACjBZ,QAAAA,SAAS,CAACa,OAAV,GAAoBF,MAApB;AACD;AACF;;AAED,WAAOX,SAAS,CAACa,OAAjB;AACD,GA7BM,EA6BJ,CAACd,QAAD,EAAWR,WAAX,CA7BI,CAAP;AA8BD;AAED,eAAeH,cAAf","sourcesContent":["import * as React from \"react\"\nimport { Dict, get, runIfFn, merge, filterUndefined } from \"@chakra-ui/utils\"\nimport { useChakra } from \"../hooks\"\nimport { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport isEqual from \"react-fast-compare\"\n\ninterface SingleStyleConfig {\n  defaultProps?: Dict\n  baseStyle?: Dict\n  variants?: Dict\n  sizes?: Dict\n}\n\ntype StyleConfig = SingleStyleConfig | undefined\n\nexport function useStyleConfig(themeKey: string, props: Dict) {\n  const { styleConfig: styleConfigProp, ...rest } = props\n\n  const { theme, colorMode } = useChakra()\n\n  const themeStyleConfig = get(theme, `components.${themeKey}`)\n  const styleConfig = (styleConfigProp || themeStyleConfig) as StyleConfig\n\n  const propsWithDefault = merge(\n    {},\n    styleConfig?.defaultProps ?? {},\n    filterUndefined(rest),\n  )\n\n  const allProps = {\n    ...propsWithDefault,\n    theme,\n    colorMode,\n  } as Dict\n\n  const stylesRef = React.useRef<SystemStyleObject>({})\n\n  return React.useMemo(() => {\n    if (styleConfig) {\n      const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, allProps)\n\n      const variantStyle = runIfFn(\n        styleConfig.variants?.[allProps.variant] ?? {},\n        allProps,\n      )\n\n      const sizeStyle = runIfFn(\n        styleConfig.sizes?.[allProps.size] ?? {},\n        allProps,\n      )\n\n      const styles: SystemStyleObject = merge(\n        {},\n        baseStyles,\n        sizeStyle,\n        variantStyle,\n      )\n\n      const isStyleEqual = isEqual(stylesRef.current, styles)\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles\n      }\n    }\n\n    return stylesRef.current\n  }, [allProps, styleConfig])\n}\n\nexport default useStyleConfig\n"],"file":"single.js"}