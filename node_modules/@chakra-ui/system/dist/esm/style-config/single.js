function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from "react";
import { get, runIfFn, merge, filterUndefined } from "@chakra-ui/utils";
import { useChakra } from "../hooks";
import isEqual from "react-fast-compare";
export function useStyleConfig(themeKey, props) {
  var _styleConfig$defaultP;

  var {
    styleConfig: styleConfigProp
  } = props,
      rest = _objectWithoutPropertiesLoose(props, ["styleConfig"]);

  var {
    theme,
    colorMode
  } = useChakra();
  var themeStyleConfig = get(theme, "components." + themeKey);
  var styleConfig = styleConfigProp || themeStyleConfig;
  var propsWithDefault = merge({}, (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {}, filterUndefined(rest));

  var allProps = _extends({}, propsWithDefault, {
    theme,
    colorMode
  });

  var stylesRef = React.useRef({});
  return React.useMemo(() => {
    if (styleConfig) {
      var _styleConfig$baseStyl, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes$al, _styleConfig$sizes;

      var baseStyles = runIfFn((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {}, allProps);
      var variantStyle = runIfFn((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[allProps.variant]) != null ? _styleConfig$variants : {}, allProps);
      var sizeStyle = runIfFn((_styleConfig$sizes$al = (_styleConfig$sizes = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes[allProps.size]) != null ? _styleConfig$sizes$al : {}, allProps);
      var styles = merge({}, baseStyles, sizeStyle, variantStyle);
      var isStyleEqual = isEqual(stylesRef.current, styles);

      if (!isStyleEqual) {
        stylesRef.current = styles;
      }
    }

    return stylesRef.current;
  }, [allProps, styleConfig]);
}
export default useStyleConfig;
//# sourceMappingURL=single.js.map