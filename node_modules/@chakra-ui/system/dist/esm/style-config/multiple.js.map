{"version":3,"sources":["../../../src/style-config/multiple.ts"],"names":["React","get","runIfFn","merge","filterUndefined","useChakra","isEqual","useMultiStyleConfig","themeKey","props","styleConfig","styleConfigProp","rest","theme","colorMode","themeStyleConfig","propsWithDefault","defaultProps","allProps","partsStyleRef","useRef","useMemo","baseStyles","baseStyle","parts","Object","keys","variants","variant","sizes","size","partsStyle","part","isStyleEqual","current"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAeC,GAAf,EAAoBC,OAApB,EAA6BC,KAA7B,EAAoCC,eAApC,QAA2D,kBAA3D;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA,OAAOC,OAAP,MAAoB,oBAApB;AAYA,OAAO,SAASC,mBAAT,CAA6BC,QAA7B,EAA+CC,KAA/C,EAA4D;AAAA;;AACjE,MAAM;AAAEC,IAAAA,WAAW,EAAEC;AAAf,MAA4CF,KAAlD;AAAA,MAAyCG,IAAzC,iCAAkDH,KAAlD;;AAEA,MAAM;AAAEI,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAuBT,SAAS,EAAtC;AAEA,MAAMU,gBAAgB,GAAGd,GAAG,CAACY,KAAD,kBAAsBL,QAAtB,CAA5B;AACA,MAAME,WAAW,GAAIC,eAAe,IAAII,gBAAxC;AAEA,MAAMC,gBAAgB,GAAGb,KAAK,CAC5B,EAD4B,2BAE5BO,WAF4B,oBAE5BA,WAAW,CAAEO,YAFe,oCAEC,EAFD,EAG5Bb,eAAe,CAACQ,IAAD,CAHa,CAA9B;;AAMA,MAAMM,QAAQ,gBACTF,gBADS;AAEZH,IAAAA,KAFY;AAGZC,IAAAA;AAHY,IAAd;;AAMA,MAAMK,aAAa,GAAGnB,KAAK,CAACoB,MAAN,CAAsC,EAAtC,CAAtB;AAEA,SAAOpB,KAAK,CAACqB,OAAN,CAAc,MAAM;AACzB,QAAIX,WAAJ,EAAiB;AAAA;;AACf,UAAMY,UAAU,GAAGpB,OAAO,0BAACQ,WAAW,CAACa,SAAb,oCAA0B,EAA1B,EAA8BL,QAA9B,CAA1B;AACA,UAAMM,KAAK,GACTC,MAAM,CAACC,IAAP,uBAAYhB,WAAW,CAACc,KAAxB,iCAAiC,EAAjC,KAAwCC,MAAM,CAACC,IAAP,CAAYJ,UAAZ,CAD1C;AAGA,UAAMK,QAAQ,GAAGzB,OAAO,oDACtBQ,WAAW,CAACiB,QADU,qBACtB,uBAAuBT,QAAQ,CAACU,OAAhC,CADsB,oCACsB,EADtB,EAEtBV,QAFsB,CAAxB;AAKA,UAAMW,KAAK,GAAG3B,OAAO,gDAACQ,WAAW,CAACmB,KAAb,qBAAC,mBAAoBX,QAAQ,CAACY,IAA7B,CAAD,oCAAuC,EAAvC,EAA2CZ,QAA3C,CAArB;AAEA,UAAMa,UAAU,GAAG,EAAnB;;AAEA,WAAK,IAAMC,IAAX,IAAmBR,KAAnB,EAA0B;AAAA;;AACxBO,QAAAA,UAAU,CAACC,IAAD,CAAV,GAAmB7B,KAAK,CACtB,EADsB,sBAEtBmB,UAFsB,oBAEtBA,UAAU,CAAGU,IAAH,CAFY,+BAEA,EAFA,iBAGtBH,KAHsB,oBAGtBA,KAAK,CAAGG,IAAH,CAHiB,0BAGL,EAHK,oBAItBL,QAJsB,oBAItBA,QAAQ,CAAGK,IAAH,CAJc,6BAIF,EAJE,CAAxB;AAMD;;AAED,UAAMC,YAAY,GAAG3B,OAAO,CAACa,aAAa,CAACe,OAAf,EAAwBH,UAAxB,CAA5B;;AAEA,UAAI,CAACE,YAAL,EAAmB;AACjBd,QAAAA,aAAa,CAACe,OAAd,GAAwBH,UAAxB;AACD;AACF;;AAED,WAAOZ,aAAa,CAACe,OAArB;AACD,GAhCM,EAgCJ,CAAChB,QAAD,EAAWR,WAAX,CAhCI,CAAP;AAiCD;AAED,eAAeH,mBAAf","sourcesContent":["import * as React from \"react\"\nimport { Dict, get, runIfFn, merge, filterUndefined } from \"@chakra-ui/utils\"\nimport { useChakra } from \"../hooks\"\nimport { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport isEqual from \"react-fast-compare\"\n\ninterface MultiStyleConfig {\n  parts: Dict<string>\n  defaultProps?: Dict\n  baseStyle?: Dict\n  variants?: Dict\n  sizes?: Dict\n}\n\ntype StyleConfig = MultiStyleConfig | undefined\n\nexport function useMultiStyleConfig(themeKey: string, props: Dict) {\n  const { styleConfig: styleConfigProp, ...rest } = props\n\n  const { theme, colorMode } = useChakra()\n\n  const themeStyleConfig = get(theme, `components.${themeKey}`)\n  const styleConfig = (styleConfigProp || themeStyleConfig) as StyleConfig\n\n  const propsWithDefault = merge(\n    {},\n    styleConfig?.defaultProps ?? {},\n    filterUndefined(rest),\n  )\n\n  const allProps = {\n    ...propsWithDefault,\n    theme,\n    colorMode,\n  } as Dict\n\n  const partsStyleRef = React.useRef<Dict<SystemStyleObject>>({})\n\n  return React.useMemo(() => {\n    if (styleConfig) {\n      const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, allProps)\n      const parts =\n        Object.keys(styleConfig.parts ?? {}) || Object.keys(baseStyles)\n\n      const variants = runIfFn(\n        styleConfig.variants?.[allProps.variant] ?? {},\n        allProps,\n      )\n\n      const sizes = runIfFn(styleConfig.sizes?.[allProps.size] ?? {}, allProps)\n\n      const partsStyle = {} as Dict<SystemStyleObject>\n\n      for (const part of parts) {\n        partsStyle[part] = merge(\n          {},\n          baseStyles?.[part] ?? {},\n          sizes?.[part] ?? {},\n          variants?.[part] ?? {},\n        )\n      }\n\n      const isStyleEqual = isEqual(partsStyleRef.current, partsStyle)\n\n      if (!isStyleEqual) {\n        partsStyleRef.current = partsStyle\n      }\n    }\n\n    return partsStyleRef.current\n  }, [allProps, styleConfig])\n}\n\nexport default useMultiStyleConfig\n"],"file":"multiple.js"}