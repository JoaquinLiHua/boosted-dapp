function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { systemProps, css } from "@chakra-ui/styled-system";
import createStyled from "@emotion/styled";
import { pseudoProps, truncateProp, extraProps, domElements, cast } from "./system.utils";
import { shouldForwardProp } from "./should-forward-prop";
var sxProp = cast(props => css(props.sx)(props.theme));

var cssProp = props => props.css;

var __css = cast(props => {
  var result = {};

  for (var key in props.__css) {
    var exists = (key in props);

    if (!exists || props[key] == null) {
      result[key] = props.__css[key];
    }
  }

  return css(result)(props.theme);
});

var base = cast(baseStyle => props => css(baseStyle)(props.theme));
export function styled(component, options) {
  var _ref = options || {},
      {
    baseStyle
  } = _ref,
      styledOptions = _objectWithoutPropertiesLoose(_ref, ["baseStyle"]);

  return createStyled(component, _extends({}, styledOptions, {
    shouldForwardProp
  }))(__css, base(baseStyle), cast(extraProps), cast(truncateProp), cast(systemProps), cast(pseudoProps), sxProp, cast(cssProp));
}
export var chakra = styled;
domElements.forEach(tag => {
  //@ts-ignore
  chakra[tag] = chakra(tag);
});
//# sourceMappingURL=system.js.map