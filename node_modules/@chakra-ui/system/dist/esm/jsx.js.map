{"version":3,"sources":["../../src/jsx.tsx"],"names":["runIfFn","jsx","emotion","css","getCSS","props","sx","undefined","theme","sxStyles","cssStyles","parse","computedProps","prop","type","children","apply"],"mappings":"AAAA,SAAeA,OAAf,QAA8B,kBAA9B;AACA,SAASC,GAAG,IAAIC,OAAhB,QAA+B,eAA/B;AACA,SAA4BC,GAA5B,QAAuC,0BAAvC;;AAOA,SAASC,MAAT,CAAgBC,KAAhB,EAA+B;AAC7B,MAAI,CAACA,KAAK,CAACC,EAAP,IAAa,CAACD,KAAK,CAACF,GAAxB,EAA6B,OAAOI,SAAP;AAC7B;;;;AAGA,SAAQC,KAAD,IAAiB;AACtB;;;AAGA,QAAMC,QAAQ,GAAGN,GAAG,CAACE,KAAK,CAACC,EAAP,CAAH,CAAcE,KAAd,CAAjB;AACA;;;;;AAIA,QAAME,SAAS,GAAGV,OAAO,CAACK,KAAK,CAACF,GAAP,EAAYK,KAAZ,CAAzB;AACA;;;;;AAIA,WAAO,CAACE,SAAD,EAAYD,QAAZ,CAAP;AACD,GAfD;AAgBD;;AAED,SAASE,KAAT,CAAeN,KAAf,EAAwC;AACtC,MAAI,CAACA,KAAL,EAAY,OAAO,IAAP;AAEZ,MAAMO,aAAmB,GAAG,EAA5B;;AAEA,OAAK,IAAMC,IAAX,IAAmBR,KAAnB,EAA0B;AACxB,QAAIQ,IAAI,KAAK,IAAb,EAAmB;AACnBD,IAAAA,aAAa,CAACC,IAAD,CAAb,GAAsBR,KAAK,CAACQ,IAAD,CAA3B;AACD;;AAED,MAAMV,GAAG,GAAGC,MAAM,CAACC,KAAD,CAAlB;AAEA,MAAIF,GAAJ,EAASS,aAAa,CAACT,GAAd,GAAoBA,GAApB;AAET,SAAOS,aAAP;AACD;;AAED,OAAO,IAAMX,GAAG,GAAG,SAANA,GAAM,CACjBa,IADiB,EAEjBT,KAFiB;AAAA,oCAGdU,QAHc;AAGdA,IAAAA,QAHc;AAAA;;AAAA,SAIdb,OAAO,CAACc,KAAR,CAAcT,SAAd,EAAyB,CAACO,IAAD,EAAOH,KAAK,CAACN,KAAD,CAAZ,EAAqB,GAAGU,QAAxB,CAAzB,CAJc;AAAA,CAAZ;AAqBP,eAAed,GAAf","sourcesContent":["import { Dict, runIfFn } from \"@chakra-ui/utils\"\nimport { jsx as emotion } from \"@emotion/core\"\nimport { SystemStyleObject, css } from \"@chakra-ui/styled-system\"\n\ninterface GetCSS {\n  sx?: any\n  css?: any\n}\n\nfunction getCSS(props: GetCSS) {\n  if (!props.sx && !props.css) return undefined\n  /**\n   * Leverage emotion's css function interpolation to access the theme\n   */\n  return (theme: Dict) => {\n    /**\n     * process the theme-aware cx prop\n     */\n    const sxStyles = css(props.sx)(theme)\n    /**\n     * process the normal emotion's css prop\n     * (NB: This is not theme-aware, and you can't use shorthand style props)\n     */\n    const cssStyles = runIfFn(props.css, theme)\n    /**\n     * return an array value and allow emotion do the rest.\n     * By default, emotion can handle array style values\n     */\n    return [cssStyles, sxStyles]\n  }\n}\n\nfunction parse(props: Dict | undefined) {\n  if (!props) return null\n\n  const computedProps: Dict = {}\n\n  for (const prop in props) {\n    if (prop === \"sx\") continue\n    computedProps[prop] = props[prop]\n  }\n\n  const css = getCSS(props)\n\n  if (css) computedProps.css = css\n\n  return computedProps\n}\n\nexport const jsx = (\n  type: React.ElementType,\n  props: Dict,\n  ...children: React.ReactNode[]\n) => emotion.apply(undefined, [type, parse(props), ...children])\n\ninterface SxProp {\n  sx?: SystemStyleObject\n}\n\ndeclare module \"react\" {\n  interface Attributes extends SxProp {}\n}\n\ndeclare global {\n  // eslint-disable-next-line\n  namespace JSX {\n    interface IntrinsicAttributes extends SxProp {}\n  }\n}\n\nexport default jsx\n"],"file":"jsx.js"}