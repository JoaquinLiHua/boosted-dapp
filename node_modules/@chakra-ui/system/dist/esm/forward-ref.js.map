{"version":3,"sources":["../../src/forward-ref.tsx"],"names":["React","forwardRef","comp"],"mappings":"AAAA;;;AAGA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAuCA,OAAO,SAASC,UAAT,CACLC,IADK,EAKL;AACA,sBAAQF,KAAK,CAACC,UAAN,CAAiBC,IAAjB,CAAR;AAID","sourcesContent":["/**\n * All credit goes to Chance (Reach UI), and Haz (Reakit) for this\n */\nimport * as React from \"react\"\n\nexport type AssignableRef<T> =\n  | {\n      bivarianceHack(instance: T | null): void\n    }[\"bivarianceHack\"]\n  | React.MutableRefObject<T | null>\n  | null\n\ntype As<P = any> = React.ElementType<P>\n\nexport type PropsWithAs<T extends As, P> = P &\n  Omit<React.ComponentPropsWithRef<T>, \"as\" | \"color\" | keyof P> & {\n    as?: T\n  }\n\nexport type PropsFromAs<T extends As, P> = (PropsWithAs<T, P> & { as: T }) &\n  PropsWithAs<T, P>\n\nexport type ComponentWithForwardedRef<\n  T extends React.ElementType,\n  P\n> = React.ForwardRefExoticComponent<\n  P & React.HTMLProps<React.ElementType<T>> & React.ComponentPropsWithRef<T>\n>\n\nexport interface ComponentWithAs<T extends As, P> {\n  <TT extends As>(props: PropsWithAs<TT, P>): React.ReactElement | null\n  (props: PropsWithAs<T, P>): React.ReactElement | null\n  displayName?: string\n  propTypes?: React.WeakValidationMap<PropsWithAs<T, P>>\n  contextTypes?: React.ValidationMap<any>\n  defaultProps?: Partial<PropsWithAs<T, P>>\n  /**\n   * @private\n   */\n  id?: string\n}\n\nexport function forwardRef<P, T extends As>(\n  comp: (\n    props: PropsFromAs<T, Omit<P, \"children\" | \"as\">>,\n    ref: React.RefObject<any>,\n  ) => React.ReactElement | null,\n) {\n  return (React.forwardRef(comp as any) as unknown) as ComponentWithAs<\n    T,\n    Omit<P, \"children\" | \"as\">\n  >\n}\n"],"file":"forward-ref.js"}