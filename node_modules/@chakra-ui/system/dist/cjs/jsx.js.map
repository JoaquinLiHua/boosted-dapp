{"version":3,"sources":["../../src/jsx.tsx"],"names":["getCSS","props","sx","css","undefined","theme","sxStyles","cssStyles","parse","computedProps","prop","jsx","type","children","emotion","apply"],"mappings":";;;;;AAAA;;AACA;;AACA;;AAOA,SAASA,MAAT,CAAgBC,KAAhB,EAA+B;AAC7B,MAAI,CAACA,KAAK,CAACC,EAAP,IAAa,CAACD,KAAK,CAACE,GAAxB,EAA6B,OAAOC,SAAP;AAC7B;;;;AAGA,SAAO,UAACC,KAAD,EAAiB;AACtB;;;AAGA,QAAMC,QAAQ,GAAG,uBAAIL,KAAK,CAACC,EAAV,EAAcG,KAAd,CAAjB;AACA;;;;;AAIA,QAAME,SAAS,GAAG,oBAAQN,KAAK,CAACE,GAAd,EAAmBE,KAAnB,CAAlB;AACA;;;;;AAIA,WAAO,CAACE,SAAD,EAAYD,QAAZ,CAAP;AACD,GAfD;AAgBD;;AAED,SAASE,KAAT,CAAeP,KAAf,EAAwC;AACtC,MAAI,CAACA,KAAL,EAAY,OAAO,IAAP;AAEZ,MAAMQ,aAAmB,GAAG,EAA5B;;AAEA,OAAK,IAAMC,IAAX,IAAmBT,KAAnB,EAA0B;AACxB,QAAIS,IAAI,KAAK,IAAb,EAAmB;AACnBD,IAAAA,aAAa,CAACC,IAAD,CAAb,GAAsBT,KAAK,CAACS,IAAD,CAA3B;AACD;;AAED,MAAMP,GAAG,GAAGH,MAAM,CAACC,KAAD,CAAlB;AAEA,MAAIE,GAAJ,EAASM,aAAa,CAACN,GAAd,GAAoBA,GAApB;AAET,SAAOM,aAAP;AACD;;AAEM,IAAME,GAAG,GAAG,SAANA,GAAM,CACjBC,IADiB,EAEjBX,KAFiB;AAAA,oCAGdY,QAHc;AAGdA,IAAAA,QAHc;AAAA;;AAAA,SAIdC,UAAQC,KAAR,CAAcX,SAAd,GAA0BQ,IAA1B,EAAgCJ,KAAK,CAACP,KAAD,CAArC,SAAiDY,QAAjD,EAJc;AAAA,CAAZ;;;eAqBQF,G","sourcesContent":["import { Dict, runIfFn } from \"@chakra-ui/utils\"\nimport { jsx as emotion } from \"@emotion/core\"\nimport { SystemStyleObject, css } from \"@chakra-ui/styled-system\"\n\ninterface GetCSS {\n  sx?: any\n  css?: any\n}\n\nfunction getCSS(props: GetCSS) {\n  if (!props.sx && !props.css) return undefined\n  /**\n   * Leverage emotion's css function interpolation to access the theme\n   */\n  return (theme: Dict) => {\n    /**\n     * process the theme-aware cx prop\n     */\n    const sxStyles = css(props.sx)(theme)\n    /**\n     * process the normal emotion's css prop\n     * (NB: This is not theme-aware, and you can't use shorthand style props)\n     */\n    const cssStyles = runIfFn(props.css, theme)\n    /**\n     * return an array value and allow emotion do the rest.\n     * By default, emotion can handle array style values\n     */\n    return [cssStyles, sxStyles]\n  }\n}\n\nfunction parse(props: Dict | undefined) {\n  if (!props) return null\n\n  const computedProps: Dict = {}\n\n  for (const prop in props) {\n    if (prop === \"sx\") continue\n    computedProps[prop] = props[prop]\n  }\n\n  const css = getCSS(props)\n\n  if (css) computedProps.css = css\n\n  return computedProps\n}\n\nexport const jsx = (\n  type: React.ElementType,\n  props: Dict,\n  ...children: React.ReactNode[]\n) => emotion.apply(undefined, [type, parse(props), ...children])\n\ninterface SxProp {\n  sx?: SystemStyleObject\n}\n\ndeclare module \"react\" {\n  interface Attributes extends SxProp {}\n}\n\ndeclare global {\n  // eslint-disable-next-line\n  namespace JSX {\n    interface IntrinsicAttributes extends SxProp {}\n  }\n}\n\nexport default jsx\n"],"file":"jsx.js"}