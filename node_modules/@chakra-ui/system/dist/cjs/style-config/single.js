"use strict";

exports.__esModule = true;
exports.useStyleConfig = useStyleConfig;
exports["default"] = void 0;

var React = _interopRequireWildcard(require("react"));

var _utils = require("@chakra-ui/utils");

var _hooks = require("../hooks");

var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function useStyleConfig(themeKey, props) {
  var _styleConfig$defaultP;

  var styleConfigProp = props.styleConfig,
      rest = _objectWithoutPropertiesLoose(props, ["styleConfig"]);

  var _useChakra = (0, _hooks.useChakra)(),
      theme = _useChakra.theme,
      colorMode = _useChakra.colorMode;

  var themeStyleConfig = (0, _utils.get)(theme, "components." + themeKey);
  var styleConfig = styleConfigProp || themeStyleConfig;
  var propsWithDefault = (0, _utils.merge)({}, (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {}, (0, _utils.filterUndefined)(rest));

  var allProps = _extends({}, propsWithDefault, {
    theme: theme,
    colorMode: colorMode
  });

  var stylesRef = React.useRef({});
  return React.useMemo(function () {
    if (styleConfig) {
      var _styleConfig$baseStyl, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes$al, _styleConfig$sizes;

      var baseStyles = (0, _utils.runIfFn)((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {}, allProps);
      var variantStyle = (0, _utils.runIfFn)((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[allProps.variant]) != null ? _styleConfig$variants : {}, allProps);
      var sizeStyle = (0, _utils.runIfFn)((_styleConfig$sizes$al = (_styleConfig$sizes = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes[allProps.size]) != null ? _styleConfig$sizes$al : {}, allProps);
      var styles = (0, _utils.merge)({}, baseStyles, sizeStyle, variantStyle);
      var isStyleEqual = (0, _reactFastCompare["default"])(stylesRef.current, styles);

      if (!isStyleEqual) {
        stylesRef.current = styles;
      }
    }

    return stylesRef.current;
  }, [allProps, styleConfig]);
}

var _default = useStyleConfig;
exports["default"] = _default;
//# sourceMappingURL=single.js.map