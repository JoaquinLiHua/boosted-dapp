"use strict";

exports.__esModule = true;
exports.useMultiStyleConfig = useMultiStyleConfig;
exports["default"] = void 0;

var React = _interopRequireWildcard(require("react"));

var _utils = require("@chakra-ui/utils");

var _hooks = require("../hooks");

var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function useMultiStyleConfig(themeKey, props) {
  var _styleConfig$defaultP;

  var styleConfigProp = props.styleConfig,
      rest = _objectWithoutPropertiesLoose(props, ["styleConfig"]);

  var _useChakra = (0, _hooks.useChakra)(),
      theme = _useChakra.theme,
      colorMode = _useChakra.colorMode;

  var themeStyleConfig = (0, _utils.get)(theme, "components." + themeKey);
  var styleConfig = styleConfigProp || themeStyleConfig;
  var propsWithDefault = (0, _utils.merge)({}, (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {}, (0, _utils.filterUndefined)(rest));

  var allProps = _extends({}, propsWithDefault, {
    theme: theme,
    colorMode: colorMode
  });

  var partsStyleRef = React.useRef({});
  return React.useMemo(function () {
    if (styleConfig) {
      var _styleConfig$baseStyl, _styleConfig$parts, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes$al, _styleConfig$sizes;

      var baseStyles = (0, _utils.runIfFn)((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {}, allProps);
      var parts = Object.keys((_styleConfig$parts = styleConfig.parts) != null ? _styleConfig$parts : {}) || Object.keys(baseStyles);
      var variants = (0, _utils.runIfFn)((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[allProps.variant]) != null ? _styleConfig$variants : {}, allProps);
      var sizes = (0, _utils.runIfFn)((_styleConfig$sizes$al = (_styleConfig$sizes = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes[allProps.size]) != null ? _styleConfig$sizes$al : {}, allProps);
      var partsStyle = {};

      for (var _iterator = _createForOfIteratorHelperLoose(parts), _step; !(_step = _iterator()).done;) {
        var _baseStyles$part, _sizes$part, _variants$part;

        var part = _step.value;
        partsStyle[part] = (0, _utils.merge)({}, (_baseStyles$part = baseStyles == null ? void 0 : baseStyles[part]) != null ? _baseStyles$part : {}, (_sizes$part = sizes == null ? void 0 : sizes[part]) != null ? _sizes$part : {}, (_variants$part = variants == null ? void 0 : variants[part]) != null ? _variants$part : {});
      }

      var isStyleEqual = (0, _reactFastCompare["default"])(partsStyleRef.current, partsStyle);

      if (!isStyleEqual) {
        partsStyleRef.current = partsStyle;
      }
    }

    return partsStyleRef.current;
  }, [allProps, styleConfig]);
}

var _default = useMultiStyleConfig;
exports["default"] = _default;
//# sourceMappingURL=multiple.js.map