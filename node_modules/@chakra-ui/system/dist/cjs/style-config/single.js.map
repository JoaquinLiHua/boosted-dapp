{"version":3,"sources":["../../../src/style-config/single.ts"],"names":["useStyleConfig","themeKey","props","styleConfigProp","styleConfig","rest","theme","colorMode","themeStyleConfig","propsWithDefault","defaultProps","allProps","stylesRef","React","useRef","useMemo","baseStyles","baseStyle","variantStyle","variants","variant","sizeStyle","sizes","size","styles","isStyleEqual","current"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;;;AAWO,SAASA,cAAT,CAAwBC,QAAxB,EAA0CC,KAA1C,EAAuD;AAAA;;AAAA,MACvCC,eADuC,GACVD,KADU,CACpDE,WADoD;AAAA,MACnBC,IADmB,iCACVH,KADU;;AAAA,mBAG/B,uBAH+B;AAAA,MAGpDI,KAHoD,cAGpDA,KAHoD;AAAA,MAG7CC,SAH6C,cAG7CA,SAH6C;;AAK5D,MAAMC,gBAAgB,GAAG,gBAAIF,KAAJ,kBAAyBL,QAAzB,CAAzB;AACA,MAAMG,WAAW,GAAID,eAAe,IAAIK,gBAAxC;AAEA,MAAMC,gBAAgB,GAAG,kBACvB,EADuB,2BAEvBL,WAFuB,oBAEvBA,WAAW,CAAEM,YAFU,oCAEM,EAFN,EAGvB,4BAAgBL,IAAhB,CAHuB,CAAzB;;AAMA,MAAMM,QAAQ,gBACTF,gBADS;AAEZH,IAAAA,KAAK,EAALA,KAFY;AAGZC,IAAAA,SAAS,EAATA;AAHY,IAAd;;AAMA,MAAMK,SAAS,GAAGC,KAAK,CAACC,MAAN,CAAgC,EAAhC,CAAlB;AAEA,SAAOD,KAAK,CAACE,OAAN,CAAc,YAAM;AACzB,QAAIX,WAAJ,EAAiB;AAAA;;AACf,UAAMY,UAAU,GAAG,6CAAQZ,WAAW,CAACa,SAApB,oCAAiC,EAAjC,EAAqCN,QAArC,CAAnB;AAEA,UAAMO,YAAY,GAAG,uEACnBd,WAAW,CAACe,QADO,qBACnB,uBAAuBR,QAAQ,CAACS,OAAhC,CADmB,oCACyB,EADzB,EAEnBT,QAFmB,CAArB;AAKA,UAAMU,SAAS,GAAG,mEAChBjB,WAAW,CAACkB,KADI,qBAChB,mBAAoBX,QAAQ,CAACY,IAA7B,CADgB,oCACsB,EADtB,EAEhBZ,QAFgB,CAAlB;AAKA,UAAMa,MAAyB,GAAG,kBAChC,EADgC,EAEhCR,UAFgC,EAGhCK,SAHgC,EAIhCH,YAJgC,CAAlC;AAOA,UAAMO,YAAY,GAAG,kCAAQb,SAAS,CAACc,OAAlB,EAA2BF,MAA3B,CAArB;;AAEA,UAAI,CAACC,YAAL,EAAmB;AACjBb,QAAAA,SAAS,CAACc,OAAV,GAAoBF,MAApB;AACD;AACF;;AAED,WAAOZ,SAAS,CAACc,OAAjB;AACD,GA7BM,EA6BJ,CAACf,QAAD,EAAWP,WAAX,CA7BI,CAAP;AA8BD;;eAEcJ,c","sourcesContent":["import * as React from \"react\"\nimport { Dict, get, runIfFn, merge, filterUndefined } from \"@chakra-ui/utils\"\nimport { useChakra } from \"../hooks\"\nimport { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport isEqual from \"react-fast-compare\"\n\ninterface SingleStyleConfig {\n  defaultProps?: Dict\n  baseStyle?: Dict\n  variants?: Dict\n  sizes?: Dict\n}\n\ntype StyleConfig = SingleStyleConfig | undefined\n\nexport function useStyleConfig(themeKey: string, props: Dict) {\n  const { styleConfig: styleConfigProp, ...rest } = props\n\n  const { theme, colorMode } = useChakra()\n\n  const themeStyleConfig = get(theme, `components.${themeKey}`)\n  const styleConfig = (styleConfigProp || themeStyleConfig) as StyleConfig\n\n  const propsWithDefault = merge(\n    {},\n    styleConfig?.defaultProps ?? {},\n    filterUndefined(rest),\n  )\n\n  const allProps = {\n    ...propsWithDefault,\n    theme,\n    colorMode,\n  } as Dict\n\n  const stylesRef = React.useRef<SystemStyleObject>({})\n\n  return React.useMemo(() => {\n    if (styleConfig) {\n      const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, allProps)\n\n      const variantStyle = runIfFn(\n        styleConfig.variants?.[allProps.variant] ?? {},\n        allProps,\n      )\n\n      const sizeStyle = runIfFn(\n        styleConfig.sizes?.[allProps.size] ?? {},\n        allProps,\n      )\n\n      const styles: SystemStyleObject = merge(\n        {},\n        baseStyles,\n        sizeStyle,\n        variantStyle,\n      )\n\n      const isStyleEqual = isEqual(stylesRef.current, styles)\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles\n      }\n    }\n\n    return stylesRef.current\n  }, [allProps, styleConfig])\n}\n\nexport default useStyleConfig\n"],"file":"single.js"}