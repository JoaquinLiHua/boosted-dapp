{"version":3,"sources":["../../src/system.ts"],"names":["sxProp","props","sx","theme","cssProp","css","__css","result","key","exists","base","baseStyle","styled","component","options","styledOptions","shouldForwardProp","extraProps","truncateProp","systemProps","pseudoProps","chakra","domElements","forEach","tag"],"mappings":";;;;;;AAAA;;AACA;;AAEA;;AAQA;;;;;;;;AASA,IAAMA,MAAM,GAAG,kBAAK,UAACC,KAAD;AAAA,SAAgB,uBAAIA,KAAK,CAACC,EAAV,EAAcD,KAAK,CAACE,KAApB,CAAhB;AAAA,CAAL,CAAf;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACH,KAAD;AAAA,SAAgBA,KAAK,CAACI,GAAtB;AAAA,CAAhB;;AAEA,IAAMC,KAAK,GAAG,kBAAK,UAACL,KAAD,EAAiB;AAClC,MAAMM,MAAM,GAAG,EAAf;;AACA,OAAK,IAAMC,GAAX,IAAkBP,KAAK,CAACK,KAAxB,EAA+B;AAC7B,QAAMG,MAAM,IAAGD,GAAG,IAAIP,KAAV,CAAZ;;AACA,QAAI,CAACQ,MAAD,IAAWR,KAAK,CAACO,GAAD,CAAL,IAAc,IAA7B,EAAmC;AACjCD,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcP,KAAK,CAACK,KAAN,CAAYE,GAAZ,CAAd;AACD;AACF;;AACD,SAAO,uBAAID,MAAJ,EAAYN,KAAK,CAACE,KAAlB,CAAP;AACD,CATa,CAAd;;AAWA,IAAMO,IAAI,GAAG,kBAAK,UAACC,SAAD;AAAA,SAAoB,UAACV,KAAD;AAAA,WACpC,uBAAIU,SAAJ,EAAeV,KAAK,CAACE,KAArB,CADoC;AAAA,GAApB;AAAA,CAAL,CAAb;;AAIO,SAASS,MAAT,CAAsCC,SAAtC,EAAoDC,OAApD,EAAuE;AAAA,aACpCA,OAAO,IAAI,EADyB;AAAA,MACpEH,SADoE,QACpEA,SADoE;AAAA,MACtDI,aADsD;;AAE5E,SAAO,wBAAaF,SAAb,eACFE,aADE;AAELC,IAAAA,iBAAiB,EAAjBA;AAFK,MAILV,KAJK,EAKLI,IAAI,CAACC,SAAD,CALC,EAML,kBAAKM,kBAAL,CANK,EAOL,kBAAKC,oBAAL,CAPK,EAQL,kBAAKC,yBAAL,CARK,EASL,kBAAKC,mBAAL,CATK,EAULpB,MAVK,EAWL,kBAAKI,OAAL,CAXK,CAAP;AAaD;;AAUM,IAAMiB,MAAM,GAAIT,MAAhB;;;AAGPU,oBAAYC,OAAZ,CAAoB,UAACC,GAAD,EAAS;AAC3B;AACAH,EAAAA,MAAM,CAACG,GAAD,CAAN,GAAcH,MAAM,CAACG,GAAD,CAApB;AACD,CAHD","sourcesContent":["import { systemProps, css } from \"@chakra-ui/styled-system\"\nimport createStyled from \"@emotion/styled\"\nimport { As, ChakraComponent } from \"./system.types\"\nimport {\n  pseudoProps,\n  truncateProp,\n  extraProps,\n  domElements,\n  DOMElements,\n  cast,\n} from \"./system.utils\"\nimport { shouldForwardProp } from \"./should-forward-prop\"\nimport { Dict } from \"@chakra-ui/utils\"\n\ninterface Options {\n  shouldForwardProp?(prop: string): boolean\n  label?: string\n  baseStyle?: any\n}\n\nconst sxProp = cast((props: any) => css(props.sx)(props.theme))\nconst cssProp = (props: any) => props.css\n\nconst __css = cast((props: Dict) => {\n  const result = {} as Dict\n  for (const key in props.__css) {\n    const exists = key in props\n    if (!exists || props[key] == null) {\n      result[key] = props.__css[key]\n    }\n  }\n  return css(result)(props.theme)\n})\n\nconst base = cast((baseStyle: any) => (props: any) =>\n  css(baseStyle)(props.theme),\n)\n\nexport function styled<T extends As, P = {}>(component: T, options?: Options) {\n  const { baseStyle, ...styledOptions } = options || {}\n  return createStyled(component as any, {\n    ...styledOptions,\n    shouldForwardProp,\n  })(\n    __css,\n    base(baseStyle),\n    cast(extraProps),\n    cast(truncateProp),\n    cast(systemProps),\n    cast(pseudoProps),\n    sxProp,\n    cast(cssProp),\n  ) as ChakraComponent<T, P>\n}\n\ntype ChakraJSXElements = {\n  [Tag in DOMElements]: ChakraComponent<Tag, {}>\n}\n\ntype CreateChakraComponent = {\n  <T extends As, P = {}>(component: T, options?: Options): ChakraComponent<T, P>\n}\n\nexport const chakra = (styled as unknown) as CreateChakraComponent &\n  ChakraJSXElements\n\ndomElements.forEach((tag) => {\n  //@ts-ignore\n  chakra[tag] = chakra(tag)\n})\n"],"file":"system.js"}