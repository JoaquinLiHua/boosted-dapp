{"version":3,"sources":["../../src/use-tabs.ts"],"names":["useClickable","useDescendant","useDescendants","useControllableState","useId","useSafeLayoutEffect","callAllHandlers","createOnKeyDown","getValidChildren","isUndefined","mergeRefs","createContext","cloneElement","useState","useRef","useEffect","useTabs","props","defaultIndex","onChange","index","isManual","orientation","htmlProps","focusedIndex","setFocusedIndex","selectedIndex","setSelectedIndex","defaultValue","value","shouldUpdate","prevIndex","nextIndex","propsMap","enabledDomContext","domContext","id","TabsProvider","useTabsContext","name","errorMessage","useTabList","count","descendants","length","setIndex","tab","element","focus","nextTab","prevTab","firstTab","lastTab","isHorizontal","isVertical","onKeyDown","keyMap","ArrowRight","ArrowLeft","ArrowDown","ArrowUp","Home","End","role","useTab","isDisabled","isFocusable","ref","enabledIndex","disabled","Boolean","focusable","context","current","isSelected","onClick","onFocus","isDisabledButFocusable","shouldSelect","clickable","type","makeTabId","tabIndex","undefined","makeTabPanelId","useTabPanels","validChildren","children","map","child","useTabPanel","hidden","useTabIndicator","rect","setRect","left","width","top","height","hasMeasured","setHasMeasured","tabRect","getBoundingClientRect","frameId","requestAnimationFrame","cancelAnimationFrame","position","transition"],"mappings":"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","sourcesContent":["import { useClickable, UseClickableProps } from \"@chakra-ui/clickable\"\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useId,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  callAllHandlers,\n  createOnKeyDown,\n  Dict,\n  getValidChildren,\n  isUndefined,\n  mergeRefs,\n  createContext,\n} from \"@chakra-ui/utils\"\nimport {\n  cloneElement,\n  useState,\n  useRef,\n  useEffect,\n  ReactNode,\n  ReactElement,\n  KeyboardEventHandler,\n  FocusEventHandler,\n  ButtonHTMLAttributes,\n  Ref,\n  CSSProperties,\n} from \"react\"\n\nexport interface UseTabsProps {\n  /**\n   * The orientation of the tab list.\n   */\n  orientation?: \"vertical\" | \"horizontal\"\n  /**\n   * If `true`, the tabs will be manually activated and\n   * display its panel by pressing Space or Enter.\n   *\n   * If `false`, the tabs will be automatically activated\n   * and their panel is displayed when they receive focus.\n   */\n  isManual?: boolean\n  /**\n   * Callback when the index (controlled or un-controlled) changes.\n   */\n  onChange?: (index: number) => void\n  /**\n   * The index of the selected tab (in controlled mode)\n   */\n  index?: number\n  /**\n   * The initial index of the selected tab (in uncontrolled mode)\n   */\n  defaultIndex?: number\n  /**\n   * The id of the tab\n   */\n  id?: string\n}\n\n/**\n * Tabs hooks that provides all the states, and accessibility\n * helpers to keep all things working properly.\n *\n * It's returned object will be passed unto a Context Provider\n * so all child components can read from it.\n *\n * @see Docs https://chakra-ui.com/components/useTabs\n */\nexport function useTabs(props: UseTabsProps) {\n  const {\n    defaultIndex,\n    onChange,\n    index,\n    isManual,\n    orientation = \"horizontal\",\n    ...htmlProps\n  } = props\n\n  /**\n   * We use this to keep track of the index of the focused tab.\n   *\n   * Tabs can be automatically activated, this means selection follows focus.\n   * When we navigate with the arrow keys, we move focus and selection to next/prev tab\n   *\n   * Tabs can also be manually activated, this means selection does not follow focus.\n   * When we navigate with the arrow keys, we only move focus NOT selection. The user\n   * will need not manually activate the tab using `Enter` or `Space`.\n   *\n   * This is why we need to keep track of the `focusedIndex` and `selectedIndex`\n   */\n  const [focusedIndex, setFocusedIndex] = useState(defaultIndex ?? 0)\n\n  const [selectedIndex, setSelectedIndex] = useControllableState({\n    defaultValue: defaultIndex ?? 0,\n    value: index,\n    onChange,\n    shouldUpdate: (prevIndex, nextIndex) => prevIndex !== nextIndex,\n    propsMap: {\n      value: \"index\",\n      defaultValue: \"defaultIndex\",\n    },\n  })\n\n  /**\n   * Sync focused `index` with controlled `selectedIndex` (which is the `props.index`)\n   */\n  useEffect(() => {\n    if (!isUndefined(index)) {\n      setFocusedIndex(index)\n    }\n  }, [index])\n\n  /**\n   * Think of `useDescendants` as a register for the tab nodes.\n   *\n   * This manager is used to store only the tab nodes that are not disabled, and focusable.\n   * If we have the following code\n   *\n   * ```jsx\n   * <Tab>Tab 1</Tab>\n   * <Tab isDisabled>Tab 2</Tab>\n   * <Tab>Tab 3</Tab>\n   * ```\n   *\n   * The manager will only hold references to \"Tab 1\" and \"Tab 3\", since `Tab 2` is disabled\n   */\n  const enabledDomContext = useDescendants()\n\n  /**\n   * This manager is used to store all tab nodes whether disabled or not.\n   * If we have the following code\n   *\n   * ```jsx\n   * <Tab>Tab 1</Tab>\n   * <Tab isDisabled>Tab 2</Tab>\n   * <Tab>Tab 3</Tab>\n   * ```\n   *\n   * The manager will only hold references to \"Tab 1\", \"Tab 2\" \"Tab 3\".\n   *\n   * We need this for correct indexing of tabs in event a tab is disabled\n   */\n  const domContext = useDescendants()\n\n  /**\n   * generate a unique id or use user-provided id for\n   * the tabs widget\n   */\n  const id = useId(props.id, `tabs`)\n\n  return {\n    id,\n    selectedIndex,\n    focusedIndex,\n    setSelectedIndex,\n    setFocusedIndex,\n    isManual,\n    orientation,\n    enabledDomContext,\n    domContext,\n    htmlProps,\n  }\n}\n\nexport type UseTabsReturn = Omit<ReturnType<typeof useTabs>, \"htmlProps\">\n\nconst [TabsProvider, useTabsContext] = createContext<UseTabsReturn>({\n  name: \"TabsContext\",\n  errorMessage:\n    \"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />\",\n})\n\nexport { TabsProvider }\n\ntype Child = ReactElement<any>\n\nexport interface UseTabListProps {\n  children?: ReactNode\n  onKeyDown?: KeyboardEventHandler\n  ref?: Ref<any>\n}\n\n/**\n * Tabs hook to manage multiple tab buttons,\n * and ensures only one tab is selected per time.\n *\n * @param props props object for the tablist\n */\nexport function useTabList<P extends UseTabListProps>(props: P) {\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    orientation,\n    enabledDomContext,\n  } = useTabsContext()\n\n  const count = enabledDomContext.descendants.length\n\n  /**\n   * Function to update the selected tab index\n   */\n  const setIndex = (index: number) => {\n    const tab = enabledDomContext.descendants[index]\n    if (tab?.element) {\n      tab.element.focus()\n      setFocusedIndex(index)\n    }\n  }\n\n  // Helper functions for keyboard navigation\n  const nextTab = () => {\n    const nextIndex = (focusedIndex + 1) % count\n    setIndex(nextIndex)\n  }\n\n  const prevTab = () => {\n    const prevIndex = (focusedIndex - 1 + count) % count\n    setIndex(prevIndex)\n  }\n\n  const firstTab = () => setIndex(0)\n\n  const lastTab = () => setIndex(count - 1)\n\n  const isHorizontal = orientation === \"horizontal\"\n  const isVertical = orientation === \"vertical\"\n\n  const onKeyDown = createOnKeyDown({\n    keyMap: {\n      ArrowRight: () => isHorizontal && nextTab(),\n      ArrowLeft: () => isHorizontal && prevTab(),\n      ArrowDown: () => isVertical && nextTab(),\n      ArrowUp: () => isVertical && prevTab(),\n      Home: () => firstTab(),\n      End: () => lastTab(),\n    },\n  })\n\n  return {\n    ...props,\n    role: \"tablist\",\n    \"aria-orientation\": orientation,\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nexport type UseTabListReturn = ReturnType<typeof useTabList>\n\nexport interface UseTabOptions {\n  id?: string\n  isSelected?: boolean\n  panelId?: string\n}\n\nexport interface UseTabProps\n  extends Omit<UseClickableProps, \"color\">,\n    UseTabOptions {}\n\n/**\n * Tabs hook to manage each tab button.\n *\n * A tab can be disabled and focusable, or both,\n * hence the use of `useClickable` to handle this scenario\n */\nexport function useTab<P extends UseTabProps>(\n  props: P,\n): ButtonHTMLAttributes<any> {\n  const { isDisabled, isFocusable, ...htmlProps } = props\n\n  const {\n    setSelectedIndex,\n    isManual,\n    id,\n    setFocusedIndex,\n    enabledDomContext,\n    domContext,\n    selectedIndex,\n  } = useTabsContext()\n\n  const ref = useRef<HTMLElement>(null)\n\n  /**\n   * Think of `useDescendant` as the function that registers tab node\n   * to the `enabledDomContext`, and returns it's index.\n   *\n   * Tab is registered if it's enabled or focusable\n   */\n  const enabledIndex = useDescendant({\n    disabled: Boolean(isDisabled),\n    focusable: Boolean(isFocusable),\n    context: enabledDomContext,\n    element: ref.current,\n  })\n\n  /**\n   * Registers all tabs (whether disabled or not)\n   */\n  const index = useDescendant({\n    context: domContext,\n    element: ref.current,\n  })\n\n  const isSelected = index === selectedIndex\n\n  const onClick = () => {\n    setFocusedIndex(enabledIndex)\n    setSelectedIndex(index)\n  }\n\n  const onFocus = () => {\n    const isDisabledButFocusable = isDisabled && isFocusable\n    const shouldSelect = !isManual && !isDisabledButFocusable\n\n    if (shouldSelect) {\n      setSelectedIndex(index)\n    }\n  }\n\n  const clickable = useClickable({\n    ...htmlProps,\n    ref: mergeRefs(ref, props.ref),\n    isDisabled,\n    isFocusable,\n    onClick: callAllHandlers(props.onClick, onClick),\n  })\n\n  const type: \"button\" | \"submit\" | \"reset\" = \"button\"\n\n  return {\n    ...clickable,\n    id: makeTabId(id, index),\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    type,\n    \"aria-selected\": isSelected ? true : undefined,\n    \"aria-controls\": makeTabPanelId(id, index),\n    onFocus: callAllHandlers(props.onFocus, onFocus),\n  }\n}\n\nexport interface UseTabPanelsProps {\n  children?: ReactNode\n}\n\n/**\n * Tabs hook for managing the visibility of multiple tab panels.\n *\n * Since only one panel can be show at a time, we use `cloneElement`\n * to inject `selected` panel to each TabPanel.\n *\n * It returns a cloned version of it's children with\n * all functionality included.\n */\nexport function useTabPanels<P extends UseTabPanelsProps>(props: P) {\n  const context = useTabsContext()\n\n  const { id, selectedIndex } = context\n\n  const validChildren = getValidChildren(props.children)\n\n  const children = validChildren.map((child, index) =>\n    cloneElement(child as Child, {\n      isSelected: index === selectedIndex,\n      id: makeTabPanelId(id, index),\n    }),\n  )\n\n  return { ...props, children }\n}\n\n/**\n * Tabs hook for managing the visible/hidden states\n * of the tab panel.\n *\n * @param props props object for the tab panel\n */\nexport function useTabPanel(props: Dict) {\n  const { isSelected, id, ...htmlProps } = props\n  return {\n    ...htmlProps,\n    role: \"tabpanel\",\n    hidden: !isSelected,\n    id,\n  }\n}\n\n/**\n * Tabs hook to show an animated indicators that\n * follows the active tab.\n *\n * The way we do it is by measuring the DOM Rect (or dimensions)\n * of the active tab, and return that as CSS style for\n * the indicator.\n */\nexport function useTabIndicator(): CSSProperties {\n  const context = useTabsContext()\n\n  const { selectedIndex, orientation, domContext } = context\n\n  const isHorizontal = orientation === \"horizontal\"\n  const isVertical = orientation === \"vertical\"\n\n  // Get the clientRect of the selected tab\n  const [rect, setRect] = useState(() => {\n    if (isHorizontal) return { left: 0, width: 0 }\n    if (isVertical) return { top: 0, height: 0 }\n  })\n\n  const [hasMeasured, setHasMeasured] = useState(false)\n\n  // Update the selected tab rect when the selectedIndex changes\n  useSafeLayoutEffect(() => {\n    if (isUndefined(selectedIndex)) return\n\n    const tab = domContext.descendants[selectedIndex]\n    const tabRect = tab?.element?.getBoundingClientRect()\n\n    // Horizontal Tab: Calculate width and left distance\n    if (isHorizontal && tabRect) {\n      const { left, width } = tabRect\n      setRect({ left, width })\n    }\n\n    // Vertical Tab: Calculate height and top distance\n    if (isVertical && tabRect) {\n      const { top, height } = tabRect\n      setRect({ top, height })\n    }\n\n    // Prevent unwanted transition from 0 to measured rect\n    // by setting the measured state in the next tick\n    const frameId = requestAnimationFrame(() => {\n      setHasMeasured(true)\n    })\n\n    return () => {\n      cancelAnimationFrame(frameId)\n    }\n  }, [selectedIndex, isHorizontal, isVertical, domContext.descendants])\n\n  return {\n    position: \"absolute\",\n    transition: hasMeasured ? \"all 200ms cubic-bezier(0, 0, 0.2, 1)\" : \"none\",\n    ...rect,\n  }\n}\n\nfunction makeTabId(id: string, index: number) {\n  return `${id}--tab-${index}`\n}\n\nfunction makeTabPanelId(id: string, index: number) {\n  return `${id}--tabpanel-${index}`\n}\n"],"file":"use-tabs.js"}