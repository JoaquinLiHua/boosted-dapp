{"version":3,"sources":["../../src/tabs.tsx"],"names":["chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","cx","__DEV__","React","useMemo","TabsProvider","useTab","useTabIndicator","useTabList","useTabPanel","useTabPanels","useTabs","Tabs","props","ref","styles","children","className","otherProps","htmlProps","ctx","context","displayName","Tab","tabProps","tabStyles","outline","display","alignItems","justifyContent","tab","TabList","tablistProps","tablistStyles","tablist","TabPanel","panelProps","tabpanel","TabPanels","panelsProps","TabIndicator","indicatorStyle","style","indicator"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  PropsOf,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport React, { ReactNode, useMemo } from \"react\"\nimport {\n  TabsProvider,\n  useTab,\n  useTabIndicator,\n  useTabList,\n  UseTabListProps,\n  UseTabOptions,\n  useTabPanel,\n  useTabPanels,\n  useTabs,\n  UseTabsProps,\n} from \"./use-tabs\"\n\ninterface TabsOptions {\n  /**\n   * If `true`, tabs will stretch to width of the tablist.\n   */\n  isFitted?: boolean\n  /**\n   * The alignment of the tabs\n   */\n  align?: \"start\" | \"end\" | \"center\"\n}\n\nexport interface TabsProps\n  extends UseTabsProps,\n    ThemingProps,\n    Omit<PropsOf<typeof chakra.div>, \"onChange\">,\n    TabsOptions {\n  children: ReactNode\n}\n\n/**\n * Tabs\n *\n * Provides context and logic for all tabs components. It doesn't render\n * any DOM node.\n */\nexport const Tabs = forwardRef<TabsProps, \"div\">(function Tabs(props, ref) {\n  const styles = useMultiStyleConfig(\"Tabs\", props)\n  const { children, className, ...otherProps } = omitThemingProps(props)\n\n  const { htmlProps, ...ctx } = useTabs(otherProps)\n  const context = useMemo(() => ctx, [ctx])\n\n  return (\n    <TabsProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          className={cx(\"chakra-tabs\", className)}\n          ref={ref}\n          {...htmlProps}\n        >\n          {children}\n        </chakra.div>\n      </StylesProvider>\n    </TabsProvider>\n  )\n})\n\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\"\n}\n\nexport interface TabProps\n  extends UseTabOptions,\n    PropsOf<typeof chakra.button> {}\n\n/**\n * Tab button used to activate a specific tab panel. It renders a `button`,\n * and is responsible for automatic and manual selection modes.\n */\nexport const Tab = forwardRef<TabProps, \"button\">(function Tab(props, ref) {\n  const styles = useStyles()\n  const tabProps = useTab({ ...props, ref })\n\n  const tabStyles = {\n    outline: \"0\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    ...styles.tab,\n  }\n\n  return (\n    <chakra.button\n      {...tabProps}\n      className={cx(\"chakra-tabs__tab\", props.className)}\n      __css={tabStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Tab.displayName = \"Tab\"\n}\n\nexport interface TabListProps\n  extends UseTabListProps,\n    Omit<PropsOf<typeof chakra.div>, \"onKeyDown\" | \"ref\"> {}\n\n/**\n * TabList is used to manage a list of tab buttons. It renders a `div` by default,\n * and is responsible the keyboard interaction between tabs.\n */\nexport const TabList = forwardRef<TabListProps, \"div\">(function TabList(\n  props,\n  ref,\n) {\n  const tablistProps = useTabList({ ...props, ref })\n\n  const styles = useStyles()\n  const tablistStyles = {\n    display: \"flex\",\n    ...styles.tablist,\n  }\n\n  return (\n    <chakra.div\n      {...tablistProps}\n      className={cx(\"chakra-tabs__tablist\", props.className)}\n      __css={tablistStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabList.displayName = \"TabList\"\n}\n\nexport interface TabPanelProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * TabPanel\n * Used to render the content for a specific tab.\n */\nexport const TabPanel = forwardRef<TabPanelProps, \"div\">(function TabPanel(\n  props,\n  ref,\n) {\n  const panelProps = useTabPanel({ ...props, ref })\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      {...panelProps}\n      className={cx(\"chakra-tabs__tab-panel\", props.className)}\n      __css={styles.tabpanel}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\"\n}\n\nexport interface TabPanelsProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * TabPanel\n *\n * Used to manage the rendering of multiple tab panels. It uses\n * `cloneElement` to hide/show tab panels.\n *\n * It renders a `div` by default.\n */\nexport const TabPanels = forwardRef<TabPanelsProps, \"div\">(function TabPanels(\n  props,\n  ref,\n) {\n  const panelsProps = useTabPanels(props)\n  return (\n    <chakra.div\n      {...panelsProps}\n      ref={ref}\n      className={cx(\"chakra-tabs__tab-panels\", props.className)}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\"\n}\n\nexport interface TabIndicatorProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * TabIndicator\n *\n * Used to render an active tab indicator that animates between\n * selected tabs.\n */\nexport const TabIndicator = forwardRef<TabIndicatorProps, \"div\">(\n  function TabIndicator(props, ref) {\n    const indicatorStyle = useTabIndicator()\n    const style = {\n      ...props.style,\n      ...indicatorStyle,\n    }\n\n    const styles = useStyles()\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-tabs__tab-indicator\", props.className)}\n        style={style}\n        __css={styles.indicator}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  TabIndicator.displayName = \"TabIndicator\"\n}\n"],"file":"tabs.js"}