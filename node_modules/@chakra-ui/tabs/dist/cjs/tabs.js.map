{"version":3,"sources":["../../src/tabs.tsx"],"names":["Tabs","props","ref","styles","children","className","otherProps","htmlProps","ctx","context","__DEV__","displayName","Tab","tabProps","tabStyles","outline","display","alignItems","justifyContent","tab","TabList","tablistProps","tablistStyles","tablist","TabPanel","panelProps","tabpanel","TabPanels","panelsProps","TabIndicator","indicatorStyle","style","indicator"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  PropsOf,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport React, { ReactNode, useMemo } from \"react\"\nimport {\n  TabsProvider,\n  useTab,\n  useTabIndicator,\n  useTabList,\n  UseTabListProps,\n  UseTabOptions,\n  useTabPanel,\n  useTabPanels,\n  useTabs,\n  UseTabsProps,\n} from \"./use-tabs\"\n\ninterface TabsOptions {\n  /**\n   * If `true`, tabs will stretch to width of the tablist.\n   */\n  isFitted?: boolean\n  /**\n   * The alignment of the tabs\n   */\n  align?: \"start\" | \"end\" | \"center\"\n}\n\nexport interface TabsProps\n  extends UseTabsProps,\n    ThemingProps,\n    Omit<PropsOf<typeof chakra.div>, \"onChange\">,\n    TabsOptions {\n  children: ReactNode\n}\n\n/**\n * Tabs\n *\n * Provides context and logic for all tabs components. It doesn't render\n * any DOM node.\n */\nexport const Tabs = forwardRef<TabsProps, \"div\">(function Tabs(props, ref) {\n  const styles = useMultiStyleConfig(\"Tabs\", props)\n  const { children, className, ...otherProps } = omitThemingProps(props)\n\n  const { htmlProps, ...ctx } = useTabs(otherProps)\n  const context = useMemo(() => ctx, [ctx])\n\n  return (\n    <TabsProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          className={cx(\"chakra-tabs\", className)}\n          ref={ref}\n          {...htmlProps}\n        >\n          {children}\n        </chakra.div>\n      </StylesProvider>\n    </TabsProvider>\n  )\n})\n\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\"\n}\n\nexport interface TabProps\n  extends UseTabOptions,\n    PropsOf<typeof chakra.button> {}\n\n/**\n * Tab button used to activate a specific tab panel. It renders a `button`,\n * and is responsible for automatic and manual selection modes.\n */\nexport const Tab = forwardRef<TabProps, \"button\">(function Tab(props, ref) {\n  const styles = useStyles()\n  const tabProps = useTab({ ...props, ref })\n\n  const tabStyles = {\n    outline: \"0\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    ...styles.tab,\n  }\n\n  return (\n    <chakra.button\n      {...tabProps}\n      className={cx(\"chakra-tabs__tab\", props.className)}\n      __css={tabStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Tab.displayName = \"Tab\"\n}\n\nexport interface TabListProps\n  extends UseTabListProps,\n    Omit<PropsOf<typeof chakra.div>, \"onKeyDown\" | \"ref\"> {}\n\n/**\n * TabList is used to manage a list of tab buttons. It renders a `div` by default,\n * and is responsible the keyboard interaction between tabs.\n */\nexport const TabList = forwardRef<TabListProps, \"div\">(function TabList(\n  props,\n  ref,\n) {\n  const tablistProps = useTabList({ ...props, ref })\n\n  const styles = useStyles()\n  const tablistStyles = {\n    display: \"flex\",\n    ...styles.tablist,\n  }\n\n  return (\n    <chakra.div\n      {...tablistProps}\n      className={cx(\"chakra-tabs__tablist\", props.className)}\n      __css={tablistStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabList.displayName = \"TabList\"\n}\n\nexport interface TabPanelProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * TabPanel\n * Used to render the content for a specific tab.\n */\nexport const TabPanel = forwardRef<TabPanelProps, \"div\">(function TabPanel(\n  props,\n  ref,\n) {\n  const panelProps = useTabPanel({ ...props, ref })\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      {...panelProps}\n      className={cx(\"chakra-tabs__tab-panel\", props.className)}\n      __css={styles.tabpanel}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\"\n}\n\nexport interface TabPanelsProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * TabPanel\n *\n * Used to manage the rendering of multiple tab panels. It uses\n * `cloneElement` to hide/show tab panels.\n *\n * It renders a `div` by default.\n */\nexport const TabPanels = forwardRef<TabPanelsProps, \"div\">(function TabPanels(\n  props,\n  ref,\n) {\n  const panelsProps = useTabPanels(props)\n  return (\n    <chakra.div\n      {...panelsProps}\n      ref={ref}\n      className={cx(\"chakra-tabs__tab-panels\", props.className)}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\"\n}\n\nexport interface TabIndicatorProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * TabIndicator\n *\n * Used to render an active tab indicator that animates between\n * selected tabs.\n */\nexport const TabIndicator = forwardRef<TabIndicatorProps, \"div\">(\n  function TabIndicator(props, ref) {\n    const indicatorStyle = useTabIndicator()\n    const style = {\n      ...props.style,\n      ...indicatorStyle,\n    }\n\n    const styles = useStyles()\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-tabs__tab-indicator\", props.className)}\n        style={style}\n        __css={styles.indicator}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  TabIndicator.displayName = \"TabIndicator\"\n}\n"],"file":"tabs.js"}