{"version":3,"sources":["../../src/progress.tsx"],"names":["ProgressLabel","props","styles","labelStyles","top","left","width","textAlign","position","transform","label","__DEV__","displayName","ProgressFilledTrack","min","max","value","rest","progress","trackStyles","height","filledTrack","percent","undefined","style","bind","Progress","hasStripe","isAnimated","children","borderRadius","isIndeterminate","stripAnimation","animation","stripe","shouldAddStripe","shouldAnimateStripe","css","willChange","minWidth","overflow","track"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  omitThemingProps,\n  PropsOf,\n  ThemingProps,\n  useMultiStyleConfig,\n  StylesProvider,\n  useStyles,\n  ObjectInterpolation,\n} from \"@chakra-ui/system\"\nimport { isUndefined, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  getProgressProps,\n  GetProgressPropsOptions,\n  progress,\n  stripe,\n} from \"./progress.utils\"\n\nexport interface ProgressLabelProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * ProgressLabel is used to show the numeric value of the progress.\n * @see Docs https://chakra-ui.com/components/progress\n */\nexport const ProgressLabel: React.FC<ProgressLabelProps> = (props) => {\n  const styles = useStyles()\n  const labelStyles = {\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\",\n    ...styles.label,\n  }\n  return <chakra.div {...props} __css={labelStyles} />\n}\n\nif (__DEV__) {\n  ProgressLabel.displayName = \"ProgressLabel\"\n}\n\nexport interface ProgressFilledTrackProps\n  extends PropsOf<typeof chakra.div>,\n    GetProgressPropsOptions {}\n\n/**\n * ProgressFilledTrack (Linear)\n *\n * The progress component that visually indicates the current level of the progress bar.\n * It applies `background-color` and changes it's width.\n *\n * @see Docs https://chakra-ui.com/components/progress\n */\nconst ProgressFilledTrack: React.FC<ProgressFilledTrackProps> = (props) => {\n  const { min, max, value, ...rest } = props\n  const progress = getProgressProps({ value, min, max })\n\n  const styles = useStyles()\n  const trackStyles = {\n    height: \"100%\",\n    ...styles.filledTrack,\n  }\n\n  return (\n    <chakra.div\n      style={{\n        width: progress.percent != null ? `${progress.percent}%` : undefined,\n        ...rest.style,\n      }}\n      {...progress.bind}\n      {...rest}\n      __css={trackStyles}\n    />\n  )\n}\n\nexport interface ProgressTrackProps extends PropsOf<typeof chakra.div> {}\n\ninterface ProgressOptions {\n  /**\n   * The `value` of the progress indicator.\n   * If `undefined` the progress bar will be in `indeterminate` state\n   */\n  value?: number\n  /**\n   * The minimum value of the progress\n   */\n  min?: number\n  /**\n   * The maximum value of the progress\n   */\n  max?: number\n  /**\n   * If `true`, the progress bar will show stripe\n   */\n  hasStripe?: boolean\n  /**\n   * If `true`, and hasStripe is `true`, the stripes will be animated\n   */\n  isAnimated?: boolean\n}\n\nexport interface ProgressProps\n  extends ProgressOptions,\n    ThemingProps,\n    PropsOf<typeof chakra.div> {}\n\n/**\n * Progress (Linear)\n *\n * Progress is used to display the progress status for a task that takes a long\n * time or consists of several steps.\n *\n * It includes accessible attributes to help assistive technologies understand\n * and speak the progress values.\n *\n * @see Docs https://chakra-ui.com/components/progress\n */\nexport const Progress: React.FC<ProgressProps> = (props) => {\n  const {\n    value,\n    min = 0,\n    max = 100,\n    hasStripe,\n    isAnimated,\n    children,\n    borderRadius,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Progress\", {\n    ...props,\n    isIndeterminate: isUndefined(value),\n  })\n\n  const isIndeterminate = isUndefined(value)\n\n  const stripAnimation = { animation: `${stripe} 1s linear infinite` }\n\n  /**\n   * We should not use stripe if it's `indeterminate`\n   */\n  const shouldAddStripe = !isIndeterminate && hasStripe\n\n  const shouldAnimateStripe = shouldAddStripe && isAnimated\n\n  /**\n   * Generate styles for stripe and stripe animation\n   */\n  const css: ObjectInterpolation<any> = {\n    ...(shouldAnimateStripe && stripAnimation),\n    ...(isIndeterminate && {\n      position: \"absolute\",\n      willChange: \"left\",\n      minWidth: \"50%\",\n      animation: `${progress} 1s ease infinite normal none running`,\n    }),\n  }\n\n  const trackStyles = {\n    overflow: \"hidden\",\n    position: \"relative\",\n    ...styles.track,\n  }\n\n  return (\n    <chakra.div __css={trackStyles} {...rest}>\n      <StylesProvider value={styles}>\n        <ProgressFilledTrack\n          min={min}\n          max={max}\n          value={value}\n          css={css}\n          borderRadius={borderRadius}\n        />\n        {children}\n      </StylesProvider>\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  Progress.displayName = \"Progress\"\n}\n"],"file":"progress.js"}