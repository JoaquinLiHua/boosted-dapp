{"version":3,"sources":["../../src/circular-progress.tsx"],"names":["React","getProgressProps","rotate","spin","chakra","isUndefined","__DEV__","Circle","props","displayName","Shape","size","isIndeterminate","rest","width","height","animation","undefined","CircularProgress","max","min","valueText","getValueText","value","capIsRound","children","thickness","color","trackColor","progress","determinant","percent","strokeDasharray","indicatorProps","css","strokeDashoffset","transition","rootStyles","display","position","verticalAlign","fontSize","bind","CircularProgressLabel","baseStyle","top","left","textAlign","transform"],"mappings":"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","sourcesContent":["import * as React from \"react\"\nimport { getProgressProps, rotate, spin } from \"./progress.utils\"\nimport { chakra, PropsOf } from \"@chakra-ui/system\"\nimport { isUndefined, __DEV__, StringOrNumber } from \"@chakra-ui/utils\"\n\ninterface CircleProps extends PropsOf<typeof chakra.circle> {}\n\nconst Circle: React.FC<CircleProps> = (props) => (\n  <chakra.circle cx={50} cy={50} r={42} fill=\"transparent\" {...props} />\n)\n\nif (__DEV__) {\n  Circle.displayName = \"Circle\"\n}\n\ninterface ShapeProps extends PropsOf<typeof chakra.svg> {\n  size?: StringOrNumber\n  isIndeterminate?: boolean\n}\n\nconst Shape: React.FC<ShapeProps> = (props) => {\n  const { size, isIndeterminate, ...rest } = props\n  return (\n    <chakra.svg\n      viewBox=\"0 0 100 100\"\n      __css={{\n        width: size,\n        height: size,\n        animation: isIndeterminate ? `${rotate} 2s linear infinite` : undefined,\n      }}\n      {...rest}\n    />\n  )\n}\n\nif (__DEV__) {\n  Shape.displayName = \"Shape\"\n}\n\ninterface CircularProgressOptions {\n  /**\n   * The size of the circular progress in CSS units\n   */\n  size?: StringOrNumber\n  /**\n   * Maximum value defining 100% progress made (must be higher than 'min')\n   */\n  max?: number\n  /**\n   * Minimum value defining 'no progress' (must be lower than 'max')\n   */\n  min?: number\n  /**\n   * The thickness of progress indicator as a ratio of `size`. Must be between `0` and `1`\n   */\n  thickness?: StringOrNumber\n  /**\n   * Current progress (must be between min/max)\n   */\n  value?: number\n  /**\n   * If `true`, the cap of the progress indicator will be rounded.\n   */\n  capIsRound?: boolean\n  /**\n   * The content of the circular progress bar. If passed, the content will be inside and centered in the progress bar.\n   */\n  children?: React.ReactNode\n  /**\n   * The color name of the progress track. Use a color key in the theme object\n   */\n  trackColor?: string\n  /**\n   * The color of the progress indicator. Use a color key in the theme object\n   */\n  color?: string\n  /**\n   * The desired valueText to use in place of the value\n   */\n  valueText?: string\n  /**\n   * A function that returns the desired valueText to use in place of the value\n   */\n  getValueText?(value: number, percent: number): string\n}\n\nexport interface CircularProgressProps\n  extends Omit<PropsOf<typeof chakra.div>, \"color\">,\n    CircularProgressOptions {}\n\n/**\n * CircularProgress is used to indicate the progress of an activity.\n * It's built using `svg` and `circle` components with support for\n * theming and `indeterminate` state\n *\n * @see Docs https://chakra-ui.com/components/progress\n * @todo add theming support for circular progress\n */\nexport const CircularProgress: React.FC<CircularProgressProps> = (props) => {\n  const {\n    size = \"48px\",\n    max = 100,\n    min = 0,\n    valueText,\n    getValueText,\n    value,\n    capIsRound,\n    children,\n    thickness = \"10px\",\n    color = \"#0078d4\",\n    trackColor = \"#edebe9\",\n    ...rest\n  } = props\n\n  const progress = getProgressProps({\n    min,\n    max,\n    value,\n    valueText,\n    getValueText,\n  })\n\n  const isIndeterminate = progress.isIndeterminate\n\n  const determinant = progress.isIndeterminate\n    ? undefined\n    : (progress.percent ?? 0) * 2.64\n\n  const strokeDasharray = isUndefined(determinant)\n    ? undefined\n    : `${determinant} ${264 - determinant}`\n\n  const indicatorProps = isIndeterminate\n    ? {\n        css: { animation: `${spin} 1.5s linear infinite` },\n      }\n    : {\n        strokeDashoffset: 66,\n        strokeDasharray,\n        transition: `stroke-dasharray 0.6s ease 0s, stroke 0.6s ease`,\n      }\n\n  const rootStyles = {\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    fontSize: size,\n  }\n\n  return (\n    <chakra.div\n      className=\"chakra-progress\"\n      {...progress.bind}\n      {...rest}\n      __css={rootStyles}\n    >\n      <Shape size={size} isIndeterminate={isIndeterminate}>\n        <Circle\n          stroke={trackColor}\n          strokeWidth={thickness}\n          className=\"chakra-progress__track\"\n        />\n        <Circle\n          stroke={color}\n          strokeWidth={thickness}\n          className=\"chakra-progress__indicator\"\n          strokeLinecap={capIsRound ? \"round\" : undefined}\n          {...indicatorProps}\n        />\n      </Shape>\n      {children}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  CircularProgress.displayName = \"CircularProgress\"\n}\n\n/**\n * CircularProgress component label. In most cases it's a numeric indicator\n * of the circular progress component's value\n */\nexport const CircularProgressLabel = chakra(\"div\", {\n  baseStyle: {\n    fontSize: \"0.24em\",\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\",\n  },\n})\n\nif (__DEV__) {\n  CircularProgressLabel.displayName = \"CircularProgressLabel\"\n}\n\nexport interface CircularProgressLabelProps\n  extends PropsOf<typeof CircularProgressLabel> {}\n"],"file":"circular-progress.js"}