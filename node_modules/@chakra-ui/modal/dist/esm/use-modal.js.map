{"version":3,"sources":["../../src/use-modal.ts"],"names":["useIds","callAllHandlers","mergeRefs","hideOthers","useCallback","useRef","useEffect","useState","manager","useModalManager","useModal","props","isOpen","onClose","id","closeOnOverlayClick","closeOnEsc","useInert","onOverlayClick","onOverlayClickProp","onEsc","autoFocus","trapFocus","initialFocusRef","finalFocusRef","returnFocusOnClose","blockScrollOnMount","allowPinchZoom","dialogRef","overlayRef","dialogId","headerId","bodyId","useAriaHidden","mouseDownTarget","onMouseDown","event","current","target","onKeyDown","key","stopPropagation","isTopModal","headerMounted","setHeaderMounted","bodyMounted","setBodyMounted","getContentProps","ref","role","tabIndex","undefined","onClick","getOverlayProps","shouldHide","undo"],"mappings":"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","sourcesContent":["import { useIds } from \"@chakra-ui/hooks\"\nimport { callAllHandlers, Dict, mergeRefs } from \"@chakra-ui/utils\"\nimport { Undo, hideOthers } from \"aria-hidden\"\nimport {\n  KeyboardEvent,\n  useCallback,\n  Ref,\n  RefObject,\n  MouseEvent,\n  useRef,\n  useEffect,\n  useState,\n} from \"react\"\nimport { manager, useModalManager } from \"./modal-manager\"\n\nexport interface UseModalProps {\n  /**\n   * If `true`, the modal when be opened.\n   */\n  isOpen: boolean\n  /**\n   * The `id` of the modal\n   */\n  id?: string\n  /**\n   * Callback invoked to close the modal.\n   */\n  onClose(): void\n  /**\n   * If `true`, the modal will close when the overlay is clicked\n   * @default true\n   */\n  closeOnOverlayClick?: boolean\n  /**\n   * If `true`, the modal will close when the `Esc` key is pressed\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?(): void\n  /**\n   * Callback fired when the escape key is pressed and focus is within modal\n   */\n  onEsc?(): void\n  /**\n   * A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\n   * set to `true` so that screen readers can only see the `modal`.\n   *\n   * This is commonly known as making the other elements **inert**\n   *\n   *  @default true\n   */\n  useInert?: boolean\n  /**\n   * If `false`, focus lock will be disabled completely.\n   *\n   * This is useful in situations where you still need to interact with\n   * other surrounding elements.\n   *\n   * ðŸš¨Warning: We don't recommend doing this because it hurts the\n   * accessbility of the modal, based on WAI-ARIA specifications.\n   *\n   * @default true\n   */\n  trapFocus?: boolean\n  /**\n   * If `true`, the modal will autofocus the first enabled and interative\n   * element within the `ModalContent`\n   *\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * The `ref` of element to receive focus when the modal opens.\n   */\n  initialFocusRef?: RefObject<HTMLElement>\n  /**\n   * The `ref` of element to receive focus when the modal closes.\n   */\n  finalFocusRef?: RefObject<HTMLElement>\n  /**\n   * If `true`, the modal will return focus to the element that triggered it when it closes.\n   * @default true\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, scrolling will be disabled on the `body` when the modal opens.\n   *  @default true\n   */\n  blockScrollOnMount?: boolean\n  /**\n   * Handle zoom/pinch gestures on iOS devices when scroll locking is enabled.\n   * Defaults to `false`.\n   */\n  allowPinchZoom?: boolean\n}\n\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\nexport function useModal(props: UseModalProps) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n  } = props\n\n  const dialogRef = useRef<HTMLElement>(null)\n  const overlayRef = useRef<HTMLElement>(null)\n\n  const [dialogId, headerId, bodyId] = useIds(\n    id,\n    `chakra-modal`,\n    `chakra-modal--header`,\n    `chakra-modal--body`,\n  )\n\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n  useAriaHidden(dialogRef, isOpen && useInert)\n  /**\n   * Hook use to manage multiple or nested modals\n   */\n  useModalManager(dialogRef, isOpen)\n\n  const mouseDownTarget = useRef<EventTarget | null>(null)\n\n  const onMouseDown = useCallback((event: MouseEvent) => {\n    mouseDownTarget.current = event.target\n  }, [])\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        event.stopPropagation()\n\n        if (closeOnEsc) {\n          onClose?.()\n        }\n\n        onEsc?.()\n      }\n    },\n    [closeOnEsc, onClose, onEsc],\n  )\n\n  const onOverlayClick = useCallback(\n    (event: MouseEvent) => {\n      event.stopPropagation()\n      /**\n       * Make sure the event starts and ends on the same DOM element.\n       *\n       * This is used to prevent the modal from closing when you\n       * start dragging from the content, and release drag outside the content.\n       *\n       * We prevent this because it's technically not a considered \"click outside\"\n       */\n      if (mouseDownTarget.current !== event.target) return\n\n      /**\n       * When you click on the overlay, we want to remove only the topmost modal\n       */\n      if (manager.isTopModal(dialogRef)) {\n        if (closeOnOverlayClick) {\n          onClose?.()\n        }\n        onOverlayClickProp?.()\n      }\n    },\n    [onClose, closeOnOverlayClick, onOverlayClickProp],\n  )\n\n  const [headerMounted, setHeaderMounted] = useState(false)\n  const [bodyMounted, setBodyMounted] = useState(false)\n\n  const getContentProps = useCallback(\n    (props: Dict = {}, ref: Ref<any>) => ({\n      ...props,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      role: props.role || \"dialog\",\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, (event: MouseEvent) =>\n        event.stopPropagation(),\n      ),\n    }),\n    [bodyId, bodyMounted, dialogId, headerId, headerMounted],\n  )\n\n  const getOverlayProps = useCallback(\n    (props: Dict = {}, ref: Ref<any>) => ({\n      ...props,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n    }),\n    [onKeyDown, onMouseDown, onOverlayClick],\n  )\n\n  return {\n    isOpen,\n    onClose,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    blockScrollOnMount,\n    allowPinchZoom,\n    getContentProps,\n    getOverlayProps,\n  }\n}\n\nexport type UseModalReturn = ReturnType<typeof useModal>\n\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\nexport function useAriaHidden(\n  ref: RefObject<HTMLElement>,\n  shouldHide: boolean,\n) {\n  useEffect(() => {\n    if (!ref.current) return\n\n    let undo: Undo | null = null\n\n    if (shouldHide && ref.current) {\n      undo = hideOthers(ref.current)\n    }\n\n    return () => {\n      if (shouldHide) {\n        undo?.()\n      }\n    }\n  }, [shouldHide, ref])\n}\n"],"file":"use-modal.js"}