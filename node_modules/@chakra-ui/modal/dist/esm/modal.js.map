{"version":3,"sources":["../../src/modal.tsx"],"names":["CloseButton","FocusLock","Portal","chakra","forwardRef","useMultiStyleConfig","StylesProvider","useStyles","callAllHandlers","cx","__DEV__","React","useEffect","RemoveScroll","ModalContextProvider","useModalContext","useModal","Modal","props","getContainer","children","styles","modal","isOpen","defaultProps","returnFocusOnClose","scrollBehavior","trapFocus","autoFocus","blockScrollOnMount","allowPinchZoom","displayName","ModalContent","ref","className","otherProps","getContentProps","content","_className","display","flexDirection","position","width","outline","ModalOverlay","rest","getOverlayProps","dialogRef","initialFocusRef","finalFocusRef","overlay","height","left","top","ModalHeader","headerId","setHeaderMounted","flex","header","ModalBody","bodyId","setBodyMounted","body","ModalFooter","alignItems","justifyContent","footer","ModalCloseButton","onClick","onClose","event","stopPropagation"],"mappings":"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","sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport { FocusLock } from \"@chakra-ui/focus-lock\"\nimport { Portal, PortalProps } from \"@chakra-ui/portal\"\nimport {\n  chakra,\n  forwardRef,\n  PropsOf,\n  ThemingProps,\n  useMultiStyleConfig,\n  StylesProvider,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { callAllHandlers, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport React, { ReactNode, useEffect } from \"react\"\nimport { RemoveScroll } from \"react-remove-scroll\"\nimport { ModalContextProvider, useModalContext } from \"./context\"\nimport { useModal, UseModalProps } from \"./use-modal\"\n\nexport interface ModalProps extends UseModalProps, ThemingProps {\n  children?: ReactNode\n  /**\n   *  If `true`, the modal will be centered on screen.\n   * @default false\n   */\n  isCentered?: boolean\n  /**\n   * Where scroll behaviour should originate.\n   * - If set to `inside`, scroll only occurs within the `ModalBody`.\n   * - If set to `outside`, the entire `ModalContent` will scroll within the viewport.\n   *\n   * @default \"outside\"\n   */\n  scrollBehavior?: \"inside\" | \"outside\"\n\n  /**\n   * Function that will be called to get the parent element\n   * that the modal will be attached to.\n   */\n  getContainer?: PortalProps[\"getContainer\"]\n}\n\n/**\n * Modal\n *\n * React component that provides context, theming, and accessbility properties\n * to all other modal components.\n *\n * It doesn't render any DOM node.\n */\nexport const Modal: React.FC<ModalProps> = (props) => {\n  const { getContainer, children } = props\n\n  const styles = useMultiStyleConfig(\"Modal\", props)\n  const modal = useModal(props)\n\n  if (!modal.isOpen) return null\n\n  return (\n    <ModalContextProvider value={modal}>\n      <Portal getContainer={getContainer}>\n        <StylesProvider value={styles}>{children}</StylesProvider>\n      </Portal>\n    </ModalContextProvider>\n  )\n}\n\nModal.defaultProps = {\n  returnFocusOnClose: true,\n  scrollBehavior: \"outside\",\n  trapFocus: true,\n  autoFocus: true,\n  blockScrollOnMount: true,\n  allowPinchZoom: false,\n}\n\nif (__DEV__) {\n  Modal.displayName = \"Modal\"\n}\n\nexport interface ModalContentProps extends PropsOf<typeof chakra.section> {}\n\n/**\n * ModalContent\n *\n * React component used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it's a modal modal\n */\nexport const ModalContent = forwardRef<ModalContentProps, \"section\">(\n  function ModalContent(props, ref) {\n    const { className, children, ...otherProps } = props\n\n    const { getContentProps } = useModalContext()\n\n    const content = getContentProps(otherProps, ref)\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useStyles()\n\n    return (\n      <chakra.section\n        className={_className}\n        {...content}\n        __css={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          position: \"relative\",\n          width: \"100%\",\n          outline: 0,\n          ...styles.content,\n        }}\n      >\n        {children}\n      </chakra.section>\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalContent.displayName = \"ModalContent\"\n}\n\nexport interface ModalOverlayProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * ModalOverlay\n *\n * React component that renders a backdrop behind the modal. It's\n * also used as a wrapper for the modal content for better positioning.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\nexport const ModalOverlay = forwardRef<ModalOverlayProps, \"div\">(\n  function ModalOverlay(props, ref) {\n    const { className, children, ...rest } = props\n\n    const {\n      getOverlayProps,\n      autoFocus,\n      trapFocus,\n      dialogRef,\n      initialFocusRef,\n      blockScrollOnMount,\n      allowPinchZoom,\n      finalFocusRef,\n      returnFocusOnClose,\n    } = useModalContext()\n\n    const overlay = getOverlayProps(rest, ref)\n    const _className = cx(\"chakra-modal__overlay\", className)\n\n    const styles = useStyles()\n\n    return (\n      <FocusLock\n        autoFocus={autoFocus}\n        isDisabled={!trapFocus}\n        initialFocusRef={initialFocusRef}\n        finalFocusRef={finalFocusRef}\n        restoreFocus={returnFocusOnClose}\n        contentRef={dialogRef}\n      >\n        <RemoveScroll\n          allowPinchZoom={allowPinchZoom}\n          enabled={blockScrollOnMount}\n        >\n          <chakra.div\n            {...overlay}\n            className={_className}\n            __css={{\n              width: \"100vw\",\n              height: \"100vh\",\n              position: \"fixed\",\n              left: 0,\n              top: 0,\n              ...styles.overlay,\n            }}\n          >\n            {children}\n          </chakra.div>\n        </RemoveScroll>\n      </FocusLock>\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalOverlay.displayName = \"ModalOverlay\"\n}\n\nexport interface ModalHeaderProps extends PropsOf<typeof chakra.header> {}\n\n/**\n * ModalHeader\n *\n * React component that houses the title of the modal.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\nexport const ModalHeader = forwardRef<ModalHeaderProps, \"header\">(\n  function ModalHeader(props, ref) {\n    const { className, ...rest } = props\n\n    const { headerId, setHeaderMounted } = useModalContext()\n\n    /**\n     * Notify us if this component was rendered or used\n     * so we can append `aria-labelledby` automatically\n     */\n    useEffect(() => {\n      setHeaderMounted(true)\n      return () => setHeaderMounted(false)\n    }, [setHeaderMounted])\n\n    const _className = cx(\"chakra-modal__header\", className)\n    const styles = useStyles()\n\n    return (\n      <chakra.header\n        ref={ref}\n        className={_className}\n        id={headerId}\n        {...rest}\n        __css={{\n          flex: 0,\n          ...styles.header,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalHeader.displayName = \"ModalHeader\"\n}\n\nexport interface ModalBodyProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * ModalBody\n *\n * React component that houses the main content of the modal.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\nexport const ModalBody = forwardRef<ModalBodyProps, \"div\">(function ModalBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const { bodyId, setBodyMounted } = useModalContext()\n\n  /**\n   * Notify us if this component was rendered or used\n   * so we can append `aria-describedby` automatically\n   */\n  useEffect(() => {\n    setBodyMounted(true)\n    return () => setBodyMounted(false)\n  }, [setBodyMounted])\n\n  const _className = cx(\"chakra-modal__body\", className)\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={_className}\n      id={bodyId}\n      {...rest}\n      __css={styles.body}\n    />\n  )\n})\n\nif (__DEV__) {\n  ModalBody.displayName = \"ModalBody\"\n}\n\n/**\n * ModalFooter\n *\n * React component that houses the action buttons of the modal.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\nexport const ModalFooter: React.FC<PropsOf<typeof chakra.footer>> = (props) => {\n  const styles = useStyles()\n  return (\n    <chakra.footer\n      {...props}\n      __css={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"flex-end\",\n        flex: 0,\n        ...styles.footer,\n      }}\n      className={cx(\"chakra-modal__footer\", props.className)}\n    />\n  )\n}\n\nif (__DEV__) {\n  ModalFooter.displayName = \"ModalFooter\"\n}\n\n/**\n * ModalCloseButton\n *\n * React component used closes the modal. You don't need\n * to pass the `onClick` to it, it's reads the `onClose` action from the\n * modal context.\n */\nexport const ModalCloseButton = forwardRef<CloseButtonProps, \"button\">(\n  function ModalCloseButton(props, ref) {\n    const { onClick, className, ...rest } = props\n    const { onClose } = useModalContext()\n\n    const _className = cx(\"chakra-modal__close-btn\", className)\n\n    return (\n      <CloseButton\n        ref={ref}\n        position=\"absolute\"\n        top=\"8px\"\n        right=\"12px\"\n        className={_className}\n        onClick={callAllHandlers(onClick, (event) => {\n          event.stopPropagation()\n          onClose()\n        })}\n        {...rest}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalCloseButton.displayName = \"ModalCloseButton\"\n}\n"],"file":"modal.js"}