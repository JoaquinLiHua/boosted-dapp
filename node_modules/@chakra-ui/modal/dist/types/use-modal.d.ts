import { Ref, RefObject } from "react";
export interface UseModalProps {
    /**
     * If `true`, the modal when be opened.
     */
    isOpen: boolean;
    /**
     * The `id` of the modal
     */
    id?: string;
    /**
     * Callback invoked to close the modal.
     */
    onClose(): void;
    /**
     * If `true`, the modal will close when the overlay is clicked
     * @default true
     */
    closeOnOverlayClick?: boolean;
    /**
     * If `true`, the modal will close when the `Esc` key is pressed
     * @default true
     */
    closeOnEsc?: boolean;
    /**
     * Callback fired when the overlay is clicked.
     */
    onOverlayClick?(): void;
    /**
     * Callback fired when the escape key is pressed and focus is within modal
     */
    onEsc?(): void;
    /**
     * A11y: If `true`, the siblings of the `modal` will have `aria-hidden`
     * set to `true` so that screen readers can only see the `modal`.
     *
     * This is commonly known as making the other elements **inert**
     *
     *  @default true
     */
    useInert?: boolean;
    /**
     * If `false`, focus lock will be disabled completely.
     *
     * This is useful in situations where you still need to interact with
     * other surrounding elements.
     *
     * ðŸš¨Warning: We don't recommend doing this because it hurts the
     * accessbility of the modal, based on WAI-ARIA specifications.
     *
     * @default true
     */
    trapFocus?: boolean;
    /**
     * If `true`, the modal will autofocus the first enabled and interative
     * element within the `ModalContent`
     *
     * @default true
     */
    autoFocus?: boolean;
    /**
     * The `ref` of element to receive focus when the modal opens.
     */
    initialFocusRef?: RefObject<HTMLElement>;
    /**
     * The `ref` of element to receive focus when the modal closes.
     */
    finalFocusRef?: RefObject<HTMLElement>;
    /**
     * If `true`, the modal will return focus to the element that triggered it when it closes.
     * @default true
     */
    returnFocusOnClose?: boolean;
    /**
     * If `true`, scrolling will be disabled on the `body` when the modal opens.
     *  @default true
     */
    blockScrollOnMount?: boolean;
    /**
     * Handle zoom/pinch gestures on iOS devices when scroll locking is enabled.
     * Defaults to `false`.
     */
    allowPinchZoom?: boolean;
}
/**
 * Modal hook that manages all the logic for the modal dialog widget
 * and returns prop getters, state and actions.
 *
 * @param props
 */
export declare function useModal(props: UseModalProps): {
    isOpen: boolean;
    onClose: () => void;
    autoFocus: boolean | undefined;
    trapFocus: boolean | undefined;
    initialFocusRef: RefObject<HTMLElement> | undefined;
    finalFocusRef: RefObject<HTMLElement> | undefined;
    returnFocusOnClose: boolean | undefined;
    headerId: string;
    bodyId: string;
    setBodyMounted: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    setHeaderMounted: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    dialogRef: RefObject<HTMLElement>;
    overlayRef: RefObject<HTMLElement>;
    blockScrollOnMount: boolean | undefined;
    allowPinchZoom: boolean | undefined;
    getContentProps: (props: Record<string, any> | undefined, ref: Ref<any>) => {
        ref: (value: any) => void;
        id: string;
        role: any;
        tabIndex: number;
        "aria-modal": boolean;
        "aria-labelledby": string | undefined;
        "aria-describedby": string | undefined;
        onClick: (event: unknown) => void;
    };
    getOverlayProps: (props: Record<string, any> | undefined, ref: Ref<any>) => {
        ref: (value: any) => void;
        onClick: (event: unknown) => void;
        onKeyDown: (event: unknown) => void;
        onMouseDown: (event: unknown) => void;
    };
};
export declare type UseModalReturn = ReturnType<typeof useModal>;
/**
 * Modal hook to polyfill `aria-modal`.
 *
 * It applies `aria-hidden` to elements behind the modal
 * to indicate that they're `inert`.
 *
 * @param ref React ref of the node
 * @param shouldHide whether `aria-hidden` should be applied
 */
export declare function useAriaHidden(ref: RefObject<HTMLElement>, shouldHide: boolean): void;
