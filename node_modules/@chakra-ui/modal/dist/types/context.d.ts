/// <reference types="react" />
declare const ModalContextProvider: import("react").Provider<{
    isOpen: boolean;
    onClose: () => void;
    autoFocus: boolean | undefined;
    trapFocus: boolean | undefined;
    initialFocusRef: import("react").RefObject<HTMLElement> | undefined;
    finalFocusRef: import("react").RefObject<HTMLElement> | undefined;
    returnFocusOnClose: boolean | undefined;
    headerId: string;
    bodyId: string;
    setBodyMounted: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    setHeaderMounted: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    dialogRef: import("react").RefObject<HTMLElement>;
    overlayRef: import("react").RefObject<HTMLElement>;
    blockScrollOnMount: boolean | undefined;
    allowPinchZoom: boolean | undefined;
    getContentProps: (props: Record<string, any> | undefined, ref: import("react").Ref<any>) => {
        ref: (value: any) => void;
        id: string;
        role: any;
        tabIndex: number;
        "aria-modal": boolean;
        "aria-labelledby": string | undefined;
        "aria-describedby": string | undefined;
        onClick: (event: unknown) => void;
    };
    getOverlayProps: (props: Record<string, any> | undefined, ref: import("react").Ref<any>) => {
        ref: (value: any) => void;
        onClick: (event: unknown) => void;
        onKeyDown: (event: unknown) => void;
        onMouseDown: (event: unknown) => void;
    };
}>, useModalContext: () => {
    isOpen: boolean;
    onClose: () => void;
    autoFocus: boolean | undefined;
    trapFocus: boolean | undefined;
    initialFocusRef: import("react").RefObject<HTMLElement> | undefined;
    finalFocusRef: import("react").RefObject<HTMLElement> | undefined;
    returnFocusOnClose: boolean | undefined;
    headerId: string;
    bodyId: string;
    setBodyMounted: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    setHeaderMounted: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    dialogRef: import("react").RefObject<HTMLElement>;
    overlayRef: import("react").RefObject<HTMLElement>;
    blockScrollOnMount: boolean | undefined;
    allowPinchZoom: boolean | undefined;
    getContentProps: (props: Record<string, any> | undefined, ref: import("react").Ref<any>) => {
        ref: (value: any) => void;
        id: string;
        role: any;
        tabIndex: number;
        "aria-modal": boolean;
        "aria-labelledby": string | undefined;
        "aria-describedby": string | undefined;
        onClick: (event: unknown) => void;
    };
    getOverlayProps: (props: Record<string, any> | undefined, ref: import("react").Ref<any>) => {
        ref: (value: any) => void;
        onClick: (event: unknown) => void;
        onKeyDown: (event: unknown) => void;
        onMouseDown: (event: unknown) => void;
    };
};
export { ModalContextProvider, useModalContext };
