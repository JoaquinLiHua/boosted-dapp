{"version":3,"sources":["../../src/use-checkbox.ts"],"names":["useBoolean","useControllableProp","useSafeLayoutEffect","callAllHandlers","dataAttr","mergeRefs","visuallyHiddenStyle","useCallback","useRef","useState","useCheckbox","props","defaultIsChecked","isChecked","checkedProp","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isIndeterminate","isInvalid","name","value","id","htmlProps","isFocused","setFocused","isHovered","setHovered","isActive","setActive","ref","checkedState","setCheckedState","isControlled","handleChange","event","preventDefault","target","checked","current","indeterminate","Boolean","trulyDisabled","onKeyDown","key","on","onKeyUp","off","state","getCheckboxProps","_ref","onPressDown","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","style","touchAction","getInputProps","inputRef","type","onBlur","onFocus","required","disabled","readOnly","getLabelProps","stopEvent","onTouchStart","onTouchState","stopPropagation"],"mappings":"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","sourcesContent":["import {\n  useBoolean,\n  useControllableProp,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport { callAllHandlers, dataAttr, mergeRefs, Dict } from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport React, {\n  Ref,\n  useCallback,\n  ChangeEvent,\n  KeyboardEvent,\n  useRef,\n  useState,\n  HTMLAttributes,\n} from \"react\"\n\nexport interface UseCheckboxProps {\n  /**\n   * If `true`, the checkbox will be checked.\n   * You'll need to pass `onChange` to update it's value (since it's now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the checkbox will be indeterminate.\n   * This only affects the icon shown inside checkbox\n   * and does not modify the isChecked property.\n   */\n  isIndeterminate?: boolean\n  /**\n   * If `true`, the checkbox will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is passed, the checkbox will\n   * remain tabbable but not interactive\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the checkbox will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the checkbox is marked as invalid.\n   * Changes style of unchecked state.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the checkbox input is marked as required,\n   * and `required` attribute will be added\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * The callback invoked when the checked state of the `Checkbox` changes..\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n  /**\n   * The name of the input field in a checkbox\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the checkbox input.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * id assigned to input\n   */\n  id?: string\n}\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/components/useCheckbox\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const {\n    defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id,\n    ...htmlProps\n  } = props\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovered] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [checkedState, setCheckedState] = useState(!!defaultIsChecked)\n\n  const [isControlled, isChecked] = useControllableProp(\n    checkedProp,\n    checkedState,\n  )\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChange?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChange,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (ref.current) {\n      ref.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps: function (props: Attributes = {}, _ref: Ref<any> = null) {\n      const onPressDown = (event: React.MouseEvent) => {\n        // On mousedown, the input blurs and returns focus to the `body`,\n        // we need to prevent this. Native checkboxes keeps focus on `input`\n        event.preventDefault()\n        setActive.on()\n      }\n\n      return {\n        ...props,\n        ref: _ref,\n        \"data-active\": dataAttr(isActive),\n        \"data-hover\": dataAttr(isHovered),\n        \"data-checked\": dataAttr(isChecked),\n        \"data-focus\": dataAttr(isFocused),\n        \"data-indeterminate\": dataAttr(isIndeterminate),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(isInvalid),\n        \"data-readonly\": dataAttr(isReadOnly),\n        \"aria-hidden\": true,\n        onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n        onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n        onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off),\n        style: { touchAction: \"none\", ...props.style },\n      }\n    },\n    getInputProps: (\n      props: InputAttributes = {},\n      inputRef: Ref<any> = null,\n    ) => ({\n      ...props,\n      ref: mergeRefs(ref, inputRef),\n      type: \"checkbox\",\n      name,\n      value,\n      id,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(props.onBlur, setFocused.off),\n      onFocus: callAllHandlers(props.onFocus, setFocused.on),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-invalid\": isInvalid,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle,\n    }),\n    getLabelProps: (props: Dict = {}, ref: Ref<any> = null) => {\n      return {\n        ...props,\n        ref,\n        onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n        onTouchStart: callAllHandlers(props.onTouchState, stopEvent),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-checked\": dataAttr(isChecked),\n        \"data-invalid\": dataAttr(isInvalid),\n      }\n    },\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n\ntype Attributes = HTMLAttributes<HTMLElement>\ntype InputAttributes = HTMLAttributes<HTMLInputElement>\n"],"file":"use-checkbox.js"}