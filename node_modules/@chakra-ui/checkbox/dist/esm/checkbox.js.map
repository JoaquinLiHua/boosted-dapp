{"version":3,"sources":["../../src/checkbox.tsx"],"names":["chakra","forwardRef","omitThemingProps","useMultiStyleConfig","cx","__DEV__","React","useCheckboxGroupContext","CheckboxIcon","useCheckbox","StyledControl","baseStyle","display","alignItems","justifyContent","verticalAlign","userSelect","flexShrink","StyledContainer","cursor","position","_disabled","Checkbox","props","ref","group","merged","styles","ownProps","spacing","className","children","rest","isChecked","value","includes","onChange","state","getInputProps","getCheckboxProps","getLabelProps","htmlProps","_className","inputProps","labelProps","checkboxProps","iconStyles","opacity","isIndeterminate","transform","transition","icon","container","isDisabled","control","ml","label","displayName"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  PropsOf,\n  SystemProps,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, Omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCheckboxGroupContext } from \"./checkbox-group\"\nimport { CheckboxIcon } from \"./checkbox.icon\"\nimport { useCheckbox, UseCheckboxProps } from \"./use-checkbox\"\n\nconst StyledControl = chakra(\"div\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0,\n  },\n})\n\nconst StyledContainer = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\",\n    },\n  },\n})\n\ntype Omitted =\n  | \"size\"\n  | \"checked\"\n  | \"defaultChecked\"\n  | \"onChange\"\n  | \"onBlur\"\n  | \"value\"\n\ntype StyledControlProps = Omit<PropsOf<typeof StyledControl>, Omitted>\n\ntype BaseCheckboxProps = Pick<\n  PropsOf<\"input\">,\n  \"onBlur\" | \"checked\" | \"defaultChecked\"\n>\n\nexport interface CheckboxProps\n  extends StyledControlProps,\n    BaseCheckboxProps,\n    ThemingProps,\n    UseCheckboxProps {\n  /**\n   * The spacing between the checkbox and it's label text\n   * @default 0.5rem\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n}\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/components/checkbox\n */\nexport const Checkbox = forwardRef<CheckboxProps, \"input\">(function Checkbox(\n  props,\n  ref,\n) {\n  const group = useCheckboxGroupContext()\n\n  const merged = { ...group, ...props }\n  const styles = useMultiStyleConfig(\"Checkbox\", merged)\n  const ownProps = omitThemingProps(merged)\n\n  const { spacing = \"0.5rem\", className, children, ...rest } = ownProps\n\n  let isChecked = ownProps.isChecked\n  if (group?.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value)\n  }\n\n  let onChange = ownProps.onChange\n  if (group?.onChange && ownProps.value) {\n    onChange = group.onChange\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    htmlProps,\n  } = useCheckbox({\n    ...rest,\n    isChecked,\n    onChange,\n  })\n\n  const _className = cx(\"chakra-checkbox\", className)\n\n  const inputProps = getInputProps({}, ref)\n  const labelProps = getLabelProps()\n  const checkboxProps = getCheckboxProps()\n\n  const iconStyles = {\n    opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n    transform:\n      state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n    transition: \"transform 200ms\",\n    ...styles.icon,\n  }\n\n  return (\n    <StyledContainer\n      __css={styles.container}\n      data-disabled={state.isDisabled}\n      className={_className}\n      {...htmlProps}\n    >\n      <input className=\"chakra-checkbox__input\" {...inputProps} />\n      <StyledControl\n        __css={styles.control}\n        className=\"chakra-checkbox__control\"\n        {...checkboxProps}\n      >\n        <CheckboxIcon\n          __css={iconStyles}\n          isChecked={state.isChecked}\n          isIndeterminate={state.isIndeterminate}\n        />\n      </StyledControl>\n      {children && (\n        <chakra.div\n          className=\"chakra-checkbox__label\"\n          {...labelProps}\n          children={children}\n          __css={{\n            ml: spacing,\n            ...styles.label,\n          }}\n        />\n      )}\n    </StyledContainer>\n  )\n})\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\"\n}\n"],"file":"checkbox.js"}