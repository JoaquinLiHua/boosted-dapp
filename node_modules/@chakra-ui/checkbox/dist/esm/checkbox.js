function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from "@chakra-ui/system";
import { cx, __DEV__ } from "@chakra-ui/utils";
import * as React from "react";
import { useCheckboxGroupContext } from "./checkbox-group";
import { CheckboxIcon } from "./checkbox.icon";
import { useCheckbox } from "./use-checkbox";
var StyledControl = chakra("div", {
  baseStyle: {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    verticalAlign: "top",
    userSelect: "none",
    flexShrink: 0
  }
});
var StyledContainer = chakra("label", {
  baseStyle: {
    cursor: "pointer",
    display: "inline-flex",
    alignItems: "center",
    verticalAlign: "top",
    position: "relative",
    _disabled: {
      cursor: "not-allowed"
    }
  }
});

/**
 * Checkbox
 *
 * React component used in forms when a user needs to select
 * multiple values from several options.
 *
 * @see Docs https://chakra-ui.com/components/checkbox
 */
export var Checkbox = /*#__PURE__*/forwardRef(function Checkbox(props, ref) {
  var group = useCheckboxGroupContext();

  var merged = _extends({}, group, props);

  var styles = useMultiStyleConfig("Checkbox", merged);
  var ownProps = omitThemingProps(merged);

  var {
    spacing = "0.5rem",
    className,
    children
  } = ownProps,
      rest = _objectWithoutPropertiesLoose(ownProps, ["spacing", "className", "children"]);

  var isChecked = ownProps.isChecked;

  if ((group == null ? void 0 : group.value) && ownProps.value) {
    isChecked = group.value.includes(ownProps.value);
  }

  var onChange = ownProps.onChange;

  if ((group == null ? void 0 : group.onChange) && ownProps.value) {
    onChange = group.onChange;
  }

  var {
    state,
    getInputProps,
    getCheckboxProps,
    getLabelProps,
    htmlProps
  } = useCheckbox(_extends({}, rest, {
    isChecked,
    onChange
  }));

  var _className = cx("chakra-checkbox", className);

  var inputProps = getInputProps({}, ref);
  var labelProps = getLabelProps();
  var checkboxProps = getCheckboxProps();

  var iconStyles = _extends({
    opacity: state.isChecked || state.isIndeterminate ? 1 : 0,
    transform: state.isChecked || state.isIndeterminate ? "scale(1)" : "scale(0.95)",
    transition: "transform 200ms"
  }, styles.icon);

  return /*#__PURE__*/React.createElement(StyledContainer, _extends({
    __css: styles.container,
    "data-disabled": state.isDisabled,
    className: _className
  }, htmlProps), /*#__PURE__*/React.createElement("input", _extends({
    className: "chakra-checkbox__input"
  }, inputProps)), /*#__PURE__*/React.createElement(StyledControl, _extends({
    __css: styles.control,
    className: "chakra-checkbox__control"
  }, checkboxProps), /*#__PURE__*/React.createElement(CheckboxIcon, {
    __css: iconStyles,
    isChecked: state.isChecked,
    isIndeterminate: state.isIndeterminate
  })), children && /*#__PURE__*/React.createElement(chakra.div, _extends({
    className: "chakra-checkbox__label"
  }, labelProps, {
    children: children,
    __css: _extends({
      ml: spacing
    }, styles.label)
  })));
});

if (__DEV__) {
  Checkbox.displayName = "Checkbox";
}
//# sourceMappingURL=checkbox.js.map