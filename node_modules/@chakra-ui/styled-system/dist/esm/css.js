import { get, isArray, isObject, isResponsiveObjectLike, objectToArrayNotation, runIfFn, merge } from "@chakra-ui/utils";
import { pseudoSelectors } from "./pseudo";
import { parser } from "./parser";
var defaultBreakpoints = ["40em", "52em", "64em"];

function getBreakpoints(theme) {
  var _theme$breakpoints;

  var breakpoints = (_theme$breakpoints = theme == null ? void 0 : theme.breakpoints) != null ? _theme$breakpoints : defaultBreakpoints;
  return breakpoints;
}

var responsive = styles => theme => {
  var computedStyles = {};
  var breakpoints = getBreakpoints(theme);
  var mediaQueries = [null, ...breakpoints.map(n => "@media screen and (min-width: " + n + ")")];

  for (var key in styles) {
    var value = runIfFn(styles[key], theme != null ? theme : {});
    if (value == null) continue;
    value = isResponsiveObjectLike(value) ? objectToArrayNotation(value) : value;

    if (!isArray(value)) {
      computedStyles[key] = value;
      continue;
    }

    var queries = value.slice(0, mediaQueries.length).length;

    for (var index = 0; index < queries; index++) {
      var media = mediaQueries[index];

      if (!media) {
        computedStyles[key] = value[index];
        continue;
      }

      computedStyles[media] = computedStyles[media] || {};
      if (value[index] == null) continue;
      computedStyles[media][key] = value[index];
    }
  }

  return computedStyles;
};

export var css = function css(args) {
  if (args === void 0) {
    args = {};
  }

  return function (props) {
    if (props === void 0) {
      props = {};
    }

    var theme = "theme" in props ? props.theme : props;
    var computedStyles = {};
    var styleObject = runIfFn(args, theme);
    var styles = responsive(styleObject)(theme);

    for (var k in styles) {
      var _config$transform;

      var x = styles[k];
      var key = k in pseudoSelectors ? pseudoSelectors[k] : k;
      var val = runIfFn(x, theme);
      var config = parser.config[key];

      if (key === "apply") {
        var apply = css(get(theme, val))(theme);
        computedStyles = merge({}, computedStyles, apply);
        continue;
      }

      if (isObject(val)) {
        computedStyles[key] = css(val)(theme);
        continue;
      }

      var scale = get(theme, config == null ? void 0 : config.scale, {});
      var value = (_config$transform = config == null ? void 0 : config.transform == null ? void 0 : config.transform(val, scale)) != null ? _config$transform : get(scale, val, val);

      if (config == null ? void 0 : config.properties) {
        for (var p of config == null ? void 0 : config.properties) {
          computedStyles[p] = value;
        }

        continue;
      }

      if (config == null ? void 0 : config.property) {
        computedStyles[config == null ? void 0 : config.property] = value;
        continue;
      }

      computedStyles[key] = value;
    }

    return computedStyles;
  };
};
//# sourceMappingURL=css.js.map