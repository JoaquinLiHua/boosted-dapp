{"version":3,"sources":["../../src/popover.tsx"],"names":["name","errorMessage","PopoverProvider","usePopoverContext","Popover","props","styles","children","rest","context","isOpen","onClose","__DEV__","displayName","PopoverTrigger","child","Children","only","getTriggerProps","ref","PopoverContent","getPopoverProps","popoverProps","contentStyles","position","display","flexDirection","content","PopoverHeader","headerId","setHasHeader","on","off","className","header","PopoverBody","bodyId","setHasBody","body","PopoverFooter","footer","PopoverCloseButton","PopoverArrow","getArrowProps","arrowProps","arrowStyles","bg","arrow"],"mappings":"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","sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport {\n  chakra,\n  omitThemingProps,\n  PropsOf,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport {\n  createContext,\n  cx,\n  ReactNodeOrRenderProp,\n  runIfFn,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport React, { Children, cloneElement, useEffect } from \"react\"\nimport { usePopover, UsePopoverProps, UsePopoverReturn } from \"./use-popover\"\n\nconst [PopoverProvider, usePopoverContext] = createContext<UsePopoverReturn>({\n  name: \"PopoverContext\",\n  errorMessage:\n    \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\",\n})\n\nexport { usePopoverContext }\n\nexport interface PopoverProps extends UsePopoverProps, ThemingProps {\n  /**\n   * The content of the popover. It's usually the `PopoverTrigger`,\n   * and `PopoverContent`\n   */\n  children?: ReactNodeOrRenderProp<{\n    isOpen: boolean\n    onClose(): void\n  }>\n}\n\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\nexport const Popover: React.FC<PopoverProps> = (props) => {\n  const styles = useMultiStyleConfig(\"Popover\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const context = usePopover(rest)\n\n  return (\n    <PopoverProvider value={context}>\n      <StylesProvider value={styles}>\n        {runIfFn(children, {\n          isOpen: context.isOpen,\n          onClose: context.onClose,\n        })}\n      </StylesProvider>\n    </PopoverProvider>\n  )\n}\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\"\n}\n\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\nexport const PopoverTrigger: React.FC = (props) => {\n  // enforce a single child\n  const child: any = Children.only(props.children)\n  const { getTriggerProps } = usePopoverContext()\n  return cloneElement(child, getTriggerProps(child.props, child.ref))\n}\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\"\n}\n\nexport interface PopoverContentProps extends PropsOf<typeof chakra.section> {}\n\n/**\n * PopoverContent includes all accessibility\n * requirements for a popover\n */\nexport const PopoverContent = forwardRef<PopoverContentProps, \"section\">(\n  function PopoverContent(props, ref) {\n    const { getPopoverProps } = usePopoverContext()\n    const popoverProps = getPopoverProps(props, ref)\n\n    const styles = useStyles()\n    const contentStyles = {\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      ...styles.content,\n    }\n\n    return (\n      <chakra.section\n        className={cx(\"chakra-popover__content\")}\n        {...popoverProps}\n        __css={contentStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\"\n}\n\nexport interface PopoverHeaderProps extends PropsOf<typeof chakra.header> {}\n\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it's first announced by screenreaders.\n */\nexport const PopoverHeader = forwardRef<PopoverHeaderProps, \"header\">(\n  function PopoverHeader(props, ref) {\n    const { headerId, setHasHeader } = usePopoverContext()\n\n    useEffect(() => {\n      setHasHeader.on()\n      return () => setHasHeader.off()\n    }, [setHasHeader])\n\n    const styles = useStyles()\n\n    return (\n      <chakra.header\n        {...props}\n        className={cx(\"chakra-popover__header\", props.className)}\n        id={headerId}\n        ref={ref}\n        __css={styles.header}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\"\n}\n\nexport interface PopoverBodyProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\nexport const PopoverBody = forwardRef<PopoverBodyProps, \"div\">(\n  function PopoverBody(props, ref) {\n    const { bodyId, setHasBody } = usePopoverContext()\n\n    useEffect(() => {\n      setHasBody.on()\n      return () => setHasBody.off()\n    }, [setHasBody])\n\n    const styles = useStyles()\n\n    return (\n      <chakra.div\n        {...props}\n        className={cx(\"chakra-popover__body\", props.className)}\n        id={bodyId}\n        ref={ref}\n        __css={styles.body}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\"\n}\nexport interface PopoverFooterProps extends PropsOf<typeof chakra.footer> {}\n\nexport const PopoverFooter: React.FC<PopoverFooterProps> = (props) => {\n  const styles = useStyles()\n  return (\n    <chakra.footer\n      {...props}\n      className={cx(\"chakra-popover__footer\", props.className)}\n      __css={styles.footer}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\"\n}\n\nexport type PopoverCloseButtonProps = CloseButtonProps\n\nexport const PopoverCloseButton: React.FC<CloseButtonProps> = (props) => {\n  const { onClose } = usePopoverContext()\n  return (\n    <CloseButton\n      size=\"sm\"\n      onClick={onClose}\n      position=\"absolute\"\n      borderRadius=\"md\"\n      top=\"0.25rem\"\n      right=\"0.5rem\"\n      padding=\"0.5rem\"\n      {...props}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\"\n}\n\nexport interface PopoverArrowProps extends PropsOf<typeof chakra.div> {}\n\nexport const PopoverArrow: React.FC<PopoverArrowProps> = (props) => {\n  const { getArrowProps } = usePopoverContext()\n  const arrowProps = getArrowProps(props)\n\n  const styles = useStyles()\n  const arrowStyles = {\n    bg: \"inherit\",\n    ...styles.arrow,\n  }\n\n  return (\n    <chakra.div\n      {...arrowProps}\n      className={cx(\"chakra-popover__arrow\", props.className)}\n      __css={arrowStyles}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\"\n}\n"],"file":"popover.js"}