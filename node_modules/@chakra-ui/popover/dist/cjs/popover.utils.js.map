{"version":3,"sources":["../../src/popover.utils.ts"],"names":["useFocusOnHide","popoverRef","options","isFocusableRef","focusRef","autoFocus","visible","trigger","shouldFocus","onPointerDown","event","target","prevent","current","contains","useFocusOnShow","firstTabbable"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AASA;;;;;;;AAOO,SAASA,cAAT,CACLC,UADK,EAELC,OAFK,EAGL;AACA,MAAMC,cAAc,GAAG,mBAAO,KAAP,CAAvB;AADA,MAEQC,QAFR,GAEkDF,OAFlD,CAEQE,QAFR;AAAA,MAEkBC,SAFlB,GAEkDH,OAFlD,CAEkBG,SAFlB;AAAA,MAE6BC,OAF7B,GAEkDJ,OAFlD,CAE6BI,OAF7B;AAAA,MAEsCC,OAFtC,GAEkDL,OAFlD,CAEsCK,OAFtC;AAIA,MAAMC,WAAW,GAAGH,SAAS,IAAI,CAACC,OAAd,IAAyBC,OAAO,KAAK,OAAzD;;AAEA,MAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAuB;AAC3C,QAAI,CAACR,OAAO,CAACI,OAAb,EAAsB;AACtB,QAAMK,MAAM,GAAGD,KAAK,CAACC,MAArB;AAEA,QAAMC,OAAO,GACX,wBAAYD,MAAZ,KACAA,MAAM,KAAKP,QAAQ,CAACS,OADpB,IAEA,CAAEZ,UAAU,CAACY,OAAZ,CAAoCC,QAApC,CAA6CH,MAA7C,CAHH;;AAKA,QAAIC,OAAJ,EAAa;AACXT,MAAAA,cAAc,CAACU,OAAf,GAAyB,IAAzB;AACD;AACF,GAZD;;AAcA,+BAAiB,WAAjB,EAA8BJ,aAA9B;AACA,+BAAiB,YAAjB,EAA+BA,aAA/B;AAEA,8BAAgB,YAAM;AACpB,WAAO,YAAM;AACX,UAAI,CAACH,OAAL,EAAc;AACZH,QAAAA,cAAc,CAACU,OAAf,GAAyB,KAAzB;AACD;AACF,KAJD;AAKD,GAND,EAMG,CAACP,OAAD,CANH;AAQA;;;;;AAIA,8BAAgB,YAAM;AACpB,QAAI,CAACE,WAAD,IAAgB,CAACP,UAAU,CAACY,OAAhC,EAAyC;AAEzC,QAAIV,cAAc,CAACU,OAAnB,EAA4B;;AAE5B,QAAIT,QAAQ,CAACS,OAAb,EAAsB;AACpB,wBAAMT,QAAQ,CAACS,OAAf;AACD;AACF,GARD,EAQG,CAACR,SAAD,EAAYD,QAAZ,EAAsBE,OAAtB,EAA+BL,UAA/B,EAA2CO,WAA3C,CARH;AASD;;AASD;;;;;;;AAOO,SAASO,cAAT,CACLd,UADK,EAELC,OAFK,EAGL;AAAA,MACQI,OADR,GACkDJ,OADlD,CACQI,OADR;AAAA,MACiBD,SADjB,GACkDH,OADlD,CACiBG,SADjB;AAAA,MAC4BD,QAD5B,GACkDF,OADlD,CAC4BE,QAD5B;AAAA,MACsCG,OADtC,GACkDL,OADlD,CACsCK,OADtC;AAGA;;;;;AAIA,8BAAgB,YAAM;AACpB,QAAIA,OAAO,KAAK,OAAhB,EAAyB,OADL,CAGpB;;AACA,QAAI,CAACF,SAAD,IAAcJ,UAAU,CAACY,OAA7B,EAAsC;AACpC,wBAAMZ,UAAU,CAACY,OAAjB;AACA;AACD;;AAED,QAAML,WAAW,GAAGF,OAAO,IAAID,SAA/B;AAEA,QAAI,CAACG,WAAL,EAAkB;;AAElB,QAAIJ,QAAJ,oBAAIA,QAAQ,CAAES,OAAd,EAAuB;AACrB,wBAAMT,QAAQ,CAACS,OAAf;AACA;AACD;;AAED,QAAIZ,UAAU,CAACY,OAAf,EAAwB;AACtB,UAAMG,aAAa,GAAG,+BAAmBf,UAAU,CAACY,OAA9B,EAAuC,IAAvC,CAAtB;AACA,wBAAMG,aAAN,WAAMA,aAAN,GAAuBf,UAAU,CAACY,OAAlC;AACD;AACF,GAtBD,EAsBG,CAACP,OAAD,EAAUD,SAAV,EAAqBJ,UAArB,EAAiCG,QAAjC,CAtBH;AAuBD","sourcesContent":["import { useUpdateEffect, useEventListener } from \"@chakra-ui/hooks\"\nimport { focus, getFirstTabbableIn, isFocusable } from \"@chakra-ui/utils\"\nimport { RefObject, useRef } from \"react\"\n\nexport interface UseFocusOnHideOptions {\n  focusRef: RefObject<HTMLElement>\n  autoFocus?: boolean\n  visible?: boolean\n  trigger?: \"hover\" | \"click\"\n}\n\n/**\n * Popover hook to manage the focus when the popover closes or hides.\n *\n * We either want to return focus back to the popover trigger or\n * let focus proceed normally if user moved to another interactive\n * element in the viewport.\n */\nexport function useFocusOnHide(\n  popoverRef: RefObject<HTMLElement>,\n  options: UseFocusOnHideOptions,\n) {\n  const isFocusableRef = useRef(false)\n  const { focusRef, autoFocus, visible, trigger } = options\n\n  const shouldFocus = autoFocus && !visible && trigger === \"click\"\n\n  const onPointerDown = (event: MouseEvent) => {\n    if (!options.visible) return\n    const target = event.target as HTMLElement\n\n    const prevent =\n      isFocusable(target) &&\n      target !== focusRef.current &&\n      !(popoverRef.current as HTMLElement).contains(target)\n\n    if (prevent) {\n      isFocusableRef.current = true\n    }\n  }\n\n  useEventListener(\"mousedown\", onPointerDown)\n  useEventListener(\"touchstart\", onPointerDown)\n\n  useUpdateEffect(() => {\n    return () => {\n      if (!visible) {\n        isFocusableRef.current = false\n      }\n    }\n  }, [visible])\n\n  /**\n   * Using updateEffect here to allow effect to run only when\n   * `options.visible` changes, not on mount\n   */\n  useUpdateEffect(() => {\n    if (!shouldFocus || !popoverRef.current) return\n\n    if (isFocusableRef.current) return\n\n    if (focusRef.current) {\n      focus(focusRef.current)\n    }\n  }, [autoFocus, focusRef, visible, popoverRef, shouldFocus])\n}\n\ninterface UseFocusOnShowOptions {\n  autoFocus?: boolean\n  visible?: boolean\n  focusRef?: RefObject<HTMLElement>\n  trigger?: \"hover\" | \"click\"\n}\n\n/**\n * Popover hook to manage the focus when the popover opens.\n *\n * We either want to focus the popover content itself since it\n * has `tabIndex = -1`, or focus the first interactive element\n * within the popover content.\n */\nexport function useFocusOnShow(\n  popoverRef: RefObject<HTMLElement>,\n  options: UseFocusOnShowOptions,\n) {\n  const { visible, autoFocus, focusRef, trigger } = options\n\n  /**\n   * Using updateEffect here to allow effect to run only when\n   * `options.visible` changes, not on mount\n   */\n  useUpdateEffect(() => {\n    if (trigger === \"hover\") return\n\n    // if `autoFocus` is false, move focus to the `PopoverContent`\n    if (!autoFocus && popoverRef.current) {\n      focus(popoverRef.current)\n      return\n    }\n\n    const shouldFocus = visible && autoFocus\n\n    if (!shouldFocus) return\n\n    if (focusRef?.current) {\n      focus(focusRef.current)\n      return\n    }\n\n    if (popoverRef.current) {\n      const firstTabbable = getFirstTabbableIn(popoverRef.current, true)\n      focus(firstTabbable ?? popoverRef.current)\n    }\n  }, [visible, autoFocus, popoverRef, focusRef])\n}\n"],"file":"popover.utils.js"}