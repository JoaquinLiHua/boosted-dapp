{"version":3,"sources":["../../src/use-popover.ts"],"names":["useBoolean","useDisclosure","useIds","usePopper","useColorModeValue","useToken","callAllHandlers","mergeRefs","useRef","useCallback","useEffect","useFocusOnHide","useFocusOnShow","useInteractOutside","TRIGGER_TYPE","click","hover","usePopover","props","closeOnBlur","closeOnEsc","initialFocusRef","placement","placementProp","gutter","id","arrowSize","returnFocus","autoFocus","arrowShadowColor","modifiers","trigger","openDelay","closeDelay","isLazy","isOpen","onClose","onOpen","onToggle","triggerRef","popoverRef","isHoveringRef","hasHeader","setHasHeader","hasBody","setHasBody","triggerId","popoverId","headerId","bodyId","fallbackShadowColor","shadowColor","arrowColor","popper","reference","arrow","forceUpdate","visible","focusRef","ref","onInteractOutside","event","current","contains","target","getPopoverProps","popoverProps","children","tabIndex","hidden","role","onKeyDown","key","style","undefined","onMouseEnter","onMouseLeave","setTimeout","getArrowProps","openTimeout","closeTimeout","getTriggerProps","triggerProps","onClick","onFocus","onBlur","window","clearTimeout"],"mappings":"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","sourcesContent":["import { useBoolean, useDisclosure, useIds } from \"@chakra-ui/hooks\"\nimport { Placement, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { useColorModeValue, useToken } from \"@chakra-ui/system\"\nimport { callAllHandlers, Dict, mergeRefs } from \"@chakra-ui/utils\"\nimport {\n  useRef,\n  RefObject,\n  useCallback,\n  useEffect,\n  Ref,\n  KeyboardEvent,\n} from \"react\"\nimport { useFocusOnHide, useFocusOnShow } from \"./popover.utils\"\nimport { useInteractOutside } from \"@react-aria/interactions\"\n\nconst TRIGGER_TYPE = {\n  click: \"click\",\n  hover: \"hover\",\n} as const\n\nexport interface UsePopoverProps {\n  /**\n   * The html `id` attribute of the popover.\n   * If not provided, we generate a unique id.\n   *\n   * This `id` is also used to auto-generate the `aria-labelledby`\n   * and `aria-decribedby` attributes that points to the `PopoverHeader` and `PopoverBody`\n   */\n  id?: string\n  /**\n   * If `true`, the popover will be opened in controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: RefObject<any>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover\n   * when it closes\n   */\n  returnFocus?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element\n   * when the popover opens\n   */\n  autoFocus?: boolean\n  /**\n   * The gap (in pixels) to apply between the popover and the target.\n   * Used by `popper.js`\n   */\n  gutter?: number\n  /**\n   * The placment of the popover\n   */\n  placement?: Placement\n  /**\n   * If `true`, the popover will close when you blur out it by\n   * clicking outside or tabbing out\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the popover opens\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void\n  /**\n   * The size of the popover arrow\n   */\n  arrowSize?: number\n  /**\n   * The `box-shadow` of the popover arrow\n   */\n  arrowShadowColor?: string\n  /**\n   * The Popper.js modifiers to use.\n   */\n  modifiers?: UsePopperProps[\"modifiers\"]\n  /**\n   * The interaction that triggers the popover.\n   *\n   * `hover` - means the popover will open when you hover with mouse or\n   * focus with keyboard on the popover trigger\n   *\n   * `click` - means the popover will open on click or\n   * press `Enter` to `Space` on keyboard\n   */\n  trigger?: keyof typeof TRIGGER_TYPE\n  openDelay?: number\n  closeDelay?: number\n  /**\n   * Performance 🚀:\n   * If `true`, the PopoverContent rendering will be deferred\n   * until the popover is open.\n   */\n  isLazy?: boolean\n}\n\nexport function usePopover(props: UsePopoverProps = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    placement: placementProp,\n    gutter,\n    id,\n    arrowSize,\n    returnFocus = true,\n    autoFocus = true,\n    arrowShadowColor,\n    modifiers,\n    trigger = TRIGGER_TYPE.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n  } = props\n\n  const { isOpen, onClose, onOpen, onToggle } = useDisclosure(props)\n\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const isHoveringRef = useRef(false)\n\n  const [hasHeader, setHasHeader] = useBoolean()\n  const [hasBody, setHasBody] = useBoolean()\n\n  const [triggerId, popoverId, headerId, bodyId] = useIds(\n    id,\n    \"popover-trigger\",\n    \"popover-content\",\n    \"popover-header\",\n    \"popover-body\",\n  )\n\n  const fallbackShadowColor = useColorModeValue(\"gray.200\", \"whiteAlpha.300\")\n  const shadowColor = arrowShadowColor ?? fallbackShadowColor\n  const arrowColor = useToken(\"colors\", shadowColor, arrowShadowColor)\n\n  const { popper, reference, arrow } = usePopper({\n    placement: placementProp,\n    gutter,\n    forceUpdate: isOpen,\n    arrowSize,\n    arrowShadowColor: arrowColor,\n    modifiers,\n  })\n\n  useFocusOnHide(popoverRef, {\n    autoFocus: returnFocus,\n    visible: isOpen,\n    focusRef: triggerRef,\n    trigger,\n  })\n\n  useFocusOnShow(popoverRef, {\n    autoFocus: autoFocus,\n    visible: isOpen,\n    focusRef: initialFocusRef,\n    trigger,\n  })\n\n  useInteractOutside({\n    ref: popoverRef,\n    onInteractOutside: (event) => {\n      if (\n        trigger === TRIGGER_TYPE.click &&\n        closeOnBlur &&\n        !triggerRef.current?.contains(event.target as HTMLElement)\n      ) {\n        onClose()\n      }\n    },\n  })\n\n  const getPopoverProps = useCallback(\n    (props: Dict = {}, ref: Ref<any> = null) => {\n      const popoverProps: Dict = {\n        ...props,\n        children: isLazy ? (isOpen ? props.children : null) : props.children,\n        id: popoverId,\n        tabIndex: -1,\n        hidden: !isOpen,\n        role: \"dialog\",\n        onKeyDown: callAllHandlers(props.onKeyDown, (event: KeyboardEvent) => {\n          if (closeOnEsc && event.key === \"Escape\") {\n            onClose()\n          }\n        }),\n        ref: mergeRefs(popoverRef, popper.ref, ref),\n        style: { ...props.style, ...popper.style },\n        \"aria-labelledby\": hasHeader ? headerId : undefined,\n        \"aria-describedby\": hasBody ? bodyId : undefined,\n      }\n\n      if (trigger === TRIGGER_TYPE.hover) {\n        popoverProps.role = \"tooltip\"\n        popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n        popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n          setTimeout(onClose, closeDelay)\n        })\n      }\n\n      return popoverProps\n    },\n    [\n      popoverId,\n      isOpen,\n      isLazy,\n      popper.ref,\n      popper.style,\n      hasHeader,\n      headerId,\n      hasBody,\n      bodyId,\n      trigger,\n      closeOnEsc,\n      onClose,\n      closeDelay,\n    ],\n  )\n\n  const getArrowProps = useCallback(\n    (props: Dict = {}, ref: Ref<any> = null) => ({\n      ...props,\n      ref: mergeRefs(arrow.ref, ref),\n      style: {\n        ...props.style,\n        ...arrow.style,\n      },\n    }),\n    [arrow.ref, arrow.style],\n  )\n\n  const openTimeout = useRef<number>()\n  const closeTimeout = useRef<number>()\n\n  const getTriggerProps = useCallback(\n    (props: Dict = {}, ref: Ref<any> = null) => {\n      const triggerProps: Dict = {\n        ...props,\n        id: triggerId,\n        ref: mergeRefs(triggerRef, reference.ref, ref),\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": popoverId,\n      }\n\n      if (trigger === TRIGGER_TYPE.click) {\n        triggerProps.onClick = callAllHandlers(props.onClick, onToggle)\n      }\n\n      if (trigger === TRIGGER_TYPE.hover) {\n        /**\n         * Any content that shows on pointer hover should also show on keyboard focus.\n         * Consider focus and blur to be the `hover` for keyboard users.\n         *\n         * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n         */\n        triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen)\n        triggerProps.onBlur = callAllHandlers(props.onBlur, onClose)\n\n        /**\n         * Any content that shows on hover or focus must be dismissible.\n         * This case pressing `Escape` will dismiss the popover\n         */\n        triggerProps.onKeyDown = callAllHandlers(\n          props.onKeyDown,\n          (event: KeyboardEvent) => {\n            if (event.key === \"Escape\") {\n              onClose()\n            }\n          },\n        )\n\n        triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(onOpen, openDelay)\n        })\n\n        triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (isHoveringRef.current === false) {\n              onClose()\n            }\n          }, closeDelay)\n        })\n      }\n\n      return triggerProps\n    },\n    [\n      openDelay,\n      closeDelay,\n      isOpen,\n      onToggle,\n      popoverId,\n      reference.ref,\n      triggerId,\n      trigger,\n      onOpen,\n      onClose,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current)\n      }\n\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current)\n      }\n    }\n  }, [])\n\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    hasHeader,\n    setHasHeader,\n    bodyId,\n    hasBody,\n    setHasBody,\n    getArrowProps,\n    getTriggerProps,\n    getPopoverProps,\n  }\n}\n\nexport type UsePopoverReturn = ReturnType<typeof usePopover>\n"],"file":"use-popover.js"}