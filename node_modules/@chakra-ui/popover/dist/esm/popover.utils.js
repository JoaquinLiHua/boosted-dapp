import { useUpdateEffect, useEventListener } from "@chakra-ui/hooks";
import { focus, getFirstTabbableIn, isFocusable } from "@chakra-ui/utils";
import { useRef } from "react";

/**
 * Popover hook to manage the focus when the popover closes or hides.
 *
 * We either want to return focus back to the popover trigger or
 * let focus proceed normally if user moved to another interactive
 * element in the viewport.
 */
export function useFocusOnHide(popoverRef, options) {
  var isFocusableRef = useRef(false);
  var {
    focusRef,
    autoFocus,
    visible,
    trigger
  } = options;
  var shouldFocus = autoFocus && !visible && trigger === "click";

  var onPointerDown = event => {
    if (!options.visible) return;
    var target = event.target;
    var prevent = isFocusable(target) && target !== focusRef.current && !popoverRef.current.contains(target);

    if (prevent) {
      isFocusableRef.current = true;
    }
  };

  useEventListener("mousedown", onPointerDown);
  useEventListener("touchstart", onPointerDown);
  useUpdateEffect(() => {
    return () => {
      if (!visible) {
        isFocusableRef.current = false;
      }
    };
  }, [visible]);
  /**
   * Using updateEffect here to allow effect to run only when
   * `options.visible` changes, not on mount
   */

  useUpdateEffect(() => {
    if (!shouldFocus || !popoverRef.current) return;
    if (isFocusableRef.current) return;

    if (focusRef.current) {
      focus(focusRef.current);
    }
  }, [autoFocus, focusRef, visible, popoverRef, shouldFocus]);
}

/**
 * Popover hook to manage the focus when the popover opens.
 *
 * We either want to focus the popover content itself since it
 * has `tabIndex = -1`, or focus the first interactive element
 * within the popover content.
 */
export function useFocusOnShow(popoverRef, options) {
  var {
    visible,
    autoFocus,
    focusRef,
    trigger
  } = options;
  /**
   * Using updateEffect here to allow effect to run only when
   * `options.visible` changes, not on mount
   */

  useUpdateEffect(() => {
    if (trigger === "hover") return; // if `autoFocus` is false, move focus to the `PopoverContent`

    if (!autoFocus && popoverRef.current) {
      focus(popoverRef.current);
      return;
    }

    var shouldFocus = visible && autoFocus;
    if (!shouldFocus) return;

    if (focusRef == null ? void 0 : focusRef.current) {
      focus(focusRef.current);
      return;
    }

    if (popoverRef.current) {
      var firstTabbable = getFirstTabbableIn(popoverRef.current, true);
      focus(firstTabbable != null ? firstTabbable : popoverRef.current);
    }
  }, [visible, autoFocus, popoverRef, focusRef]);
}
//# sourceMappingURL=popover.utils.js.map