{"version":3,"sources":["../../src/use-editable.ts"],"names":["useControllableState","useUpdateEffect","callAllHandlers","createOnKeyDown","isEmpty","mergeRefs","ariaAttr","useState","useCallback","useRef","useEditable","props","onChange","onChangeProp","onCancel","onCancelProp","onSubmit","onSubmitProp","value","valueProp","isDisabled","defaultValue","startWithEditView","isPreviewFocusable","submitOnBlur","selectAllOnFocus","placeholder","onEdit","onEditProp","htmlProps","defaultIsEditing","Boolean","isEditing","setIsEditing","setValue","shouldUpdate","prev","next","prevValue","setPrevValue","inputRef","previewRef","editButtonRef","isInteractive","current","focus","select","event","target","onKeyDown","keyMap","Escape","Enter","shiftKey","metaKey","isValueEmpty","getTabIndex","shouldHaveTabIndex","undefined","onBlur","getPreviewProps","ref","children","hidden","tabIndex","onFocus","getInputProps","disabled","getEditButtonProps","type","onClick","getSubmitButtonProps","getCancelButtonProps"],"mappings":"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","sourcesContent":["import { useControllableState, useUpdateEffect } from \"@chakra-ui/hooks\"\nimport {\n  callAllHandlers,\n  createOnKeyDown,\n  Dict,\n  isEmpty,\n  mergeRefs,\n  ariaAttr,\n} from \"@chakra-ui/utils\"\nimport { useState, useCallback, ChangeEvent, useRef, Ref } from \"react\"\nimport { PropsOf } from \"@chakra-ui/system\"\n\nexport interface UseEditableProps {\n  /**\n   * The value of the Editable in both edit & preview mode\n   */\n  value?: string\n  /**\n   * The initial value of the Editable in both edit & preview mode\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the Editable will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the Editable will start with edit mode by default.\n   */\n  startWithEditView?: boolean\n  /**\n   * If `true`, the read only view, has a `tabIndex` set to `0`\n   * so it can recieve focus via the keyboard or click.\n   * @default true\n   */\n  isPreviewFocusable?: boolean\n  /**\n   * If `true`, it'll update the value onBlur and turn off the edit mode.\n   * @default true\n   */\n  submitOnBlur?: boolean\n  /**\n   * Callback invoked when user changes input.\n   */\n  onChange?: (nextValue: string) => void\n  /**\n   * Callback invoked when user cancels input with the `Esc` key.\n   * It provides the last confirmed value as argument.\n   */\n  onCancel?: (previousValue: string) => void\n  /**\n   * Callback invoked when user confirms value with `enter` key or by blurring input.\n   */\n  onSubmit?: (nextValue: string) => void\n  /**\n   * Callback invoked once the user enters edit mode.\n   */\n  onEdit?: () => void\n  /**\n   * If `true`, the input's text will be highlighted on focus.\n   * @default true\n   */\n  selectAllOnFocus?: boolean\n  /**\n   * The placeholder text when the value is empty.\n   */\n  placeholder?: string\n}\n\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/components/useEditable\n */\nexport function useEditable(props: UseEditableProps = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditProp,\n    ...htmlProps\n  } = props\n\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled)\n\n  const [isEditing, setIsEditing] = useState(defaultIsEditing)\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp,\n    shouldUpdate: (prev, next) => prev !== next,\n  })\n\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n  const [prevValue, setPrevValue] = useState(value)\n\n  /**\n   * Ref to help focus the input in edit mode\n   */\n  const inputRef = useRef<HTMLInputElement>(null)\n  const previewRef = useRef<any>(null)\n\n  const editButtonRef = useRef<HTMLButtonElement>(null)\n\n  const isInteractive = !isEditing || !isDisabled\n\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      editButtonRef.current?.focus()\n      return\n    }\n\n    if (selectAllOnFocus) {\n      inputRef.current?.select()\n    } else {\n      inputRef.current?.focus()\n    }\n\n    onEditProp?.()\n  }, [isEditing, onEditProp, selectAllOnFocus])\n\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true)\n    }\n  }, [isInteractive])\n\n  const onCancel = useCallback(() => {\n    setIsEditing(false)\n    setValue(prevValue)\n    onCancelProp?.(prevValue)\n  }, [onCancelProp, setValue, prevValue])\n\n  const onSubmit = useCallback(() => {\n    setIsEditing(false)\n    setPrevValue(value)\n    onSubmitProp?.(value)\n  }, [value, onSubmitProp])\n\n  const onChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      setValue(event.target.value)\n    },\n    [setValue],\n  )\n\n  const onKeyDown = createOnKeyDown({\n    keyMap: {\n      Escape: onCancel,\n      Enter: (event) => {\n        if (!event.shiftKey && !event.metaKey) {\n          onSubmit()\n        }\n      },\n    },\n  })\n\n  const isValueEmpty = isEmpty(value)\n\n  const getTabIndex = () => {\n    const shouldHaveTabIndex = isInteractive && isPreviewFocusable\n    return shouldHaveTabIndex ? 0 : undefined\n  }\n\n  const onBlur = useCallback(() => {\n    if (submitOnBlur) {\n      onSubmit()\n    }\n  }, [submitOnBlur, onSubmit])\n\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps: (props: Dict = {}, ref: Ref<any> = null) => ({\n      ...props,\n      ref: mergeRefs(ref, previewRef),\n      children: isValueEmpty ? placeholder : value,\n      hidden: isEditing,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      tabIndex: getTabIndex(),\n      onFocus: callAllHandlers(props.onFocus, onEdit),\n    }),\n    getInputProps: (props: Dict = {}, ref: Ref<any> = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    }),\n    getEditButtonProps: (\n      props: Dict = {},\n      ref: Ref<any> = null,\n    ): PropsOf<\"button\"> => ({\n      \"aria-label\": \"Edit\",\n      ...props,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef),\n    }),\n    getSubmitButtonProps: (\n      props: Dict = {},\n      ref: Ref<any> = null,\n    ): PropsOf<\"button\"> => ({\n      \"aria-label\": \"Submit\",\n      ...props,\n      ref,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onSubmit),\n    }),\n    getCancelButtonProps: (\n      props: Dict = {},\n      ref: Ref<any> = null,\n    ): PropsOf<\"button\"> => ({\n      \"aria-label\": \"Cancel\",\n      ...props,\n      ref,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onCancel),\n    }),\n    htmlProps,\n  }\n}\n\nexport type UseEditableReturn = ReturnType<typeof useEditable>\n"],"file":"use-editable.js"}