{"version":3,"sources":["../../src/use-editable.ts"],"names":["useEditable","props","onChangeProp","onChange","onCancelProp","onCancel","onSubmitProp","onSubmit","valueProp","value","isDisabled","defaultValue","startWithEditView","isPreviewFocusable","submitOnBlur","selectAllOnFocus","placeholder","onEditProp","onEdit","htmlProps","defaultIsEditing","Boolean","isEditing","setIsEditing","shouldUpdate","prev","next","setValue","prevValue","setPrevValue","inputRef","previewRef","editButtonRef","isInteractive","current","focus","select","event","target","onKeyDown","keyMap","Escape","Enter","shiftKey","metaKey","isValueEmpty","getTabIndex","shouldHaveTabIndex","undefined","onBlur","getPreviewProps","ref","children","hidden","tabIndex","onFocus","getInputProps","disabled","getEditButtonProps","type","onClick","getSubmitButtonProps","getCancelButtonProps"],"mappings":"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","sourcesContent":["import { useControllableState, useUpdateEffect } from \"@chakra-ui/hooks\"\nimport {\n  callAllHandlers,\n  createOnKeyDown,\n  Dict,\n  isEmpty,\n  mergeRefs,\n  ariaAttr,\n} from \"@chakra-ui/utils\"\nimport { useState, useCallback, ChangeEvent, useRef, Ref } from \"react\"\nimport { PropsOf } from \"@chakra-ui/system\"\n\nexport interface UseEditableProps {\n  /**\n   * The value of the Editable in both edit & preview mode\n   */\n  value?: string\n  /**\n   * The initial value of the Editable in both edit & preview mode\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the Editable will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the Editable will start with edit mode by default.\n   */\n  startWithEditView?: boolean\n  /**\n   * If `true`, the read only view, has a `tabIndex` set to `0`\n   * so it can recieve focus via the keyboard or click.\n   * @default true\n   */\n  isPreviewFocusable?: boolean\n  /**\n   * If `true`, it'll update the value onBlur and turn off the edit mode.\n   * @default true\n   */\n  submitOnBlur?: boolean\n  /**\n   * Callback invoked when user changes input.\n   */\n  onChange?: (nextValue: string) => void\n  /**\n   * Callback invoked when user cancels input with the `Esc` key.\n   * It provides the last confirmed value as argument.\n   */\n  onCancel?: (previousValue: string) => void\n  /**\n   * Callback invoked when user confirms value with `enter` key or by blurring input.\n   */\n  onSubmit?: (nextValue: string) => void\n  /**\n   * Callback invoked once the user enters edit mode.\n   */\n  onEdit?: () => void\n  /**\n   * If `true`, the input's text will be highlighted on focus.\n   * @default true\n   */\n  selectAllOnFocus?: boolean\n  /**\n   * The placeholder text when the value is empty.\n   */\n  placeholder?: string\n}\n\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/components/useEditable\n */\nexport function useEditable(props: UseEditableProps = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditProp,\n    ...htmlProps\n  } = props\n\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled)\n\n  const [isEditing, setIsEditing] = useState(defaultIsEditing)\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp,\n    shouldUpdate: (prev, next) => prev !== next,\n  })\n\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n  const [prevValue, setPrevValue] = useState(value)\n\n  /**\n   * Ref to help focus the input in edit mode\n   */\n  const inputRef = useRef<HTMLInputElement>(null)\n  const previewRef = useRef<any>(null)\n\n  const editButtonRef = useRef<HTMLButtonElement>(null)\n\n  const isInteractive = !isEditing || !isDisabled\n\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      editButtonRef.current?.focus()\n      return\n    }\n\n    if (selectAllOnFocus) {\n      inputRef.current?.select()\n    } else {\n      inputRef.current?.focus()\n    }\n\n    onEditProp?.()\n  }, [isEditing, onEditProp, selectAllOnFocus])\n\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true)\n    }\n  }, [isInteractive])\n\n  const onCancel = useCallback(() => {\n    setIsEditing(false)\n    setValue(prevValue)\n    onCancelProp?.(prevValue)\n  }, [onCancelProp, setValue, prevValue])\n\n  const onSubmit = useCallback(() => {\n    setIsEditing(false)\n    setPrevValue(value)\n    onSubmitProp?.(value)\n  }, [value, onSubmitProp])\n\n  const onChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      setValue(event.target.value)\n    },\n    [setValue],\n  )\n\n  const onKeyDown = createOnKeyDown({\n    keyMap: {\n      Escape: onCancel,\n      Enter: (event) => {\n        if (!event.shiftKey && !event.metaKey) {\n          onSubmit()\n        }\n      },\n    },\n  })\n\n  const isValueEmpty = isEmpty(value)\n\n  const getTabIndex = () => {\n    const shouldHaveTabIndex = isInteractive && isPreviewFocusable\n    return shouldHaveTabIndex ? 0 : undefined\n  }\n\n  const onBlur = useCallback(() => {\n    if (submitOnBlur) {\n      onSubmit()\n    }\n  }, [submitOnBlur, onSubmit])\n\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps: (props: Dict = {}, ref: Ref<any> = null) => ({\n      ...props,\n      ref: mergeRefs(ref, previewRef),\n      children: isValueEmpty ? placeholder : value,\n      hidden: isEditing,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      tabIndex: getTabIndex(),\n      onFocus: callAllHandlers(props.onFocus, onEdit),\n    }),\n    getInputProps: (props: Dict = {}, ref: Ref<any> = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    }),\n    getEditButtonProps: (\n      props: Dict = {},\n      ref: Ref<any> = null,\n    ): PropsOf<\"button\"> => ({\n      \"aria-label\": \"Edit\",\n      ...props,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef),\n    }),\n    getSubmitButtonProps: (\n      props: Dict = {},\n      ref: Ref<any> = null,\n    ): PropsOf<\"button\"> => ({\n      \"aria-label\": \"Submit\",\n      ...props,\n      ref,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onSubmit),\n    }),\n    getCancelButtonProps: (\n      props: Dict = {},\n      ref: Ref<any> = null,\n    ): PropsOf<\"button\"> => ({\n      \"aria-label\": \"Cancel\",\n      ...props,\n      ref,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onCancel),\n    }),\n    htmlProps,\n  }\n}\n\nexport type UseEditableReturn = ReturnType<typeof useEditable>\n"],"file":"use-editable.js"}