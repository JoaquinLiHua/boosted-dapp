{"version":3,"sources":["../../src/object.ts"],"names":["merge","omit","object","keys","result","key","includes","pick","split","picked","omitted","get","obj","path","fallback","index","length","undefined","getWithDefault","scale","filterUndefined","objectKeys","Object"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,cAAlB;AAEA,OAAO,SAASC,IAAT,CAAiDC,MAAjD,EAA4DC,IAA5D,EAAuE;AAC5E,MAAMC,MAAY,GAAG,EAArB;;AAEA,OAAK,IAAMC,GAAX,IAAkBH,MAAlB,EAA0B;AACxB,QAAIC,IAAI,CAACG,QAAL,CAAcD,GAAd,CAAJ,EAA+B;AAC/BD,IAAAA,MAAM,CAACC,GAAD,CAAN,GAAcH,MAAM,CAACG,GAAD,CAApB;AACD;;AAED,SAAOD,MAAP;AACD;AAED,OAAO,SAASG,IAAT,CAAiDL,MAAjD,EAA4DC,IAA5D,EAAuE;AAC5E,MAAMC,MAAM,GAAG,EAAf;;AACA,OAAK,IAAMC,GAAX,IAAkBF,IAAlB,EAAwB;AACtB,QAAIE,GAAG,IAAIH,MAAX,EAAmB;AACjBE,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcH,MAAM,CAACG,GAAD,CAApB;AACD;AACF;;AACD,SAAOD,MAAP;AACD;AAED,OAAO,SAASI,KAAT,CAAkDN,MAAlD,EAA6DC,IAA7D,EAAwE;AAC7E,MAAMM,MAAY,GAAG,EAArB;AACA,MAAMC,OAAa,GAAG,EAAtB;;AAEA,OAAK,IAAML,GAAX,IAAkBH,MAAlB,EAA0B;AACxB,QAAIC,IAAI,CAACG,QAAL,CAAcD,GAAd,CAAJ,EAAgC;AAC9BI,MAAAA,MAAM,CAACJ,GAAD,CAAN,GAAcH,MAAM,CAACG,GAAD,CAApB;AACD,KAFD,MAEO;AACLK,MAAAA,OAAO,CAACL,GAAD,CAAP,GAAeH,MAAM,CAACG,GAAD,CAArB;AACD;AACF;;AAED,SAAO,CAACI,MAAD,EAASC,OAAT,CAAP;AACD;AAED;;;;;;;AAMA,OAAO,SAASC,GAAT,CACLC,GADK,EAELC,IAFK,EAGLC,QAHK,EAILC,KAJK,EAKL;AAAA;;AACA;AACAF,EAAAA,IAAI,2BAAIA,IAAJ,qBAAI,MAAML,KAAV,oBAAI,MAAMA,KAAN,CAAc,GAAd,CAAJ,0BAA0B,CAACK,IAAD,CAA9B;;AACA,OAAKE,KAAK,GAAG,CAAb,EAAgBA,KAAK,GAAGF,IAAI,CAACG,MAA7B,EAAqCD,KAAK,EAA1C,EAA8C;AAC5CH,IAAAA,GAAG,GAAGA,GAAG,GAAGA,GAAG,CAACC,IAAI,CAACE,KAAD,CAAL,CAAN,GAAsBE,SAA/B;AACD;;AACD,SAAOL,GAAG,KAAKK,SAAR,GAAoBH,QAApB,GAA+BF,GAAtC;AACD;AAED;;;;;;;;AAOA,OAAO,SAASM,cAAT,CAAwBL,IAAxB,EAAmCM,KAAnC,EAA+C;AACpD,SAAOR,GAAG,CAACQ,KAAD,EAAQN,IAAR,EAAcA,IAAd,CAAV;AACD;AAED,SAASb,KAAT;AAEA,OAAO,SAASoB,eAAT,CAAyBlB,MAAzB,EAAuC;AAC5C,MAAME,MAAM,gBAAQF,MAAR,CAAZ;;AACA,OAAK,IAAMG,GAAX,IAAkBD,MAAlB,EAA0B;AACxB,QAAIA,MAAM,CAACC,GAAD,CAAN,IAAe,IAAnB,EAAyB;AACvB,aAAOD,MAAM,CAACC,GAAD,CAAb;AACD;AACF;;AACD,SAAOD,MAAP;AACD;AAED,OAAO,IAAMiB,UAAU,GAAoBT,GAAjB,IACvBU,MAAM,CAACnB,IAAP,CAAYS,GAAZ,CADI","sourcesContent":["import { Omit, Dict } from \"./types\"\nimport merge from \"lodash.merge\"\n\nexport function omit<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const result: Dict = {}\n\n  for (const key in object) {\n    if (keys.includes(key as any)) continue\n    result[key] = object[key]\n  }\n\n  return result as Omit<T, K>\n}\n\nexport function pick<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const result = {} as { [P in K]: T[P] }\n  for (const key of keys) {\n    if (key in object) {\n      result[key] = object[key]\n    }\n  }\n  return result\n}\n\nexport function split<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const picked: Dict = {}\n  const omitted: Dict = {}\n\n  for (const key in object) {\n    if (keys.includes(key as T[K])) {\n      picked[key] = object[key]\n    } else {\n      omitted[key] = object[key]\n    }\n  }\n\n  return [picked, omitted] as [{ [P in K]: T[P] }, Omit<T, K>]\n}\n\n/**\n * Get value from a deeply nested object using a string path\n * @param obj - the object\n * @param path - the string path\n * @param def  - the fallback value\n */\nexport function get(\n  obj: any,\n  path: string | number,\n  fallback?: any,\n  index?: number,\n) {\n  //@ts-ignore\n  path = (path?.split?.(\".\") ?? [path]) as string\n  for (index = 0; index < path.length; index++) {\n    obj = obj ? obj[path[index]] : undefined\n  }\n  return obj === undefined ? fallback : obj\n}\n\n/**\n * Get value from deeply nested object, based on path\n * It returns the path value if not found in object\n *\n * @param path - the string path or value\n * @param scale - the string path or value\n */\nexport function getWithDefault(path: any, scale: any) {\n  return get(scale, path, path)\n}\n\nexport { merge }\n\nexport function filterUndefined(object: Dict) {\n  const result = { ...object }\n  for (const key in result) {\n    if (result[key] == null) {\n      delete result[key]\n    }\n  }\n  return result\n}\n\nexport const objectKeys = <T extends Dict>(obj: T) =>\n  (Object.keys(obj) as unknown) as (keyof T)[]\n"],"file":"object.js"}