{"version":3,"sources":["../../src/function.ts"],"names":["memoize","isFunction","__DEV__","runIfFn","valueOrFn","args","callAllHandlers","fns","event","some","fn","defaultPrevented","once","result","apply","noop","warn","options","condition","message","console","error"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,aAApB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,aAApC;AAGA,OAAO,SAASC,OAAT,CACLC,SADK,EAGF;AAAA,oCADAC,IACA;AADAA,IAAAA,IACA;AAAA;;AACH,SAAOJ,UAAU,CAACG,SAAD,CAAV,GAAwBA,SAAS,CAAC,GAAGC,IAAJ,CAAjC,GAA6CD,SAApD;AACD;AAED,OAAO,SAASE,eAAT,GAEL;AAAA,qCADGC,GACH;AADGA,IAAAA,GACH;AAAA;;AACA,SAAO,UAAUC,KAAV,EAA0C;AAC/CD,IAAAA,GAAG,CAACE,IAAJ,CAAUC,EAAD,IAAQ;AACfA,MAAAA,EAAE,IAAIA,EAAE,CAACF,KAAD,CAAR;AACA,aAAOA,KAAK,IAAIA,KAAK,CAACG,gBAAtB;AACD,KAHD;AAID,GALD;AAMD;AAED,SAASX,OAAT;AAEA,OAAO,SAASY,IAAT,CAAcF,EAAd,EAAoC;AACzC,MAAIG,MAAJ;AAEA,SAAO,YAAqC;AAC1C,QAAIH,EAAJ,EAAQ;AAAA,yCADqBL,IACrB;AADqBA,QAAAA,IACrB;AAAA;;AACNQ,MAAAA,MAAM,GAAGH,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeT,IAAf,CAAT;AACAK,MAAAA,EAAE,GAAG,IAAL;AACD;;AAED,WAAOG,MAAP;AACD,GAPD;AAQD;AAED,OAAO,IAAME,IAAI,GAAG,MAAM,CAAE,CAArB;AAOP,OAAO,IAAMC,IAAI,GAAGJ,IAAI,CAAEK,OAAD,IAA6B;AACpD,MAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAyBF,OAA/B;;AACA,MAAIC,SAAS,IAAIhB,OAAjB,EAA0B;AACxBkB,IAAAA,OAAO,CAACJ,IAAR,CAAaG,OAAb;AACD;AACF,CALuB,CAAjB;AAOP,OAAO,IAAME,KAAK,GAAGT,IAAI,CAAEK,OAAD,IAA6B;AACrD,MAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAyBF,OAA/B;;AACA,MAAIC,SAAS,IAAIhB,OAAjB,EAA0B;AACxBkB,IAAAA,OAAO,CAACC,KAAR,CAAcF,OAAd;AACD;AACF,CALwB,CAAlB","sourcesContent":["import memoize from \"memoize-one\"\nimport { isFunction, __DEV__ } from \"./assertion\"\nimport { FunctionArguments } from \"./types\"\n\nexport function runIfFn<T, U>(\n  valueOrFn: T | ((...args: U[]) => T),\n  ...args: U[]\n): T {\n  return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn\n}\n\nexport function callAllHandlers<T extends (event: any) => void>(\n  ...fns: (T | undefined)[]\n) {\n  return function (event: FunctionArguments<T>[0]) {\n    fns.some((fn) => {\n      fn && fn(event)\n      return event && event.defaultPrevented\n    })\n  }\n}\n\nexport { memoize }\n\nexport function once(fn?: Function | null) {\n  let result: any\n\n  return function (this: any, ...args: any[]) {\n    if (fn) {\n      result = fn.apply(this, args)\n      fn = null\n    }\n\n    return result\n  }\n}\n\nexport const noop = () => {}\n\ntype MessageOptions = {\n  condition: boolean\n  message: string\n}\n\nexport const warn = once((options: MessageOptions) => {\n  const { condition, message } = options\n  if (condition && __DEV__) {\n    console.warn(message)\n  }\n})\n\nexport const error = once((options: MessageOptions) => {\n  const { condition, message } = options\n  if (condition && __DEV__) {\n    console.error(message)\n  }\n})\n"],"file":"function.js"}