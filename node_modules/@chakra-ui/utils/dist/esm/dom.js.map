{"version":3,"sources":["../../src/dom.ts"],"names":["_window","undefined","window","e","getWindow","node","ownerDocument","defaultView","checkIsBrowser","Boolean","document","createElement","isBrowser","normalizeEventKey","event","key","keyCode","isArrowKey","indexOf","dataAttr","condition","ariaAttr","getOwnerDocument","cx","classNames","filter","join"],"mappings":"AAGA,IAAIA,OAA2B,GAAGC,SAAlC,C,CAEA;AACA;AACA;;AACA,IAAI;AACFD,EAAAA,OAAO,GAAGE,MAAV;AACD,CAFD,CAEE,OAAOC,CAAP,EAAU;AACV;AACD;AAED;;;;;;AAIA,OAAO,IAAMC,SAAS,GAAIC,IAAD;AAAA;;AAAA,kCACvBA,IADuB,2CACvBA,IAAI,CAAEC,aADiB,qBACvB,oBAAqBC,WADE,oCACaP,OADb;AAAA,CAAlB;AAGP;;;;AAGA,SAASQ,cAAT,GAA0B;AACxB,MAAMR,OAAO,GAAGI,SAAS,EAAzB;;AACA,SAAOK,OAAO,CACZ,OAAOT,OAAP,KAAmB,WAAnB,IACEA,OAAO,CAACU,QADV,IAEEV,OAAO,CAACU,QAAR,CAAiBC,aAHP,CAAd;AAKD;;AAED,OAAO,IAAMC,SAAS,GAAGJ,cAAc,EAAhC;AAEP;;;;;AAIA,OAAO,SAASK,iBAAT,CAA2BC,KAA3B,EAAuD;AAC5D,MAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAmBF,KAAzB;AAEA,MAAMG,UAAU,GACdD,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAI,EAA5B,IAAkCD,GAAG,CAACG,OAAJ,CAAY,OAAZ,MAAyB,CAD7D;AAGA,SAAOD,UAAU,aAAWF,GAAX,GAAmBA,GAApC;AACD;AAED,OAAO,IAAMI,QAAQ,GAAIC,SAAD,IACrBA,SAAS,GAAG,EAAH,GAAQnB,SADb;AAGP,OAAO,IAAMoB,QAAQ,GAAID,SAAD,IACtBA,SAAS,GAAG,IAAH,GAAUnB,SADd;AAGP,OAAO,IAAMqB,gBAAgB,GAAIjB,IAAD,IAC9B,CAAAA,IAAI,QAAJ,YAAAA,IAAI,CAAEC,aAAN,KAAuBI,QADlB;AAGP,OAAO,IAAMa,EAAE,GAAG,SAALA,EAAK;AAAA,oCAAIC,UAAJ;AAAIA,IAAAA,UAAJ;AAAA;;AAAA,SAA0BA,UAAU,CAACC,MAAX,CAAkBhB,OAAlB,EAA2BiB,IAA3B,CAAgC,GAAhC,CAA1B;AAAA,CAAX","sourcesContent":["import { Booleanish } from \"./types\"\nimport * as React from \"react\"\n\nlet _window: Window | undefined = undefined\n\n// Note: Accessing \"window\" in IE11 is somewhat expensive, and calling \"typeof window\"\n// hits a memory leak, whereas aliasing it and calling \"typeof _window\" does not.\n// Caching the window value at the file scope lets us minimize the impact.\ntry {\n  _window = window\n} catch (e) {\n  /* no-op */\n}\n\n/**\n * Helper to get the window object. The helper will make sure to use a cached variable\n * of \"window\", to avoid overhead and memory leaks in IE11.\n */\nexport const getWindow = (node?: HTMLElement | null) =>\n  node?.ownerDocument?.defaultView ?? _window\n\n/**\n * Check if we can use the DOM. Useful for SSR purposes\n */\nfunction checkIsBrowser() {\n  const _window = getWindow()\n  return Boolean(\n    typeof _window !== \"undefined\" &&\n      _window.document &&\n      _window.document.createElement,\n  )\n}\n\nexport const isBrowser = checkIsBrowser()\n\n/**\n * Get the normalized event key across all browsers\n * @param event keyboard event\n */\nexport function normalizeEventKey(event: React.KeyboardEvent) {\n  const { key, keyCode } = event\n\n  const isArrowKey =\n    keyCode >= 37 && keyCode <= 40 && key.indexOf(\"Arrow\") !== 0\n\n  return isArrowKey ? `Arrow${key}` : key\n}\n\nexport const dataAttr = (condition: boolean | undefined) =>\n  (condition ? \"\" : undefined) as Booleanish\n\nexport const ariaAttr = (condition: boolean | undefined) =>\n  condition ? true : undefined\n\nexport const getOwnerDocument = (node?: HTMLElement) =>\n  node?.ownerDocument || document\n\nexport const cx = (...classNames: any[]) => classNames.filter(Boolean).join(\" \")\n"],"file":"dom.js"}