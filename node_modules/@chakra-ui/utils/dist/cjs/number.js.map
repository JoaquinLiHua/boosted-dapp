{"version":3,"sources":["../../src/number.ts"],"names":["minSafeInteger","Number","MIN_SAFE_INTEGER","maxSafeInteger","MAX_SAFE_INTEGER","toNumber","value","num","parseFloat","toPrecision","precision","nextValue","scaleFactor","Math","pow","round","toFixed","toString","countDecimalPlaces","isFinite","e","p","valueToPercent","min","max","percentToValue","percent","roundValueToStep","from","step","clampValue","condition","message"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEO,IAAMA,cAAc,GAAGC,MAAM,CAACC,gBAAP,IAA2B,CAAC,gBAAnD;;AACA,IAAMC,cAAc,GAAGF,MAAM,CAACG,gBAAP,IAA2B,gBAAlD;AAEP;;;;;;;AAIA,SAASC,QAAT,CAAkBC,KAAlB,EAA8B;AAC5B,MAAMC,GAAG,GAAGC,UAAU,CAACF,KAAD,CAAtB;AACA,SAAO,4BAAYC,GAAZ,IAAmB,CAAnB,GAAuBA,GAA9B;AACD;AAED;;;;;;;;;;AAQO,SAASE,WAAT,CAAqBH,KAArB,EAAoCI,SAApC,EAAwD;AAC7D,MAAIC,SAA0B,GAAGN,QAAQ,CAACC,KAAD,CAAzC;AACA,MAAMM,WAAW,GAAGC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaJ,SAAb,WAAaA,SAAb,GAA0B,EAA1B,CAApB;AACAC,EAAAA,SAAS,GAAGE,IAAI,CAACE,KAAL,CAAWJ,SAAS,GAAGC,WAAvB,IAAsCA,WAAlD;AACA,SAAOF,SAAS,GAAGC,SAAS,CAACK,OAAV,CAAkBN,SAAlB,CAAH,GAAkCC,SAAS,CAACM,QAAV,EAAlD;AACD;AAED;;;;;;;AAKO,SAASC,kBAAT,CAA4BZ,KAA5B,EAA2C;AAChD,MAAI,CAACa,QAAQ,CAACb,KAAD,CAAb,EAAsB,OAAO,CAAP;AAEtB,MAAIc,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;;AACA,SAAOR,IAAI,CAACE,KAAL,CAAWT,KAAK,GAAGc,CAAnB,IAAwBA,CAAxB,KAA8Bd,KAArC,EAA4C;AAC1Cc,IAAAA,CAAC,IAAI,EAAL;AACAC,IAAAA,CAAC;AACF;;AACD,SAAOA,CAAP;AACD;AAED;;;;;;;;;AAOO,SAASC,cAAT,CAAwBhB,KAAxB,EAAuCiB,GAAvC,EAAoDC,GAApD,EAAiE;AACtE,SAAQ,CAAClB,KAAK,GAAGiB,GAAT,IAAgB,GAAjB,IAAyBC,GAAG,GAAGD,GAA/B,CAAP;AACD;AAED;;;;;;;;;AAOO,SAASE,cAAT,CAAwBC,OAAxB,EAAyCH,GAAzC,EAAsDC,GAAtD,EAAmE;AACxE,SAAO,CAACA,GAAG,GAAGD,GAAP,IAAcG,OAAd,GAAwBH,GAA/B;AACD;AAED;;;;;;;;;AAOO,SAASI,gBAAT,CAA0BrB,KAA1B,EAAyCsB,IAAzC,EAAuDC,IAAvD,EAAqE;AAC1E,MAAMlB,SAAS,GAAGE,IAAI,CAACE,KAAL,CAAW,CAACT,KAAK,GAAGsB,IAAT,IAAiBC,IAA5B,IAAoCA,IAApC,GAA2CD,IAA7D;AACA,MAAMlB,SAAS,GAAGQ,kBAAkB,CAACW,IAAD,CAApC;AACA,SAAOpB,WAAW,CAACE,SAAD,EAAYD,SAAZ,CAAlB;AACD;AAED;;;;;;;;;AAOO,SAASoB,UAAT,CAAoBxB,KAApB,EAAmCiB,GAAnC,EAAgDC,GAAhD,EAA6D;AAClE,MAAIlB,KAAK,IAAI,IAAb,EAAmB,OAAOA,KAAP;AAEnB,sBAAK;AACHyB,IAAAA,SAAS,EAAEP,GAAG,GAAGD,GADd;AAEHS,IAAAA,OAAO,EAAE;AAFN,GAAL;AAKA,SAAOnB,IAAI,CAACU,GAAL,CAASV,IAAI,CAACW,GAAL,CAASlB,KAAT,EAAgBiB,GAAhB,CAAT,EAA+BC,GAA/B,CAAP;AACD","sourcesContent":["import { isNotNumber } from \"./assertion\"\nimport { warn } from \"./function\"\n\nexport const minSafeInteger = Number.MIN_SAFE_INTEGER || -9007199254740991\nexport const maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991\n\n/**\n * Convert a value to number\n * @param value the value to convert\n */\nfunction toNumber(value: any) {\n  const num = parseFloat(value)\n  return isNotNumber(num) ? 0 : num\n}\n\n/**\n * Converts a value to a specific precision (or decimal points).\n *\n * Returns a string representing a number in fixed-point notation.\n *\n * @param value the value to convert\n * @param precision the precision or decimal points\n */\nexport function toPrecision(value: number, precision?: number) {\n  let nextValue: string | number = toNumber(value)\n  const scaleFactor = Math.pow(10, precision ?? 10)\n  nextValue = Math.round(nextValue * scaleFactor) / scaleFactor\n  return precision ? nextValue.toFixed(precision) : nextValue.toString()\n}\n\n/**\n * Counts the number of decimal places a number has\n *\n * @param value the decimal value to count\n */\nexport function countDecimalPlaces(value: number) {\n  if (!isFinite(value)) return 0\n\n  let e = 1\n  let p = 0\n  while (Math.round(value * e) / e !== value) {\n    e *= 10\n    p++\n  }\n  return p\n}\n\n/**\n * Convert a value to percentage based on lower and upper bound values\n *\n * @param value the value in number\n * @param min the minimum value\n * @param max the maximum value\n */\nexport function valueToPercent(value: number, min: number, max: number) {\n  return ((value - min) * 100) / (max - min)\n}\n\n/**\n * Calculate the value based on percentage, lower and upper bound values\n *\n * @param percent the percent value in decimals (e.g 0.6, 0.3)\n * @param min the minimum value\n * @param max the maximum value\n */\nexport function percentToValue(percent: number, min: number, max: number) {\n  return (max - min) * percent + min\n}\n\n/**\n * Rounds a specific value to the next or previous step\n *\n * @param value the value to round\n * @param from the number that stepping started from\n * @param step the specified step\n */\nexport function roundValueToStep(value: number, from: number, step: number) {\n  const nextValue = Math.round((value - from) / step) * step + from\n  const precision = countDecimalPlaces(step)\n  return toPrecision(nextValue, precision)\n}\n\n/**\n * Clamps a value to ensure it stays within the min and max range.\n *\n * @param value the value to clamp\n * @param min the minimum value\n * @param max the maximum value\n */\nexport function clampValue(value: number, min: number, max: number) {\n  if (value == null) return value\n\n  warn({\n    condition: max < min,\n    message: \"[Chakra UI] clamp: max cannot be less than min\",\n  })\n\n  return Math.min(Math.max(value, min), max)\n}\n"],"file":"number.js"}