{"version":3,"sources":["../../src/assertion.ts"],"names":["isNumber","value","isNotNumber","isNaN","isFinite","isNumeric","parseFloat","isArray","Array","isEmptyArray","length","isFunction","isDefined","undefined","isUndefined","isObject","type","isEmptyObject","Object","keys","isNotEmptyObject","isNull","isString","prototype","toString","call","isInputEvent","target","isEmpty","__DEV__","process","env","NODE_ENV"],"mappings":"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","sourcesContent":["import { ChangeEvent } from \"react\"\nimport { Dict } from \"./types\"\n\n// Number assertions\nexport function isNumber(value: any): value is number {\n  return typeof value === \"number\"\n}\n\nexport const isNotNumber = (value: any) =>\n  typeof value !== \"number\" || isNaN(value) || !isFinite(value)\n\nexport function isNumeric(value: any) {\n  return value != null && value - parseFloat(value) + 1 >= 0\n}\n\n// Array assertions\nexport function isArray<T>(value: any): value is Array<T> {\n  return Array.isArray(value)\n}\n\nexport const isEmptyArray = (value: any) => isArray(value) && value.length === 0\n\n// Function assertions\nexport function isFunction(value: any): value is Function {\n  return typeof value === \"function\"\n}\n\n// Generic assertions\nexport const isDefined = (value: any) =>\n  typeof value !== \"undefined\" && value !== undefined\n\nexport const isUndefined = (value: any): value is undefined =>\n  typeof value === \"undefined\" || value === undefined\n\n// Object assertions\nexport const isObject = (value: any): value is Dict => {\n  const type = typeof value\n  return (\n    value != null &&\n    (type === \"object\" || type === \"function\") &&\n    !isArray(value)\n  )\n}\n\nexport const isEmptyObject = (value: any) =>\n  isObject(value) && Object.keys(value).length === 0\n\nexport function isNotEmptyObject(value: any): value is object {\n  return value && !isEmptyObject(value)\n}\n\nexport const isNull = (value: any): value is null => value == null\n\n// String assertions\nexport function isString(value: any): value is string {\n  return Object.prototype.toString.call(value) === \"[object String]\"\n}\n\n// Event assertions\nexport function isInputEvent(value: any): value is ChangeEvent {\n  return value && isObject(value) && isObject(value.target)\n}\n\n// Empty assertions\nexport const isEmpty = (value: any) => {\n  if (isArray(value)) return isEmptyArray(value)\n  if (isObject(value)) return isEmptyObject(value)\n  if (value == null || value === \"\") return true\n  return false\n}\n\nexport const __DEV__ = process.env.NODE_ENV !== \"production\"\n"],"file":"assertion.js"}