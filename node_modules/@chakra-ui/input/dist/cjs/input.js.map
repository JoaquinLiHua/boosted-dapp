{"version":3,"sources":["../../src/input.tsx"],"names":["Input","props","ref","styles","realProps","input","_className","className","field","__DEV__","displayName","id"],"mappings":";;;;;AAAA;;AACA;;AAQA;;AACA;;;;;;;;AA+BA;;;;;AAKO,IAAMA,KAAK,gBAAG,wBAAgC,SAASA,KAAT,CACnDC,KADmD,EAEnDC,GAFmD,EAGnD;AACA,MAAMC,MAAM,GAAG,iCAAoB,OAApB,EAA6BF,KAA7B,CAAf;AACA,MAAMG,SAAS,GAAG,8BAAiBH,KAAjB,CAAlB;AACA,MAAMI,KAAK,GAAG,iCAAiCD,SAAjC,CAAd;;AACA,MAAME,UAAU,GAAG,eAAG,cAAH,EAAmBL,KAAK,CAACM,SAAzB,CAAnB;;AAEA,sBACE,oBAAC,cAAD,CAAQ,KAAR,eACMF,KADN;AAEE,IAAA,KAAK,EAAEF,MAAM,CAACK,KAFhB;AAGE,IAAA,GAAG,EAAEN,GAHP;AAIE,IAAA,SAAS,EAAEI;AAJb,KADF;AAQD,CAjBoB,CAAd;;;AAmBP,IAAIG,cAAJ,EAAa;AACXT,EAAAA,KAAK,CAACU,WAAN,GAAoB,OAApB;AACD,C,CAED;;;AACAV,KAAK,CAACW,EAAN,GAAW,OAAX","sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  PropsOf,\n  useMultiStyleConfig,\n  omitThemingProps,\n  ThemingProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the input element will span the full width of it's parent\n   */\n  isFullWidth?: boolean\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<PropsOf<typeof chakra.input>, Omitted>,\n    InputOptions,\n    ThemingProps,\n    FormControlOptions {\n  size?: string\n}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Input\", props)\n  const realProps = omitThemingProps(props)\n  const input = useFormControl<HTMLInputElement>(realProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nif (__DEV__) {\n  Input.displayName = \"Input\"\n}\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"file":"input.js"}