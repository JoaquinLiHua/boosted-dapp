{"version":3,"sources":["../../src/drawer.tsx"],"names":["TransitionContext","React","createContext","content","overlay","displayName","useTransitionContext","useContext","DrawerTransition","props","inProp","children","placement","__DEV__","Drawer","isOpen","onClose","rest","theme","drawerStyleConfig","components","DrawerContent","ref","styles","DrawerOverlay"],"mappings":"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","sourcesContent":["import * as React from \"react\"\nimport { Slide, SlideProps, Fade } from \"@chakra-ui/transition\"\nimport {\n  Modal,\n  ModalProps,\n  ModalContentProps,\n  ModalContent,\n  ModalOverlayProps,\n  ModalOverlay,\n} from \"@chakra-ui/modal\"\nimport { forwardRef, useTheme } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\n\ninterface TransitionStyles {\n  content: React.CSSProperties\n  overlay: React.CSSProperties\n}\n\nconst TransitionContext = React.createContext<TransitionStyles>({\n  content: {},\n  overlay: {},\n})\n\nTransitionContext.displayName = \"TransitionContext\"\nconst useTransitionContext = () => React.useContext(TransitionContext)\n\ninterface DrawerTransitionProps {\n  in: boolean\n  children: React.ReactNode\n  placement: SlideProps[\"placement\"]\n}\n\nconst DrawerTransition: React.FC<DrawerTransitionProps> = (props) => {\n  const { in: inProp, children, placement } = props\n  return (\n    <Slide\n      timeout={250}\n      in={inProp}\n      placement={placement}\n      transition=\"transform 250ms cubic-bezier(0.16, 1, 0.3, 1)\"\n    >\n      {(content) => (\n        <Fade\n          timeout={250}\n          in={inProp}\n          transition=\"opacity 250ms cubic-bezier(0.16, 1, 0.3, 1)\"\n        >\n          {(overlay) => (\n            <TransitionContext.Provider value={{ content, overlay }}>\n              {children}\n            </TransitionContext.Provider>\n          )}\n        </Fade>\n      )}\n    </Slide>\n  )\n}\n\nif (__DEV__) {\n  DrawerTransition.displayName = \"DrawerTransition\"\n}\n\nexport interface DrawerProps extends ModalProps {\n  /**\n   * The placement of the drawer\n   */\n  placement?: SlideProps[\"placement\"]\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport const Drawer: React.FC<DrawerProps> = (props) => {\n  const { isOpen, onClose, placement = \"right\", children, ...rest } = props\n\n  const theme = useTheme()\n  const drawerStyleConfig = theme.components?.Drawer\n\n  return (\n    <DrawerTransition in={isOpen} placement={placement}>\n      <Modal isOpen onClose={onClose} styleConfig={drawerStyleConfig} {...rest}>\n        {children}\n      </Modal>\n    </DrawerTransition>\n  )\n}\n\nexport const DrawerContent: React.FC<ModalContentProps> = forwardRef(\n  (props, ref) => {\n    const { content: styles } = useTransitionContext()\n    return (\n      <ModalContent\n        ref={ref}\n        position=\"fixed\"\n        style={styles}\n        marginTop=\"0\"\n        marginBottom=\"0\"\n        borderRadius=\"0\"\n        {...props}\n      />\n    )\n  },\n)\n\nexport const DrawerOverlay: React.FC<ModalOverlayProps> = forwardRef(\n  (props, ref) => {\n    const { overlay: styles } = useTransitionContext()\n    return <ModalOverlay style={styles} ref={ref} {...props} />\n  },\n)\n\nexport {\n  ModalBody as DrawerBody,\n  ModalHeader as DrawerHeader,\n  ModalFooter as DrawerFooter,\n  ModalCloseButton as DrawerCloseButton,\n} from \"@chakra-ui/modal\"\n"],"file":"drawer.js"}