function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from "react";
import { Slide, Fade } from "@chakra-ui/transition";
import { Modal, ModalContent, ModalOverlay } from "@chakra-ui/modal";
import { forwardRef, useTheme } from "@chakra-ui/system";
import { __DEV__ } from "@chakra-ui/utils";
var TransitionContext = /*#__PURE__*/React.createContext({
  content: {},
  overlay: {}
});
TransitionContext.displayName = "TransitionContext";

var useTransitionContext = () => React.useContext(TransitionContext);

var DrawerTransition = props => {
  var {
    in: inProp,
    children,
    placement
  } = props;
  return /*#__PURE__*/React.createElement(Slide, {
    timeout: 250,
    in: inProp,
    placement: placement,
    transition: "transform 250ms cubic-bezier(0.16, 1, 0.3, 1)"
  }, content => /*#__PURE__*/React.createElement(Fade, {
    timeout: 250,
    in: inProp,
    transition: "opacity 250ms cubic-bezier(0.16, 1, 0.3, 1)"
  }, overlay => /*#__PURE__*/React.createElement(TransitionContext.Provider, {
    value: {
      content,
      overlay
    }
  }, children)));
};

if (__DEV__) {
  DrawerTransition.displayName = "DrawerTransition";
}

export var Drawer = props => {
  var _theme$components;

  var {
    isOpen,
    onClose,
    placement = "right",
    children
  } = props,
      rest = _objectWithoutPropertiesLoose(props, ["isOpen", "onClose", "placement", "children"]);

  var theme = useTheme();
  var drawerStyleConfig = (_theme$components = theme.components) == null ? void 0 : _theme$components.Drawer;
  return /*#__PURE__*/React.createElement(DrawerTransition, {
    in: isOpen,
    placement: placement
  }, /*#__PURE__*/React.createElement(Modal, _extends({
    isOpen: true,
    onClose: onClose,
    styleConfig: drawerStyleConfig
  }, rest), children));
};
export var DrawerContent = /*#__PURE__*/forwardRef((props, ref) => {
  var {
    content: styles
  } = useTransitionContext();
  return /*#__PURE__*/React.createElement(ModalContent, _extends({
    ref: ref,
    position: "fixed",
    style: styles,
    marginTop: "0",
    marginBottom: "0",
    borderRadius: "0"
  }, props));
});
export var DrawerOverlay = /*#__PURE__*/forwardRef((props, ref) => {
  var {
    overlay: styles
  } = useTransitionContext();
  return /*#__PURE__*/React.createElement(ModalOverlay, _extends({
    style: styles,
    ref: ref
  }, props));
});
export { ModalBody as DrawerBody, ModalHeader as DrawerHeader, ModalFooter as DrawerFooter, ModalCloseButton as DrawerCloseButton } from "@chakra-ui/modal";
//# sourceMappingURL=drawer.js.map