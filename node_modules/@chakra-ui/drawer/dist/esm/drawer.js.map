{"version":3,"sources":["../../src/drawer.tsx"],"names":["React","Slide","Fade","Modal","ModalContent","ModalOverlay","forwardRef","useTheme","__DEV__","TransitionContext","createContext","content","overlay","displayName","useTransitionContext","useContext","DrawerTransition","props","in","inProp","children","placement","Drawer","isOpen","onClose","rest","theme","drawerStyleConfig","components","DrawerContent","ref","styles","DrawerOverlay","ModalBody","DrawerBody","ModalHeader","DrawerHeader","ModalFooter","DrawerFooter","ModalCloseButton","DrawerCloseButton"],"mappings":"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","sourcesContent":["import * as React from \"react\"\nimport { Slide, SlideProps, Fade } from \"@chakra-ui/transition\"\nimport {\n  Modal,\n  ModalProps,\n  ModalContentProps,\n  ModalContent,\n  ModalOverlayProps,\n  ModalOverlay,\n} from \"@chakra-ui/modal\"\nimport { forwardRef, useTheme } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\n\ninterface TransitionStyles {\n  content: React.CSSProperties\n  overlay: React.CSSProperties\n}\n\nconst TransitionContext = React.createContext<TransitionStyles>({\n  content: {},\n  overlay: {},\n})\n\nTransitionContext.displayName = \"TransitionContext\"\nconst useTransitionContext = () => React.useContext(TransitionContext)\n\ninterface DrawerTransitionProps {\n  in: boolean\n  children: React.ReactNode\n  placement: SlideProps[\"placement\"]\n}\n\nconst DrawerTransition: React.FC<DrawerTransitionProps> = (props) => {\n  const { in: inProp, children, placement } = props\n  return (\n    <Slide\n      timeout={250}\n      in={inProp}\n      placement={placement}\n      transition=\"transform 250ms cubic-bezier(0.16, 1, 0.3, 1)\"\n    >\n      {(content) => (\n        <Fade\n          timeout={250}\n          in={inProp}\n          transition=\"opacity 250ms cubic-bezier(0.16, 1, 0.3, 1)\"\n        >\n          {(overlay) => (\n            <TransitionContext.Provider value={{ content, overlay }}>\n              {children}\n            </TransitionContext.Provider>\n          )}\n        </Fade>\n      )}\n    </Slide>\n  )\n}\n\nif (__DEV__) {\n  DrawerTransition.displayName = \"DrawerTransition\"\n}\n\nexport interface DrawerProps extends ModalProps {\n  /**\n   * The placement of the drawer\n   */\n  placement?: SlideProps[\"placement\"]\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport const Drawer: React.FC<DrawerProps> = (props) => {\n  const { isOpen, onClose, placement = \"right\", children, ...rest } = props\n\n  const theme = useTheme()\n  const drawerStyleConfig = theme.components?.Drawer\n\n  return (\n    <DrawerTransition in={isOpen} placement={placement}>\n      <Modal isOpen onClose={onClose} styleConfig={drawerStyleConfig} {...rest}>\n        {children}\n      </Modal>\n    </DrawerTransition>\n  )\n}\n\nexport const DrawerContent: React.FC<ModalContentProps> = forwardRef(\n  (props, ref) => {\n    const { content: styles } = useTransitionContext()\n    return (\n      <ModalContent\n        ref={ref}\n        position=\"fixed\"\n        style={styles}\n        marginTop=\"0\"\n        marginBottom=\"0\"\n        borderRadius=\"0\"\n        {...props}\n      />\n    )\n  },\n)\n\nexport const DrawerOverlay: React.FC<ModalOverlayProps> = forwardRef(\n  (props, ref) => {\n    const { overlay: styles } = useTransitionContext()\n    return <ModalOverlay style={styles} ref={ref} {...props} />\n  },\n)\n\nexport {\n  ModalBody as DrawerBody,\n  ModalHeader as DrawerHeader,\n  ModalFooter as DrawerFooter,\n  ModalCloseButton as DrawerCloseButton,\n} from \"@chakra-ui/modal\"\n"],"file":"drawer.js"}