{"version":3,"sources":["../../src/color-mode.tsx"],"names":["noop","__DEV__","React","ColorMode","useColorModeState","ColorModeContext","createContext","colorMode","toggleColorMode","displayName","useColorMode","useContext","ColorModeProvider","props","value","children","useSystemColorMode","defaultValue","storageManager","config","initialColorMode","setColorMode","context","controlledContext","DarkMode","LightMode","getColorModeValue","light","dark","useColorModeValue"],"mappings":"AAAA,SAASA,IAAT,EAAeC,OAAf,QAA8B,kBAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,iBAAP,MAA8B,wBAA9B;AAUA,OAAO,IAAMC,gBAAgB,gBAAGH,KAAK,CAACI,aAAN,CAA0C;AACxEC,EAAAA,SAAS,EAAE,OAD6D;AAExEC,EAAAA,eAAe,EAAER;AAFuD,CAA1C,CAAzB;;AAKP,IAAIC,OAAJ,EAAa;AACXI,EAAAA,gBAAgB,CAACI,WAAjB,GAA+B,kBAA/B;AACD;AAED;;;;;;AAIA,OAAO,SAASC,YAAT,GAAwB;AAC7B,SAAOR,KAAK,CAACS,UAAN,CAAiBN,gBAAjB,CAAP;AACD;;AAUD;;;;AAIA,OAAO,IAAMO,iBAAmD,GAAIC,KAAD,IAAW;AAC5E,MAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,kBAAkB,GAAG,KAHjB;AAIJC,IAAAA,YAAY,GAAG,OAJX;AAKJC,IAAAA;AALI,MAMFL,KANJ;AAQA,MAAMM,MAAM,GAAG;AACbH,IAAAA,kBADa;AAEbI,IAAAA,gBAAgB,EAAEH,YAFL;AAGbC,IAAAA;AAHa,GAAf;AAMA,MAAM,CAACX,SAAD,EAAYc,YAAZ,IAA4BjB,iBAAiB,CAACe,MAAD,CAAnD;;AACA,MAAMX,eAAe,GAAG,MACtBa,YAAY,CAACd,SAAS,KAAK,OAAd,GAAwB,MAAxB,GAAiC,OAAlC,CADd;;AAGA,MAAMe,OAAO,GAAG;AAAEf,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAhB;AAEA,MAAMe,iBAAiB,GAAG;AACxBhB,IAAAA,SAAS,EAAEO,KADa;AAExBN,IAAAA,eAAe,EAAER;AAFO,GAA1B;AAKA,sBACE,oBAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEc,KAAK,GAAGS,iBAAH,GAAuBD;AAA9D,KACGP,QADH,CADF;AAKD,CA/BM;;AAiCP,IAAId,OAAJ,EAAa;AACXW,EAAAA,iBAAiB,CAACH,WAAlB,GAAgC,mBAAhC;AACD;AAED;;;;;AAGA,OAAO,IAAMe,QAAkB,GAAG;AAAA,MAAC;AAAET,IAAAA;AAAF,GAAD;AAAA,sBAChC,oBAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AAAER,MAAAA,SAAS,EAAE,MAAb;AAAqBC,MAAAA,eAAe,EAAER;AAAtC,KADT;AAEE,IAAA,QAAQ,EAAEe;AAFZ,IADgC;AAAA,CAA3B;;AAOP,IAAId,OAAJ,EAAa;AACXuB,EAAAA,QAAQ,CAACf,WAAT,GAAuB,UAAvB;AACD;AAED;;;;;AAGA,OAAO,IAAMgB,SAAmB,GAAG;AAAA,MAAC;AAAEV,IAAAA;AAAF,GAAD;AAAA,sBACjC,oBAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AAAER,MAAAA,SAAS,EAAE,OAAb;AAAsBC,MAAAA,eAAe,EAAER;AAAvC,KADT;AAEE,IAAA,QAAQ,EAAEe;AAFZ,IADiC;AAAA,CAA5B;;AAOP,IAAId,OAAJ,EAAa;AACXwB,EAAAA,SAAS,CAAChB,WAAV,GAAwB,WAAxB;AACD;AAED;;;;;;;;AAMA,OAAO,SAASiB,iBAAT,CAA2BC,KAA3B,EAAuCC,IAAvC,EAAkD;AACvD,SAAQrB,SAAD,IAA2BA,SAAS,KAAK,OAAd,GAAwBoB,KAAxB,GAAgCC,IAAlE;AACD;AAED;;;;;;;;;;;;;AAYA,OAAO,SAASC,iBAAT,CAA2BF,KAA3B,EAAuCC,IAAvC,EAAkD;AACvD,MAAM;AAAErB,IAAAA;AAAF,MAAgBG,YAAY,EAAlC;AACA,SAAOgB,iBAAiB,CAACC,KAAD,EAAQC,IAAR,CAAjB,CAA+BrB,SAA/B,CAAP;AACD","sourcesContent":["import { noop, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { ColorMode } from \"./color-mode.utils\"\nimport useColorModeState from \"./use-color-mode-state\"\nimport { StorageManager } from \"./storage-manager\"\n\nexport type { ColorMode }\n\ninterface ColorModeContextType {\n  colorMode: ColorMode\n  toggleColorMode: () => void\n}\n\nexport const ColorModeContext = React.createContext<ColorModeContextType>({\n  colorMode: \"light\",\n  toggleColorMode: noop,\n})\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\"\n}\n\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\nexport function useColorMode() {\n  return React.useContext(ColorModeContext)\n}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  useSystemColorMode?: boolean\n  defaultValue?: ColorMode\n  storageManager?: StorageManager\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport const ColorModeProvider: React.FC<ColorModeProviderProps> = (props) => {\n  const {\n    value,\n    children,\n    useSystemColorMode = false,\n    defaultValue = \"light\",\n    storageManager,\n  } = props\n\n  const config = {\n    useSystemColorMode,\n    initialColorMode: defaultValue,\n    storageManager,\n  }\n\n  const [colorMode, setColorMode] = useColorModeState(config)\n  const toggleColorMode = () =>\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\")\n\n  const context = { colorMode, toggleColorMode }\n\n  const controlledContext = {\n    colorMode: value as ColorMode,\n    toggleColorMode: noop,\n  }\n\n  return (\n    <ColorModeContext.Provider value={value ? controlledContext : context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\"\n}\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport const DarkMode: React.FC = ({ children }) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"dark\", toggleColorMode: noop }}\n    children={children}\n  />\n)\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\"\n}\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport const LightMode: React.FC = ({ children }) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"light\", toggleColorMode: noop }}\n    children={children}\n  />\n)\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\"\n}\n\n/**\n * Change value based on color mode\n *\n * @param light the light mode value\n * @param dark the dark mode value\n */\nexport function getColorModeValue(light: any, dark: any) {\n  return (colorMode: ColorMode) => (colorMode === \"light\" ? light : dark)\n}\n\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode()\n  return getColorModeValue(light, dark)(colorMode)\n}\n"],"file":"color-mode.js"}