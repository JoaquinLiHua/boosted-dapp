{"version":3,"sources":["../../src/use-color-mode-state.ts"],"names":["useLatestRef","useEffect","useState","addListener","getColorScheme","syncBodyClassName","localStorageManager","useSyncBodyClass","mode","requestAnimationFrame","useSyncSystemColorMode","fn","enabled","callback","removeListener","current","useColorModeState","options","storageManager","setMode","stored","get","useSystemColorMode","initialColorMode","set"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SACEC,WADF,EAGEC,cAHF,EAIEC,iBAJF,QAKO,oBALP;AAMA,SAAyBC,mBAAzB,QAAoD,mBAApD;AAEA;;;;;;;;;AAQA,SAASC,gBAAT,CAA0BC,IAA1B,EAAwC;AACtCP,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,qBAAqB,CAAC,MAAM;AAC1BJ,MAAAA,iBAAiB,CAACG,IAAI,KAAK,MAAV,CAAjB;AACD,KAFoB,CAArB;AAGD,GAJQ,EAIN,CAACA,IAAD,CAJM,CAAT;AAKD;AAED;;;;;;;;;AAOA,SAASE,sBAAT,CAAgCC,EAAhC,EAA8CC,OAA9C,EAAgE;AAC9D,MAAMC,QAAQ,GAAGb,YAAY,CAACW,EAAD,CAA7B;AACAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACW,OAAL,EAAc;AACd,QAAME,cAAc,GAAGX,WAAW,CAACU,QAAQ,CAACE,OAAV,CAAlC;AACA,WAAO,MAAM;AACXD,MAAAA,cAAc,QAAd,YAAAA,cAAc;AACf,KAFD;AAGD,GANQ,EAMN,CAACD,QAAD,EAAWD,OAAX,CANM,CAAT;AAOD;;AAWD;;;;AAIA,OAAO,SAASI,iBAAT,CACLC,OADK,EAEL;AACA,MAAMC,cAAc,GAAG,CAAAD,OAAO,QAAP,YAAAA,OAAO,CAAEC,cAAT,KAA2BZ,mBAAlD;AAEA,MAAM,CAACE,IAAD,EAAOW,OAAP,IAAkBjB,QAAQ,CAAY,MAAM;AAChD,QAAMkB,MAAM,GAAGF,cAAc,CAACG,GAAf,EAAf;AAEA,QAAID,MAAJ,EAAY,OAAOA,MAAP;;AAEZ,QAAIH,OAAJ,oBAAIA,OAAO,CAAEK,kBAAb,EAAiC;AAC/B,aAAOlB,cAAc,EAArB;AACD;;AAED,WAAO,CAAAa,OAAO,QAAP,YAAAA,OAAO,CAAEM,gBAAT,KAA6B,OAApC;AACD,GAV+B,CAAhC;AAYAhB,EAAAA,gBAAgB,CAACC,IAAD,CAAhB;AACAE,EAAAA,sBAAsB,CAACS,OAAD,EAAU,CAAC,EAACF,OAAD,oBAACA,OAAO,CAAEK,kBAAV,CAAX,CAAtB;AAEArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,IAAJ,EAAU;AACRU,MAAAA,cAAc,CAACM,GAAf,CAAmBhB,IAAnB;AACD;AACF,GAJQ,EAIN,CAACU,cAAD,EAAiBV,IAAjB,CAJM,CAAT;AAMA,SAAO,CAACA,IAAD,EAAOW,OAAP,CAAP;AACD;AAED,eAAeH,iBAAf","sourcesContent":["import { useLatestRef } from \"@chakra-ui/hooks\"\nimport { useEffect, useState } from \"react\"\nimport {\n  addListener,\n  ColorMode,\n  getColorScheme,\n  syncBodyClassName,\n} from \"./color-mode.utils\"\nimport { StorageManager, localStorageManager } from \"./storage-manager\"\n\n/**\n * Syncs the classname of the `<body />` based on the\n * color mode.\n *\n * @example\n *\n * If mode is 'dark', body will be `<body class=\"chakra-ui-light\"/>`\n */\nfunction useSyncBodyClass(mode: string) {\n  useEffect(() => {\n    requestAnimationFrame(() => {\n      syncBodyClassName(mode === \"dark\")\n    })\n  }, [mode])\n}\n\n/**\n * Syncs the system color mode preference with localStorage and\n * internal state.\n *\n * @param fn the function to run once user changes preference\n * @param enabled whether to run this hook or not\n */\nfunction useSyncSystemColorMode(fn: Function, enabled: boolean) {\n  const callback = useLatestRef(fn)\n  useEffect(() => {\n    if (!enabled) return\n    const removeListener = addListener(callback.current)\n    return () => {\n      removeListener?.()\n    }\n  }, [callback, enabled])\n}\n\nexport interface ColorModeOptions {\n  initialColorMode?: ColorMode\n  useSystemColorMode?: boolean\n}\n\ninterface useColorModeStateOptions extends ColorModeOptions {\n  storageManager?: StorageManager\n}\n\n/**\n * React hook that sets up the localStorage, body className,\n * and reads from system preference\n */\nexport function useColorModeState<T extends useColorModeStateOptions>(\n  options?: T,\n) {\n  const storageManager = options?.storageManager || localStorageManager\n\n  const [mode, setMode] = useState<ColorMode>(() => {\n    const stored = storageManager.get()\n\n    if (stored) return stored\n\n    if (options?.useSystemColorMode) {\n      return getColorScheme()\n    }\n\n    return options?.initialColorMode || \"light\"\n  })\n\n  useSyncBodyClass(mode)\n  useSyncSystemColorMode(setMode, !!options?.useSystemColorMode)\n\n  useEffect(() => {\n    if (mode) {\n      storageManager.set(mode)\n    }\n  }, [storageManager, mode])\n\n  return [mode, setMode] as const\n}\n\nexport default useColorModeState\n"],"file":"use-color-mode-state.js"}