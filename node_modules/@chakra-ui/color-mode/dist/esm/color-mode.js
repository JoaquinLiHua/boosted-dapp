import { noop, __DEV__ } from "@chakra-ui/utils";
import * as React from "react";
import { ColorMode } from "./color-mode.utils";
import useColorModeState from "./use-color-mode-state";
export var ColorModeContext = /*#__PURE__*/React.createContext({
  colorMode: "light",
  toggleColorMode: noop
});

if (__DEV__) {
  ColorModeContext.displayName = "ColorModeContext";
}
/**
 * React hook that reads from `ColorModeProvider` context
 * Returns the color mode and function to toggle it
 */


export function useColorMode() {
  return React.useContext(ColorModeContext);
}

/**
 * Provides context for the color mode based on config in `theme`
 * Returns the color mode and function to toggle the color mode
 */
export var ColorModeProvider = props => {
  var {
    value,
    children,
    useSystemColorMode = false,
    defaultValue = "light",
    storageManager
  } = props;
  var config = {
    useSystemColorMode,
    initialColorMode: defaultValue,
    storageManager
  };
  var [colorMode, setColorMode] = useColorModeState(config);

  var toggleColorMode = () => setColorMode(colorMode === "light" ? "dark" : "light");

  var context = {
    colorMode,
    toggleColorMode
  };
  var controlledContext = {
    colorMode: value,
    toggleColorMode: noop
  };
  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {
    value: value ? controlledContext : context
  }, children);
};

if (__DEV__) {
  ColorModeProvider.displayName = "ColorModeProvider";
}
/**
 * Locks the color mode to `dark`, without any way to change it.
 */


export var DarkMode = (_ref) => {
  var {
    children
  } = _ref;
  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {
    value: {
      colorMode: "dark",
      toggleColorMode: noop
    },
    children: children
  });
};

if (__DEV__) {
  DarkMode.displayName = "DarkMode";
}
/**
 * Locks the color mode to `light` without any way to change it.
 */


export var LightMode = (_ref2) => {
  var {
    children
  } = _ref2;
  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {
    value: {
      colorMode: "light",
      toggleColorMode: noop
    },
    children: children
  });
};

if (__DEV__) {
  LightMode.displayName = "LightMode";
}
/**
 * Change value based on color mode
 *
 * @param light the light mode value
 * @param dark the dark mode value
 */


export function getColorModeValue(light, dark) {
  return colorMode => colorMode === "light" ? light : dark;
}
/**
 * Change value based on color mode.
 *
 * @param light the light mode value
 * @param dark the dark mode value
 *
 * @example
 *
 * ```js
 * const Icon = useColorModeValue(MoonIcon, SunIcon)
 * ```
 */

export function useColorModeValue(light, dark) {
  var {
    colorMode
  } = useColorMode();
  return getColorModeValue(light, dark)(colorMode);
}
//# sourceMappingURL=color-mode.js.map