import { useLatestRef } from "@chakra-ui/hooks";
import { useEffect, useState } from "react";
import { addListener, getColorScheme, syncBodyClassName } from "./color-mode.utils";
import { localStorageManager } from "./storage-manager";
/**
 * Syncs the classname of the `<body />` based on the
 * color mode.
 *
 * @example
 *
 * If mode is 'dark', body will be `<body class="chakra-ui-light"/>`
 */

function useSyncBodyClass(mode) {
  useEffect(() => {
    requestAnimationFrame(() => {
      syncBodyClassName(mode === "dark");
    });
  }, [mode]);
}
/**
 * Syncs the system color mode preference with localStorage and
 * internal state.
 *
 * @param fn the function to run once user changes preference
 * @param enabled whether to run this hook or not
 */


function useSyncSystemColorMode(fn, enabled) {
  var callback = useLatestRef(fn);
  useEffect(() => {
    if (!enabled) return;
    var removeListener = addListener(callback.current);
    return () => {
      removeListener == null ? void 0 : removeListener();
    };
  }, [callback, enabled]);
}

/**
 * React hook that sets up the localStorage, body className,
 * and reads from system preference
 */
export function useColorModeState(options) {
  var storageManager = (options == null ? void 0 : options.storageManager) || localStorageManager;
  var [mode, setMode] = useState(() => {
    var stored = storageManager.get();
    if (stored) return stored;

    if (options == null ? void 0 : options.useSystemColorMode) {
      return getColorScheme();
    }

    return (options == null ? void 0 : options.initialColorMode) || "light";
  });
  useSyncBodyClass(mode);
  useSyncSystemColorMode(setMode, !!(options == null ? void 0 : options.useSystemColorMode));
  useEffect(() => {
    if (mode) {
      storageManager.set(mode);
    }
  }, [storageManager, mode]);
  return [mode, setMode];
}
export default useColorModeState;
//# sourceMappingURL=use-color-mode-state.js.map