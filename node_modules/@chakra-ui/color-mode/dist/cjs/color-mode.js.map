{"version":3,"sources":["../../src/color-mode.tsx"],"names":["ColorModeContext","React","createContext","colorMode","toggleColorMode","noop","__DEV__","displayName","useColorMode","useContext","ColorModeProvider","props","value","children","useSystemColorMode","defaultValue","storageManager","config","initialColorMode","setColorMode","context","controlledContext","DarkMode","LightMode","getColorModeValue","light","dark","useColorModeValue"],"mappings":"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","sourcesContent":["import { noop, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { ColorMode } from \"./color-mode.utils\"\nimport useColorModeState from \"./use-color-mode-state\"\nimport { StorageManager } from \"./storage-manager\"\n\nexport type { ColorMode }\n\ninterface ColorModeContextType {\n  colorMode: ColorMode\n  toggleColorMode: () => void\n}\n\nexport const ColorModeContext = React.createContext<ColorModeContextType>({\n  colorMode: \"light\",\n  toggleColorMode: noop,\n})\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\"\n}\n\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\nexport function useColorMode() {\n  return React.useContext(ColorModeContext)\n}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  useSystemColorMode?: boolean\n  defaultValue?: ColorMode\n  storageManager?: StorageManager\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport const ColorModeProvider: React.FC<ColorModeProviderProps> = (props) => {\n  const {\n    value,\n    children,\n    useSystemColorMode = false,\n    defaultValue = \"light\",\n    storageManager,\n  } = props\n\n  const config = {\n    useSystemColorMode,\n    initialColorMode: defaultValue,\n    storageManager,\n  }\n\n  const [colorMode, setColorMode] = useColorModeState(config)\n  const toggleColorMode = () =>\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\")\n\n  const context = { colorMode, toggleColorMode }\n\n  const controlledContext = {\n    colorMode: value as ColorMode,\n    toggleColorMode: noop,\n  }\n\n  return (\n    <ColorModeContext.Provider value={value ? controlledContext : context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\"\n}\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport const DarkMode: React.FC = ({ children }) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"dark\", toggleColorMode: noop }}\n    children={children}\n  />\n)\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\"\n}\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport const LightMode: React.FC = ({ children }) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"light\", toggleColorMode: noop }}\n    children={children}\n  />\n)\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\"\n}\n\n/**\n * Change value based on color mode\n *\n * @param light the light mode value\n * @param dark the dark mode value\n */\nexport function getColorModeValue(light: any, dark: any) {\n  return (colorMode: ColorMode) => (colorMode === \"light\" ? light : dark)\n}\n\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode()\n  return getColorModeValue(light, dark)(colorMode)\n}\n"],"file":"color-mode.js"}