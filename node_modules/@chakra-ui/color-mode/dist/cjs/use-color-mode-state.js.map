{"version":3,"sources":["../../src/use-color-mode-state.ts"],"names":["useSyncBodyClass","mode","requestAnimationFrame","useSyncSystemColorMode","fn","enabled","callback","removeListener","current","useColorModeState","options","storageManager","localStorageManager","stored","get","useSystemColorMode","initialColorMode","setMode","set"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AAMA;;AAEA;;;;;;;;AAQA,SAASA,gBAAT,CAA0BC,IAA1B,EAAwC;AACtC,wBAAU,YAAM;AACdC,IAAAA,qBAAqB,CAAC,YAAM;AAC1B,wCAAkBD,IAAI,KAAK,MAA3B;AACD,KAFoB,CAArB;AAGD,GAJD,EAIG,CAACA,IAAD,CAJH;AAKD;AAED;;;;;;;;;AAOA,SAASE,sBAAT,CAAgCC,EAAhC,EAA8CC,OAA9C,EAAgE;AAC9D,MAAMC,QAAQ,GAAG,yBAAaF,EAAb,CAAjB;AACA,wBAAU,YAAM;AACd,QAAI,CAACC,OAAL,EAAc;AACd,QAAME,cAAc,GAAG,4BAAYD,QAAQ,CAACE,OAArB,CAAvB;AACA,WAAO,YAAM;AACXD,MAAAA,cAAc,QAAd,YAAAA,cAAc;AACf,KAFD;AAGD,GAND,EAMG,CAACD,QAAD,EAAWD,OAAX,CANH;AAOD;;AAWD;;;;AAIO,SAASI,iBAAT,CACLC,OADK,EAEL;AACA,MAAMC,cAAc,GAAG,CAAAD,OAAO,QAAP,YAAAA,OAAO,CAAEC,cAAT,KAA2BC,mCAAlD;;AADA,kBAGwB,qBAAoB,YAAM;AAChD,QAAMC,MAAM,GAAGF,cAAc,CAACG,GAAf,EAAf;AAEA,QAAID,MAAJ,EAAY,OAAOA,MAAP;;AAEZ,QAAIH,OAAJ,oBAAIA,OAAO,CAAEK,kBAAb,EAAiC;AAC/B,aAAO,gCAAP;AACD;;AAED,WAAO,CAAAL,OAAO,QAAP,YAAAA,OAAO,CAAEM,gBAAT,KAA6B,OAApC;AACD,GAVuB,CAHxB;AAAA,MAGOf,IAHP;AAAA,MAGagB,OAHb;;AAeAjB,EAAAA,gBAAgB,CAACC,IAAD,CAAhB;AACAE,EAAAA,sBAAsB,CAACc,OAAD,EAAU,CAAC,EAACP,OAAD,oBAACA,OAAO,CAAEK,kBAAV,CAAX,CAAtB;AAEA,wBAAU,YAAM;AACd,QAAId,IAAJ,EAAU;AACRU,MAAAA,cAAc,CAACO,GAAf,CAAmBjB,IAAnB;AACD;AACF,GAJD,EAIG,CAACU,cAAD,EAAiBV,IAAjB,CAJH;AAMA,SAAO,CAACA,IAAD,EAAOgB,OAAP,CAAP;AACD;;eAEcR,iB","sourcesContent":["import { useLatestRef } from \"@chakra-ui/hooks\"\nimport { useEffect, useState } from \"react\"\nimport {\n  addListener,\n  ColorMode,\n  getColorScheme,\n  syncBodyClassName,\n} from \"./color-mode.utils\"\nimport { StorageManager, localStorageManager } from \"./storage-manager\"\n\n/**\n * Syncs the classname of the `<body />` based on the\n * color mode.\n *\n * @example\n *\n * If mode is 'dark', body will be `<body class=\"chakra-ui-light\"/>`\n */\nfunction useSyncBodyClass(mode: string) {\n  useEffect(() => {\n    requestAnimationFrame(() => {\n      syncBodyClassName(mode === \"dark\")\n    })\n  }, [mode])\n}\n\n/**\n * Syncs the system color mode preference with localStorage and\n * internal state.\n *\n * @param fn the function to run once user changes preference\n * @param enabled whether to run this hook or not\n */\nfunction useSyncSystemColorMode(fn: Function, enabled: boolean) {\n  const callback = useLatestRef(fn)\n  useEffect(() => {\n    if (!enabled) return\n    const removeListener = addListener(callback.current)\n    return () => {\n      removeListener?.()\n    }\n  }, [callback, enabled])\n}\n\nexport interface ColorModeOptions {\n  initialColorMode?: ColorMode\n  useSystemColorMode?: boolean\n}\n\ninterface useColorModeStateOptions extends ColorModeOptions {\n  storageManager?: StorageManager\n}\n\n/**\n * React hook that sets up the localStorage, body className,\n * and reads from system preference\n */\nexport function useColorModeState<T extends useColorModeStateOptions>(\n  options?: T,\n) {\n  const storageManager = options?.storageManager || localStorageManager\n\n  const [mode, setMode] = useState<ColorMode>(() => {\n    const stored = storageManager.get()\n\n    if (stored) return stored\n\n    if (options?.useSystemColorMode) {\n      return getColorScheme()\n    }\n\n    return options?.initialColorMode || \"light\"\n  })\n\n  useSyncBodyClass(mode)\n  useSyncSystemColorMode(setMode, !!options?.useSystemColorMode)\n\n  useEffect(() => {\n    if (mode) {\n      storageManager.set(mode)\n    }\n  }, [storageManager, mode])\n\n  return [mode, setMode] as const\n}\n\nexport default useColorModeState\n"],"file":"use-color-mode-state.js"}