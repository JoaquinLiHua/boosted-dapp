"use strict";

exports.__esModule = true;
exports.useColorMode = useColorMode;
exports.getColorModeValue = getColorModeValue;
exports.useColorModeValue = useColorModeValue;
exports.LightMode = exports.DarkMode = exports.ColorModeProvider = exports.ColorModeContext = void 0;

var _utils = require("@chakra-ui/utils");

var React = _interopRequireWildcard(require("react"));

var _colorMode = require("./color-mode.utils");

var _useColorModeState2 = _interopRequireDefault(require("./use-color-mode-state"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var ColorModeContext = /*#__PURE__*/React.createContext({
  colorMode: "light",
  toggleColorMode: _utils.noop
});
exports.ColorModeContext = ColorModeContext;

if (_utils.__DEV__) {
  ColorModeContext.displayName = "ColorModeContext";
}
/**
 * React hook that reads from `ColorModeProvider` context
 * Returns the color mode and function to toggle it
 */


function useColorMode() {
  return React.useContext(ColorModeContext);
}

/**
 * Provides context for the color mode based on config in `theme`
 * Returns the color mode and function to toggle the color mode
 */
var ColorModeProvider = function ColorModeProvider(props) {
  var value = props.value,
      children = props.children,
      _props$useSystemColor = props.useSystemColorMode,
      useSystemColorMode = _props$useSystemColor === void 0 ? false : _props$useSystemColor,
      _props$defaultValue = props.defaultValue,
      defaultValue = _props$defaultValue === void 0 ? "light" : _props$defaultValue,
      storageManager = props.storageManager;
  var config = {
    useSystemColorMode: useSystemColorMode,
    initialColorMode: defaultValue,
    storageManager: storageManager
  };

  var _useColorModeState = (0, _useColorModeState2["default"])(config),
      colorMode = _useColorModeState[0],
      setColorMode = _useColorModeState[1];

  var toggleColorMode = function toggleColorMode() {
    return setColorMode(colorMode === "light" ? "dark" : "light");
  };

  var context = {
    colorMode: colorMode,
    toggleColorMode: toggleColorMode
  };
  var controlledContext = {
    colorMode: value,
    toggleColorMode: _utils.noop
  };
  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {
    value: value ? controlledContext : context
  }, children);
};

exports.ColorModeProvider = ColorModeProvider;

if (_utils.__DEV__) {
  ColorModeProvider.displayName = "ColorModeProvider";
}
/**
 * Locks the color mode to `dark`, without any way to change it.
 */


var DarkMode = function DarkMode(_ref) {
  var children = _ref.children;
  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {
    value: {
      colorMode: "dark",
      toggleColorMode: _utils.noop
    },
    children: children
  });
};

exports.DarkMode = DarkMode;

if (_utils.__DEV__) {
  DarkMode.displayName = "DarkMode";
}
/**
 * Locks the color mode to `light` without any way to change it.
 */


var LightMode = function LightMode(_ref2) {
  var children = _ref2.children;
  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {
    value: {
      colorMode: "light",
      toggleColorMode: _utils.noop
    },
    children: children
  });
};

exports.LightMode = LightMode;

if (_utils.__DEV__) {
  LightMode.displayName = "LightMode";
}
/**
 * Change value based on color mode
 *
 * @param light the light mode value
 * @param dark the dark mode value
 */


function getColorModeValue(light, dark) {
  return function (colorMode) {
    return colorMode === "light" ? light : dark;
  };
}
/**
 * Change value based on color mode.
 *
 * @param light the light mode value
 * @param dark the dark mode value
 *
 * @example
 *
 * ```js
 * const Icon = useColorModeValue(MoonIcon, SunIcon)
 * ```
 */


function useColorModeValue(light, dark) {
  var _useColorMode = useColorMode(),
      colorMode = _useColorMode.colorMode;

  return getColorModeValue(light, dark)(colorMode);
}
//# sourceMappingURL=color-mode.js.map