{"version":3,"sources":["../../src/color-mode.utils.ts"],"names":["classNames","light","dark","mockBody","classList","add","noop","remove","body","isBrowser","document","syncBodyClassName","isDark","getMediaQuery","query","mediaQueryList","window","matchMedia","matches","media","queries","lightQuery","darkQuery","getColorScheme","addListener","fn","hasOwnProperty","undefined","listener","removeListener"],"mappings":";;;;;;;;AAAA;;AAEA,IAAMA,UAAU,GAAG;AACjBC,EAAAA,KAAK,EAAE,iBADU;AAEjBC,EAAAA,IAAI,EAAE;AAFW,CAAnB;;AAOA;;;AAGA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,SAAS,EAAE;AAAEC,IAAAA,GAAG,EAAEC,WAAP;AAAaC,IAAAA,MAAM,EAAED;AAArB;AADI,CAAjB;AAIO,IAAME,IAAI,GAAGC,mBAAYC,QAAQ,CAACF,IAArB,GAA4BL,QAAzC;AAEP;;;;;;AAGO,SAASQ,iBAAT,CAA2BC,MAA3B,EAA4C;AACjDJ,EAAAA,IAAI,CAACJ,SAAL,CAAeC,GAAf,CAAmBO,MAAM,GAAGZ,UAAU,CAACE,IAAd,GAAqBF,UAAU,CAACC,KAAzD;AACAO,EAAAA,IAAI,CAACJ,SAAL,CAAeG,MAAf,CAAsBK,MAAM,GAAGZ,UAAU,CAACC,KAAd,GAAsBD,UAAU,CAACE,IAA7D;AACD;AAED;;;;;AAGA,SAASW,aAAT,CAAuBC,KAAvB,EAAsC;AACpC,MAAMC,cAAc,GAAGC,MAAM,CAACC,UAAV,oBAAGD,MAAM,CAACC,UAAP,CAAoBH,KAApB,CAAvB;AACA,MAAMI,OAAO,GAAG,CAAC,CAACH,cAAc,CAACI,KAAjB,KAA2BJ,cAAc,CAACG,OAA1D;AACA,SAAOA,OAAP;AACD;;AAEM,IAAME,OAAO,GAAG;AACrBnB,EAAAA,KAAK,EAAE,+BADc;AAErBC,EAAAA,IAAI,EAAE;AAFe,CAAhB;;AAIA,IAAMmB,UAAU,GAAG,+BAAnB;;AACA,IAAMC,SAAS,GAAG,8BAAlB;;;AAEA,SAASC,cAAT,GAA0B;AAC/B,MAAMX,MAAM,GAAGC,aAAa,CAACO,OAAO,CAAClB,IAAT,CAA5B;AACA,SAAOU,MAAM,GAAG,MAAH,GAAY,OAAzB;AACD;AAED;;;;;;AAIO,SAASY,WAAT,CAAqBC,EAArB,EAAmC;AACxC,MAAI,CAACT,MAAM,CAACU,cAAP,CAAsB,YAAtB,CAAL,EAA0C;AACxC,WAAOC,SAAP;AACD;;AAED,MAAMZ,cAAc,GAAGC,MAAM,CAACC,UAAP,CAAkBG,OAAO,CAAClB,IAA1B,CAAvB;;AAEA,MAAM0B,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBH,IAAAA,EAAE,CAAC,CAAC,CAACV,cAAc,CAACG,OAAjB,GAA2B,MAA3B,GAAoC,OAArC,CAAF;AACD,GAFD;;AAIAU,EAAAA,QAAQ;AACRb,EAAAA,cAAc,CAACS,WAAf,CAA2BI,QAA3B;AAEA,SAAO,YAAM;AACXb,IAAAA,cAAc,CAACc,cAAf,CAA8BD,QAA9B;AACD,GAFD;AAGD","sourcesContent":["import { isBrowser, noop } from \"@chakra-ui/utils\"\n\nconst classNames = {\n  light: \"chakra-ui-light\",\n  dark: \"chakra-ui-dark\",\n}\n\nexport type ColorMode = \"light\" | \"dark\"\n\n/**\n * SSR: Graceful fallback for the `body` element\n */\nconst mockBody = {\n  classList: { add: noop, remove: noop },\n}\n\nexport const body = isBrowser ? document.body : mockBody\n\n/**\n * Function to add/remove class from `body` based on color mode\n */\nexport function syncBodyClassName(isDark: boolean) {\n  body.classList.add(isDark ? classNames.dark : classNames.light)\n  body.classList.remove(isDark ? classNames.light : classNames.dark)\n}\n\n/**\n * Check if JS media query matches the query string passed\n */\nfunction getMediaQuery(query: string) {\n  const mediaQueryList = window.matchMedia?.(query)\n  const matches = !!mediaQueryList.media === mediaQueryList.matches\n  return matches\n}\n\nexport const queries = {\n  light: \"(prefers-color-scheme: light)\",\n  dark: \"(prefers-color-scheme: dark)\",\n}\nexport const lightQuery = \"(prefers-color-scheme: light)\"\nexport const darkQuery = \"(prefers-color-scheme: dark)\"\n\nexport function getColorScheme() {\n  const isDark = getMediaQuery(queries.dark)\n  return isDark ? \"dark\" : \"light\"\n}\n\n/**\n * Adds system os color mode listener, and run the callback\n * once preference changes\n */\nexport function addListener(fn: Function) {\n  if (!window.hasOwnProperty(\"matchMedia\")) {\n    return undefined\n  }\n\n  const mediaQueryList = window.matchMedia(queries.dark)\n\n  const listener = () => {\n    fn(!!mediaQueryList.matches ? \"dark\" : \"light\")\n  }\n\n  listener()\n  mediaQueryList.addListener(listener)\n\n  return () => {\n    mediaQueryList.removeListener(listener)\n  }\n}\n"],"file":"color-mode.utils.js"}