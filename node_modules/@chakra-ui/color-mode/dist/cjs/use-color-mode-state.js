"use strict";

exports.__esModule = true;
exports.useColorModeState = useColorModeState;
exports["default"] = void 0;

var _hooks = require("@chakra-ui/hooks");

var _react = require("react");

var _colorMode = require("./color-mode.utils");

var _storageManager = require("./storage-manager");

/**
 * Syncs the classname of the `<body />` based on the
 * color mode.
 *
 * @example
 *
 * If mode is 'dark', body will be `<body class="chakra-ui-light"/>`
 */
function useSyncBodyClass(mode) {
  (0, _react.useEffect)(function () {
    requestAnimationFrame(function () {
      (0, _colorMode.syncBodyClassName)(mode === "dark");
    });
  }, [mode]);
}
/**
 * Syncs the system color mode preference with localStorage and
 * internal state.
 *
 * @param fn the function to run once user changes preference
 * @param enabled whether to run this hook or not
 */


function useSyncSystemColorMode(fn, enabled) {
  var callback = (0, _hooks.useLatestRef)(fn);
  (0, _react.useEffect)(function () {
    if (!enabled) return;
    var removeListener = (0, _colorMode.addListener)(callback.current);
    return function () {
      removeListener == null ? void 0 : removeListener();
    };
  }, [callback, enabled]);
}

/**
 * React hook that sets up the localStorage, body className,
 * and reads from system preference
 */
function useColorModeState(options) {
  var storageManager = (options == null ? void 0 : options.storageManager) || _storageManager.localStorageManager;

  var _useState = (0, _react.useState)(function () {
    var stored = storageManager.get();
    if (stored) return stored;

    if (options == null ? void 0 : options.useSystemColorMode) {
      return (0, _colorMode.getColorScheme)();
    }

    return (options == null ? void 0 : options.initialColorMode) || "light";
  }),
      mode = _useState[0],
      setMode = _useState[1];

  useSyncBodyClass(mode);
  useSyncSystemColorMode(setMode, !!(options == null ? void 0 : options.useSystemColorMode));
  (0, _react.useEffect)(function () {
    if (mode) {
      storageManager.set(mode);
    }
  }, [storageManager, mode]);
  return [mode, setMode];
}

var _default = useColorModeState;
exports["default"] = _default;
//# sourceMappingURL=use-color-mode-state.js.map