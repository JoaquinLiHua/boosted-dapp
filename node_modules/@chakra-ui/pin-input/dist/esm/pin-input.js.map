{"version":3,"sources":["../../src/pin-input.tsx"],"names":["chakra","useStyleConfig","forwardRef","omitThemingProps","cx","__DEV__","getValidChildren","React","PinInputProvider","usePinInput","usePinInputField","PinInput","props","styles","children","otherProps","context","clones","map","child","cloneElement","__css","displayName","PinInputField","ref","inputProps","className"],"mappings":";;;;AAAA,SACEA,MADF,EAIEC,cAJF,EAKEC,UALF,EAMEC,gBANF,QAOO,mBAPP;AAQA,SAASC,EAAT,EAAaC,OAAb,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SACEC,gBADF,EAEEC,WAFF,EAGEC,gBAHF,QAKO,iBALP;AAgCA,OAAO,IAAMC,QAAiC,GAAIC,KAAD,IAAW;AAC1D,MAAMC,MAAM,GAAGZ,cAAc,CAAC,UAAD,EAAaW,KAAb,CAA7B;;AAEA,0BAAoCT,gBAAgB,CAACS,KAAD,CAApD;AAAA,MAAM;AAAEE,IAAAA;AAAF,GAAN;AAAA,MAAqBC,UAArB;;AACA,MAAMC,OAAO,GAAGP,WAAW,CAACM,UAAD,CAA3B;AAEA,MAAME,MAAM,GAAGX,gBAAgB,CAACQ,QAAD,CAAhB,CAA2BI,GAA3B,CAAgCC,KAAD,IAAW;AACvD,wBAAOZ,KAAK,CAACa,YAAN,CAAmBD,KAAnB,EAA0B;AAAEE,MAAAA,KAAK,EAAER;AAAT,KAA1B,CAAP;AACD,GAFc,CAAf;AAIA,sBAAO,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEG;AAAzB,KAAmCC,MAAnC,CAAP;AACD,CAXM;;AAaP,IAAIZ,OAAJ,EAAa;AACXM,EAAAA,QAAQ,CAACW,WAAT,GAAuB,UAAvB;AACD;;AAID,OAAO,IAAMC,aAAa,gBAAGrB,UAAU,CACrC,SAASqB,aAAT,CAAuBX,KAAvB,EAA8BY,GAA9B,EAAmC;AACjC,MAAMC,UAAU,GAAGf,gBAAgB;AAAGc,IAAAA;AAAH,KAAWZ,KAAX,EAAnC;AACA,sBACE,oBAAC,MAAD,CAAQ,KAAR,eACMa,UADN;AAEE,IAAA,SAAS,EAAErB,EAAE,CAAC,kBAAD,EAAqBQ,KAAK,CAACc,SAA3B;AAFf,KADF;AAMD,CAToC,CAAhC;;AAYP,IAAIrB,OAAJ,EAAa;AACXkB,EAAAA,aAAa,CAACD,WAAd,GAA4B,eAA5B;AACD","sourcesContent":["import {\n  chakra,\n  PropsOf,\n  ThemingProps,\n  useStyleConfig,\n  forwardRef,\n  omitThemingProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__, getValidChildren } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  PinInputProvider,\n  usePinInput,\n  usePinInputField,\n  UsePinInputProps,\n} from \"./use-pin-input\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n}\n\nexport interface PinInputProps\n  extends UsePinInputProps,\n    ThemingProps,\n    InputOptions {\n  /**\n   * The children of the pin input component\n   */\n  children: React.ReactNode\n}\n\nexport const PinInput: React.FC<PinInputProps> = (props) => {\n  const styles = useStyleConfig(\"PinInput\", props)\n\n  const { children, ...otherProps } = omitThemingProps(props)\n  const context = usePinInput(otherProps)\n\n  const clones = getValidChildren(children).map((child) => {\n    return React.cloneElement(child, { __css: styles })\n  })\n\n  return <PinInputProvider value={context}>{clones}</PinInputProvider>\n}\n\nif (__DEV__) {\n  PinInput.displayName = \"PinInput\"\n}\n\nexport interface PinInputFieldProps extends PropsOf<typeof chakra.input> {}\n\nexport const PinInputField = forwardRef<PinInputFieldProps, \"input\">(\n  function PinInputField(props, ref) {\n    const inputProps = usePinInputField({ ref, ...props })\n    return (\n      <chakra.input\n        {...inputProps}\n        className={cx(\"chakra-pin-input\", props.className)}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PinInputField.displayName = \"PinInputField\"\n}\n"],"file":"pin-input.js"}