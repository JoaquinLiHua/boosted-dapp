{"version":3,"sources":["../../src/skeleton.tsx"],"names":["chakra","keyframes","useStyleConfig","forwardRef","omitThemingProps","cx","__DEV__","React","StyledSkeleton","baseStyle","boxShadow","backgroundClip","cursor","color","pointerEvents","userSelect","visibility","fade","from","opacity","to","Skeleton","props","ref","styles","isLoaded","fadeDuration","className","rest","_className","animation","defaultProps","speed","displayName","range","count","Array","fill","map","_","index","SkeletonText","noOfLines","spacing","skeletonHeight","startColor","endColor","numbers","getWidth","length","number","SkeletonCircle","size"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  PropsOf,\n  keyframes,\n  useStyleConfig,\n  ThemingProps,\n  forwardRef,\n  omitThemingProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface SkeletonOptions {\n  /**\n   * The color at the animation start\n   */\n  startColor?: string\n  /**\n   * The color at the animation end\n   */\n  endColor?: string\n  /**\n   * If `true`, it'll render it's children with a nice fade transition\n   */\n  isLoaded?: boolean\n  /**\n   * The animation speed in seconds\n   * @default\n   * 0.8\n   */\n  speed?: number\n  /**\n   * The fadeIn duration in seconds\n   *\n   * @default\n   * 0.4\n   */\n  fadeDuration?: number\n}\n\nconst StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\",\n    },\n  },\n})\n\nexport type ISkeleton = SkeletonOptions\n\nexport interface SkeletonProps\n  extends PropsOf<typeof StyledSkeleton>,\n    SkeletonOptions,\n    ThemingProps {}\n\nconst fade = keyframes({\n  from: { opacity: 0 },\n  to: { opacity: 1 },\n})\n\nexport const Skeleton = forwardRef<SkeletonProps, \"div\">(function Skeleton(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Skeleton\", props)\n\n  const {\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    ...rest\n  } = omitThemingProps(props)\n\n  const _className = cx(\"chakra-skeleton\", className)\n\n  if (isLoaded) {\n    return (\n      <chakra.div\n        ref={ref}\n        className={_className}\n        __css={{ animation: `${fade} ${fadeDuration}s` }}\n        {...rest}\n      />\n    )\n  }\n\n  return (\n    <StyledSkeleton ref={ref} className={_className} {...rest} __css={styles} />\n  )\n})\n\nSkeleton.defaultProps = {\n  fadeDuration: 0.4,\n  speed: 0.8,\n}\n\nif (__DEV__) {\n  Skeleton.displayName = \"Skeleton\"\n}\n\nfunction range(count: number) {\n  return Array(count)\n    .fill(1)\n    .map((_, index) => index + 1)\n}\n\nexport interface SkeletonTextProps extends SkeletonProps {\n  noOfLines?: number\n  spacing?: SkeletonProps[\"margin\"]\n  skeletonHeight?: SkeletonProps[\"height\"]\n  startColor?: SkeletonProps[\"startColor\"]\n  endColor?: SkeletonProps[\"endColor\"]\n}\n\nexport const SkeletonText: React.FC<SkeletonTextProps> = (props) => {\n  const {\n    noOfLines = 3,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    ...rest\n  } = props\n\n  const numbers = range(noOfLines)\n\n  const getWidth = (index: number) => {\n    if (noOfLines > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\"\n    }\n    return \"100%\"\n  }\n\n  const _className = cx(\"chakra-skeleton__group\", className)\n\n  return (\n    <chakra.div className={_className} {...rest}>\n      {numbers.map((number) => (\n        <Skeleton\n          key={number}\n          height={skeletonHeight}\n          mb={number === numbers.length ? \"0\" : spacing}\n          width={getWidth(number)}\n          startColor={startColor}\n          endColor={endColor}\n        />\n      ))}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  SkeletonText.displayName = \"SkeletonText\"\n}\n\nexport const SkeletonCircle: React.FC<SkeletonProps> = ({\n  size = \"2rem\",\n  ...rest\n}) => <Skeleton borderRadius=\"full\" boxSize={size} {...rest} />\n\nif (__DEV__) {\n  SkeletonCircle.displayName = \"SkeletonCircle\"\n}\n"],"file":"skeleton.js"}