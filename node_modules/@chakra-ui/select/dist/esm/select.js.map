{"version":3,"sources":["../../src/select.tsx"],"names":["useFormControl","chakra","layoutPropNames","omitThemingProps","useMultiStyleConfig","forwardRef","cx","split","__DEV__","React","SelectField","props","ref","children","placeholder","className","rest","select","displayName","Select","styles","rootProps","icon","color","layoutProps","otherProps","rootStyles","width","height","position","field","isDisabled","DefaultIcon","IconWrapper","baseStyle","display","alignItems","justifyContent","right","pointerEvents","top","transform","SelectIcon","clone","cloneElement","role","focusable","style"],"mappings":"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","sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  layoutPropNames,\n  omitThemingProps,\n  PropsOf,\n  useMultiStyleConfig,\n  ThemingProps,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { cx, split, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface SelectFieldProps\n  extends Omit<PropsOf<typeof chakra.select>, Omitted> {\n  size?: string\n  isDisabled?: boolean\n}\n\nexport const SelectField = forwardRef<SelectFieldProps, \"select\">(\n  function SelectField(props, ref) {\n    const { children, placeholder, className, ...rest } = props\n    const select = useFormControl<HTMLSelectElement>(rest)\n\n    return (\n      <chakra.select\n        {...select}\n        ref={ref}\n        paddingRight=\"2rem\"\n        className={cx(\"chakra-select\", className)}\n      >\n        {placeholder && <option value=\"\">{placeholder}</option>}\n        {children}\n      </chakra.select>\n    )\n  },\n)\n\nif (__DEV__) {\n  SelectField.displayName = \"SelectField\"\n}\n\ninterface RootProps extends Omit<PropsOf<typeof chakra.div>, \"color\"> {}\n\ninterface SelectOptions extends FormControlOptions {\n  /**\n   * The border color when the select is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the select is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the select element will span the full width of it's parent\n   */\n  isFullWidth?: boolean\n  /**\n   * The placeholder for the select. We render an `<option/>` element that has\n   * empty value.\n   *\n   * ```jsx\n   * <option value=\"\">{placeholder}</option>\n   * ```\n   */\n  placeholder?: string\n}\n\nexport interface SelectProps\n  extends SelectFieldProps,\n    ThemingProps,\n    SelectOptions {\n  /**\n   * Props to forward to the root `div` element\n   */\n  rootProps?: RootProps\n  /**\n   * The icon element to use in the select\n   */\n  icon?: React.ReactElement<any>\n}\n\n/**\n * React component used to select one item from a list of options.\n */\nexport const Select = forwardRef<SelectProps, \"select\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Select\", props)\n\n  const { rootProps, placeholder, icon, color, ...rest } = omitThemingProps(\n    props,\n  )\n\n  const [layoutProps, otherProps] = split(rest, layoutPropNames as string[])\n\n  const rootStyles = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color,\n  }\n\n  return (\n    <chakra.div\n      className=\"chakra-select__wrapper\"\n      __css={rootStyles}\n      {...layoutProps}\n      {...rootProps}\n    >\n      <SelectField\n        ref={ref}\n        placeholder={placeholder}\n        {...otherProps}\n        __css={styles.field}\n      >\n        {props.children}\n      </SelectField>\n\n      <SelectIcon\n        data-disabled={props.isDisabled}\n        children={icon}\n        color={color}\n        __css={styles.icon}\n      />\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Select.displayName = \"Select\"\n}\n\nexport const DefaultIcon: React.FC<PropsOf<\"svg\">> = (props) => (\n  <svg viewBox=\"0 0 24 24\" {...props}>\n    <path\n      fill=\"currentColor\"\n      d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n    />\n  </svg>\n)\n\nconst IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    width: \"1.5rem\",\n    height: \"100%\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    right: \"0.5rem\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n})\n\ntype SelectIconProps = PropsOf<typeof IconWrapper>\n\nconst SelectIcon: React.FC<SelectIconProps> = (props) => {\n  const { children = <DefaultIcon />, ...rest } = props\n\n  const clone = React.cloneElement(children as any, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    // force icon to adhere to `IconWrapper` styles\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\",\n    },\n  })\n\n  return (\n    <IconWrapper\n      {...rest}\n      className=\"chakra-select__icon-wrapper\"\n      children={clone}\n    />\n  )\n}\n\nif (__DEV__) {\n  SelectIcon.displayName = \"SelectIcon\"\n}\n"],"file":"select.js"}