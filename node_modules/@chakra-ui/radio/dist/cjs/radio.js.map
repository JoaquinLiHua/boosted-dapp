{"version":3,"sources":["../../src/radio.tsx"],"names":["Radio","props","ref","group","styles","spacing","children","isFullWidth","rest","isChecked","value","onChange","name","getInputProps","getCheckboxProps","getLabelProps","htmlProps","layoutPropNames","layoutProps","otherProps","checkboxProps","inputProps","labelProps","rootStyles","width","undefined","display","alignItems","verticalAlign","checkboxStyles","justifyContent","flexShrink","control","labelStyles","userSelect","ml","label","__DEV__","displayName"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  layoutPropNames,\n  PropsOf,\n  SystemProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  forwardRef,\n  omitThemingProps,\n} from \"@chakra-ui/system\"\nimport { split, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useRadioGroupContext } from \"./radio-group\"\nimport { useRadio, UseRadioProps } from \"./use-radio\"\n\ninterface BaseControlProps\n  extends Omit<\n    PropsOf<typeof chakra.div>,\n    \"onChange\" | \"defaultChecked\" | \"checked\"\n  > {}\n\nexport interface RadioProps\n  extends UseRadioProps,\n    ThemingProps,\n    BaseControlProps {\n  /**\n   * The spacing between the checkbox and it's label text\n   * @default 0.5rem\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n  /**\n   * If `true`, the radio will occupy the full width of it's parent container\n   */\n  isFullWidth?: boolean\n}\n\n/**\n * Radio component is used in forms when a user needs to select a single value from\n * several options.\n *\n * @see Docs https://chakra-ui.com/components/radio\n */\nexport const Radio = forwardRef<RadioProps, \"input\">(function Radio(\n  props,\n  ref,\n) {\n  const group = useRadioGroupContext()\n  const styles = useMultiStyleConfig(\"Radio\", { ...group, ...props })\n\n  const {\n    spacing = \"0.5rem\",\n    children,\n    isFullWidth,\n    ...rest\n  } = omitThemingProps(props)\n\n  let isChecked = props.isChecked || false\n  if (group?.value && props.value) {\n    isChecked = group.value === props.value\n  }\n\n  let onChange = props.onChange\n  if (group?.onChange && props.value) {\n    onChange = group.onChange\n  }\n\n  const name = props?.name ?? group?.name\n\n  const {\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    htmlProps,\n  } = useRadio({\n    ...rest,\n    isChecked,\n    onChange,\n    name,\n  })\n\n  const [layoutProps, otherProps] = split(htmlProps, layoutPropNames as any)\n\n  const checkboxProps = getCheckboxProps(otherProps)\n  const inputProps = getInputProps({}, ref)\n  const labelProps = getLabelProps()\n\n  const rootStyles = {\n    width: isFullWidth ? \"full\" : undefined,\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n  }\n\n  const checkboxStyles = {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexShrink: 0,\n    ...styles.control,\n  }\n\n  const labelStyles = {\n    userSelect: \"none\",\n    ml: spacing,\n    ...styles.label,\n  }\n\n  return (\n    <chakra.label className=\"chakra-radio\" {...layoutProps} __css={rootStyles}>\n      <input className=\"chakra-radio__input\" {...inputProps} />\n      <chakra.div\n        className=\"chakra-radio__control\"\n        {...checkboxProps}\n        __css={checkboxStyles}\n      />\n      {children && (\n        <chakra.div\n          className=\"chakra-radio__label\"\n          {...labelProps}\n          __css={labelStyles}\n          children={children}\n        />\n      )}\n    </chakra.label>\n  )\n})\n\nif (__DEV__) {\n  Radio.displayName = \"Radio\"\n}\n"],"file":"radio.js"}