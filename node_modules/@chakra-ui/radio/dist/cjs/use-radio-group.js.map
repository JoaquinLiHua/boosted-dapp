{"version":3,"sources":["../../src/use-radio-group.ts"],"names":["useRadioGroup","props","onChangeProp","onChange","valueProp","value","defaultValue","nameProp","name","isNative","htmlProps","valueState","setValue","isControlled","ref","focus","rootNode","current","query","firstEnabledAndCheckedInput","querySelector","firstEnabledInput","fallbackName","undefined","eventOrValue","nextValue","target","getRootProps","_ref","role","getRadioProps","checkedKey"],"mappings":"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","sourcesContent":["import { useControllableProp, useId } from \"@chakra-ui/hooks\"\nimport { isInputEvent, StringOrNumber, Dict, mergeRefs } from \"@chakra-ui/utils\"\nimport { ChangeEvent, useCallback, useRef, useState } from \"react\"\n\ntype EventOrValue = ChangeEvent<HTMLInputElement> | StringOrNumber\n\nexport interface UseRadioGroupProps {\n  /**\n   * The value of the radio to be `checked`\n   * (in controlled mode)\n   */\n  value?: StringOrNumber\n  /**\n   * The value of the radio to be `checked`\n   * initially (in uncontrolled mode)\n   */\n  defaultValue?: StringOrNumber\n  /**\n   * Function called once a radio is checked\n   * @param nextValue the value of the checked radio\n   */\n  onChange?(nextValue: StringOrNumber): void\n  /**\n   * The `name` attribute forwarded to each `radio` element\n   */\n  name?: string\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   */\n  isNative?: boolean\n}\n\n/**\n * React hook to manage a group of radio inputs\n */\nexport function useRadioGroup(props: UseRadioGroupProps = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isNative,\n    ...htmlProps\n  } = props\n\n  const [valueState, setValue] = useState<StringOrNumber>(defaultValue || \"\")\n\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const ref = useRef<any>(null)\n\n  const focus = useCallback(() => {\n    const rootNode = ref.current\n    if (!rootNode) return\n\n    let query = `input:not(:disabled):checked`\n\n    const firstEnabledAndCheckedInput = rootNode.querySelector(\n      query,\n    ) as HTMLElement\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus()\n      return\n    }\n\n    query = `input:not(:disabled)`\n\n    const firstEnabledInput = rootNode.querySelector(query) as HTMLElement\n    firstEnabledInput?.focus()\n  }, [])\n\n  /**\n   * All radio options must use the same name\n   */\n  const fallbackName = useId(undefined, `radio`)\n  const name = nameProp || fallbackName\n\n  const onChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      const nextValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp?.(nextValue)\n    },\n    [onChangeProp, isControlled],\n  )\n\n  return {\n    getRootProps: (props: Dict = {}, _ref: React.Ref<any> = null) => ({\n      ...props,\n      ref: mergeRefs(_ref, ref),\n      role: \"radiogroup\",\n    }),\n    getRadioProps: (props: Dict = {}, ref: React.Ref<any> = null) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        ref,\n        name,\n        [checkedKey]: props.value === value,\n        onChange,\n      }\n    },\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    htmlProps,\n  }\n}\n\nexport type UseRadioGroupReturn = ReturnType<typeof useRadioGroup>\n"],"file":"use-radio-group.js"}