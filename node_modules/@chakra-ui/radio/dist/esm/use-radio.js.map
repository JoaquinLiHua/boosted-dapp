{"version":3,"sources":["../../src/use-radio.ts"],"names":["useBoolean","useControllableProp","dataAttr","ariaAttr","callAllHandlers","mergeRefs","visuallyHiddenStyle","useRef","useState","useCallback","useRadio","props","defaultIsChecked","isChecked","isCheckedProp","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isInvalid","name","value","id","htmlProps","isFocused","setFocused","isHovered","setHovering","isActive","setActive","ref","isCheckedState","setChecked","Boolean","isControlled","handleChange","event","preventDefault","target","checked","trulyDisabled","onKeyDown","key","on","onKeyUp","off","state","getCheckboxProps","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getInputProps","_ref","type","onBlur","onFocus","disabled","readOnly","style","getLabelProps","touchAction","stop","onTouchStart","onTouchState","stopPropagation"],"mappings":"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","sourcesContent":["import { useBoolean, useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  dataAttr,\n  ariaAttr,\n  callAllHandlers,\n  Dict,\n  mergeRefs,\n} from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport {\n  useRef,\n  useState,\n  ChangeEvent,\n  useCallback,\n  Ref,\n  SyntheticEvent,\n} from \"react\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update it's value (since it's now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This sets `aria-invalid` to `true`.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This sets `aria-invalid` to `true`.\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultIsChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isInvalid,\n    name,\n    value,\n    id,\n    ...htmlProps\n  } = props\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovering] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultIsChecked))\n\n  const [isControlled, isChecked] = useControllableProp(\n    isCheckedProp,\n    isCheckedState,\n  )\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault()\n      return\n    }\n\n    if (!isControlled) {\n      setChecked(event.target.checked)\n    }\n\n    onChange?.(event)\n  }\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps: (props: Dict = {}, ref: Ref<any> = null) => ({\n      ...props,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off),\n    }),\n    getInputProps: (props: Dict = {}, _ref: Ref<any> = null) => ({\n      ...props,\n      ref: mergeRefs(_ref, ref),\n      type: \"radio\",\n      name,\n      value,\n      id,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(props.onBlur, setFocused.off),\n      onFocus: callAllHandlers(props.onFocus, setFocused.on),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      \"aria-required\": ariaAttr(isRequired),\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      \"aria-disabled\": ariaAttr(isDisabled),\n      style: visuallyHiddenStyle,\n    }),\n    getLabelProps: (props: Dict = {}, ref: Ref<any> = null) => {\n      return {\n        ...props,\n        ref,\n        style: {\n          ...props.style,\n          touchAction: \"none\",\n        },\n        onMouseDown: callAllHandlers(props.onMouseDown, stop),\n        onTouchStart: callAllHandlers(props.onTouchState, stop),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-checked\": dataAttr(isChecked),\n        \"data-invalid\": dataAttr(isInvalid),\n      }\n    },\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stop(event: SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n"],"file":"use-radio.js"}