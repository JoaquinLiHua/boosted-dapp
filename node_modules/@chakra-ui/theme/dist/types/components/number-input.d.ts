declare const numberInput: import("@chakra-ui/theme-tools").MultiStyleConfig<{
    field: string;
    stepper: string;
    stepperGroup: string;
}, (props: Record<string, any>) => {
    field: {
        width: string;
        outline: number;
        position: string;
        appearance: string;
        transition: string;
    } | undefined;
    stepperGroup: {
        width: string;
    };
    stepper: {
        borderLeft: string;
        borderColor: any;
        color: any;
        _active: {
            bg: any;
        };
        _disabled: {
            opacity: number;
            cursor: string;
        };
    };
}, {
    sm: {
        field: {
            fontSize: string;
            pl: number;
            paddingRight: number;
            h: number;
            borderRadius: string;
        } | {
            fontSize: string;
            pl: number;
            paddingRight: number;
            h: number;
            borderRadius: string;
        } | {
            fontSize: string;
            pl: number;
            paddingRight: number;
            h: number;
            borderRadius: string;
        } | undefined;
        stepper: {
            fontSize: string;
            _first: {
                borderTopRightRadius: string;
            };
            _last: {
                borderBottomRightRadius: string;
                mt: string;
                borderTopWidth: number;
            };
        };
    };
    md: {
        field: {
            fontSize: string;
            pl: number;
            paddingRight: number;
            h: number;
            borderRadius: string;
        } | {
            fontSize: string;
            pl: number;
            paddingRight: number;
            h: number;
            borderRadius: string;
        } | {
            fontSize: string;
            pl: number;
            paddingRight: number;
            h: number;
            borderRadius: string;
        } | undefined;
        stepper: {
            fontSize: string;
            _first: {
                borderTopRightRadius: string;
            };
            _last: {
                borderBottomRightRadius: string;
                mt: string;
                borderTopWidth: number;
            };
        };
    };
    lg: {
        field: {
            fontSize: string;
            pl: number;
            paddingRight: number;
            h: number;
            borderRadius: string;
        } | {
            fontSize: string;
            pl: number;
            paddingRight: number;
            h: number;
            borderRadius: string;
        } | {
            fontSize: string;
            pl: number;
            paddingRight: number;
            h: number;
            borderRadius: string;
        } | undefined;
        stepper: {
            fontSize: string;
            _first: {
                borderTopRightRadius: string;
            };
            _last: {
                borderBottomRightRadius: string;
                mt: string;
                borderTopWidth: number;
            };
        };
    };
}, {
    outline: (props: Record<string, any>) => {
        field: {
            border: string;
            borderColor: any;
            bg: any;
            _hover: {
                borderColor: any;
            };
            _readOnly: {
                boxShadow: string;
                userSelect: string;
            };
            _disabled: {
                opacity: number;
                cursor: string;
            };
            _focus: {
                borderColor: any;
                boxShadow: string;
            };
            _invalid: {
                borderColor: any;
                boxShadow: string;
            };
        };
        addon: {
            border: string;
            borderColor: any;
            bg: any;
        };
    };
    filled: (props: Record<string, any>) => {
        field: {
            border: string;
            borderColor: string;
            bg: any;
            _hover: {
                bg: any;
            };
            _readOnly: {
                boxShadow: string;
                userSelect: string;
            };
            _disabled: {
                opacity: number;
                cursor: string;
            };
            _focus: {
                bg: string;
                borderColor: any;
            };
            _invalid: {
                borderColor: any;
            };
        };
        addon: {
            border: string;
            borderColor: string;
            bg: any;
        };
    };
    flushed: (props: Record<string, any>) => {
        field: {
            borderBottom: string;
            borderColor: string;
            borderRadius: number;
            paddingX: number;
            bg: string;
            _readOnly: {
                boxShadow: string;
                userSelect: string;
            };
            _focus: {
                borderColor: any;
            };
            _invalid: {
                borderColor: any;
            };
        };
        addon: {
            borderBottom: string;
            borderColor: string;
            borderRadius: number;
            paddingX: number;
            bg: string;
        };
    };
    unstyled: {
        field: {
            bg: string;
            paddingX: number;
            height: string;
        };
        addon: {
            bg: string;
            paddingX: number;
            height: string;
        };
    };
}> & {
    propTypes: {
        variant?: "outline" | "unstyled" | "filled" | "flushed" | undefined;
        size?: "md" | "sm" | "lg" | undefined;
        colorScheme?: string | undefined;
    };
};
export default numberInput;
