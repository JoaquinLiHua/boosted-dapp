function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { generateStripe, getColor, mode, multiStyleConfig } from "@chakra-ui/theme-tools";
var progress = multiStyleConfig({
  parts: {
    track: "the linear progress track",
    filledTrack: "the inner filled track",
    label: "the value indicator or label"
  },
  baseStyle: function baseStyle(props) {
    return {
      label: {
        lineHeight: "1",
        fontSize: "0.25em",
        fontWeight: "bold",
        color: "white"
      },
      track: {
        bg: mode("gray.100", "whiteAlpha.300")(props)
      },
      filledTrack: _extends({
        transition: "all 0.3s"
      }, filledStyle(props))
    };
  },
  sizes: {
    xs: {
      track: {
        h: "0.25rem"
      }
    },
    sm: {
      track: {
        h: "0.5rem"
      }
    },
    md: {
      track: {
        h: "0.75rem"
      }
    },
    lg: {
      track: {
        h: "1rem"
      }
    }
  },
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

function filledStyle(props) {
  var {
    colorScheme: c,
    theme: t,
    isIndeterminate,
    hasStripe
  } = props;
  var stripeStyle = mode(generateStripe(), generateStripe("1rem", "rgba(0,0,0,0.1)"))(props);
  var bg = mode(c + ".500", c + ".200")(props);
  var gradient = "linear-gradient(\n    to right,\n    transparent 0%,\n    " + getColor(t, bg) + " 50%,\n    transparent 100%\n  )";
  var addStripe = !isIndeterminate && hasStripe;
  return _extends({}, addStripe && stripeStyle, isIndeterminate ? {
    bgImage: gradient
  } : {
    bg
  });
}

export default progress;
//# sourceMappingURL=progress.js.map