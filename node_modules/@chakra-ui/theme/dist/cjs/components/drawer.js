"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _themeTools = require("@chakra-ui/theme-tools");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var drawer = (0, _themeTools.multiStyleConfig)({
  parts: {
    overlay: "the overlay or shim",
    content: "the main content wrapper",
    header: "the content heading",
    body: "the main content area",
    footer: "the action footer"
  },
  baseStyle: function baseStyle(props) {
    var isFullHeight = props.isFullHeight;
    return {
      overlay: {
        bg: "blackAlpha.600"
      },
      content: _extends({}, isFullHeight && {
        height: "100vh"
      }, {
        bg: (0, _themeTools.mode)("white", "gray.700")(props),
        color: "inherit",
        boxShadow: (0, _themeTools.mode)("lg", "dark-lg")(props)
      }),
      header: {
        px: 6,
        py: 4,
        fontSize: "xl",
        fontWeight: "semibold"
      },
      body: {
        px: 6,
        py: 2,
        flex: 1,
        overflow: "auto"
      },
      footer: {
        px: 6,
        py: 4
      }
    };
  },
  sizes: {
    xs: getSize("xs"),
    sm: getSize("md"),
    md: getSize("lg"),
    lg: getSize("2xl"),
    xl: getSize("4xl"),
    full: getSize("full")
  },
  defaultProps: {
    size: "xs"
  }
});
/**
 * Since the `maxWidth` prop references theme.sizes internally,
 * we can leverage that to size our modals.
 */

function getSize(value) {
  if (value === "full") {
    return {
      content: {
        maxW: "100vw",
        h: "100vh"
      }
    };
  }

  return {
    content: {
      maxW: value
    }
  };
}

var _default = drawer;
exports["default"] = _default;
//# sourceMappingURL=drawer.js.map