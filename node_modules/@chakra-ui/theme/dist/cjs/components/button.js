"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _themeTools = require("@chakra-ui/theme-tools");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var ghost = function ghost(props) {
  var c = props.colorScheme,
      theme = props.theme;

  if (c === "gray") {
    return {
      color: (0, _themeTools.mode)("inherit", "whiteAlpha.900")(props),
      _hover: {
        bg: (0, _themeTools.mode)("gray.100", "whiteAlpha.200")(props)
      },
      _active: {
        bg: (0, _themeTools.mode)("gray.200", "whiteAlpha.300")(props)
      }
    };
  }

  var darkHoverBg = (0, _themeTools.transparentize)(c + ".200", 0.12)(theme);
  var darkActiveBg = (0, _themeTools.transparentize)(c + ".200", 0.24)(theme);
  return {
    color: (0, _themeTools.mode)(c + ".500", c + ".200")(props),
    bg: "transparent",
    _hover: {
      bg: (0, _themeTools.mode)(c + ".50", darkHoverBg)(props)
    },
    _active: {
      bg: (0, _themeTools.mode)(c + ".100", darkActiveBg)(props)
    }
  };
};

var button = (0, _themeTools.styleConfig)({
  baseStyle: {
    lineHeight: "1.2",
    borderRadius: "md",
    fontWeight: "semibold",
    _focus: {
      boxShadow: "outline"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed",
      boxShadow: "none"
    }
  },
  variants: {
    ghost: ghost,
    outline: function outline(props) {
      var c = props.colorScheme;
      var borderColor = (0, _themeTools.mode)("gray.200", "whiteAlpha.300")(props);
      return _extends({
        border: "1px solid",
        borderColor: c === "gray" ? borderColor : "currentColor"
      }, ghost(props));
    },
    solid: function solid(props) {
      var c = props.colorScheme;
      if (c === "gray") return {
        bg: (0, _themeTools.mode)("gray.100", "whiteAlpha.200")(props),
        _hover: {
          bg: (0, _themeTools.mode)("gray.200", "whiteAlpha.300")(props)
        },
        _active: {
          bg: (0, _themeTools.mode)("gray.300", "whiteAlpha.400")(props)
        }
      };
      return {
        bg: (0, _themeTools.mode)(c + ".500", c + ".200")(props),
        color: (0, _themeTools.mode)("white", "gray.800")(props),
        _hover: {
          bg: (0, _themeTools.mode)(c + ".600", c + ".300")(props)
        },
        _active: {
          bg: (0, _themeTools.mode)(c + ".700", c + ".400")(props)
        }
      };
    },
    link: function link(props) {
      var c = props.colorScheme;
      return {
        padding: 0,
        height: "auto",
        lineHeight: "normal",
        color: (0, _themeTools.mode)(c + ".500", c + ".200")(props),
        _hover: {
          textDecoration: "underline"
        },
        _active: {
          color: (0, _themeTools.mode)(c + ".700", c + ".500")(props)
        }
      };
    },
    unstyled: {
      bg: "none",
      color: "inherit",
      display: "inline",
      lineHeight: "inherit",
      m: 0,
      p: 0
    }
  },
  sizes: {
    lg: {
      h: 12,
      minW: 12,
      fontSize: "lg",
      px: 6
    },
    md: {
      h: 10,
      minW: 10,
      fontSize: "md",
      px: 4
    },
    sm: {
      h: 8,
      minW: 8,
      fontSize: "sm",
      px: 3
    },
    xs: {
      h: 6,
      minW: 6,
      fontSize: "xs",
      px: 2
    }
  },
  defaultProps: {
    variant: "solid",
    size: "md",
    colorScheme: "gray"
  }
});
var _default = button;
exports["default"] = _default;
//# sourceMappingURL=button.js.map