"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _themeTools = require("@chakra-ui/theme-tools");

var _badge = _interopRequireDefault(require("./badge"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var tag = (0, _themeTools.multiStyleConfig)({
  parts: {
    container: "the tag container",
    label: "the tag inner text",
    closeButton: "the close button"
  },
  baseStyle: {
    container: {
      fontWeight: "medium",
      lineHeight: 1.2,
      outline: 0,
      _focus: {
        boxShadow: "outline"
      }
    },
    label: {
      lineHeight: 1.2
    },
    closeButton: {
      fontSize: "18px",
      w: "1.25rem",
      h: "1.25rem",
      borderRadius: "sm",
      ml: "0.375rem",
      mr: "-1",
      opacity: 0.5,
      _disabled: {
        opacity: 0.4
      },
      _focus: {
        boxShadow: "outline",
        bg: "rgba(0, 0, 0, 0.14)"
      },
      _hover: {
        opacity: 0.8
      },
      _active: {
        opacity: 1
      }
    }
  },
  sizes: {
    sm: {
      container: {
        minH: "1.25rem",
        minW: "1.25rem",
        fontSize: "xs",
        px: 1,
        borderRadius: "sm"
      }
    },
    md: {
      container: {
        minH: "1.5rem",
        minW: "1.5rem",
        fontSize: "sm",
        borderRadius: "md",
        px: 2
      }
    },
    lg: {
      container: {
        minH: 8,
        minW: 8,
        fontSize: "md",
        borderRadius: "md",
        px: 3
      }
    }
  },
  variants: {
    subtle: function subtle(props) {
      var _badge$variants;

      return {
        container: (_badge$variants = _badge["default"].variants) == null ? void 0 : _badge$variants.subtle(props)
      };
    },
    solid: function solid(props) {
      var _badge$variants2;

      return {
        container: (_badge$variants2 = _badge["default"].variants) == null ? void 0 : _badge$variants2.solid(props)
      };
    },
    outline: function outline(props) {
      var _badge$variants3;

      return {
        container: (_badge$variants3 = _badge["default"].variants) == null ? void 0 : _badge$variants3.outline(props)
      };
    }
  },
  defaultProps: {
    size: "lg",
    variant: "subtle",
    colorScheme: "gray"
  }
});
var _default = tag;
exports["default"] = _default;
//# sourceMappingURL=tag.js.map