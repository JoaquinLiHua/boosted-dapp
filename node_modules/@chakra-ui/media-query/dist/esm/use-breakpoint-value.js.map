{"version":3,"sources":["../../src/use-breakpoint-value.ts"],"names":["getClosestValue","useBreakpoint","isArray","arrayToObjectNotation","useBreakpointValue","values","breakpoint","obj"],"mappings":"AAAA,SAASA,eAAT,QAAgC,qBAAhC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,OAAT,EAAkBC,qBAAlB,QAA+C,kBAA/C;AAEA;;;;;;;;AAOA,OAAO,SAASC,kBAAT,CAAqCC,MAArC,EAAsE;AAC3E,MAAMC,UAAU,GAAGL,aAAa,EAAhC;AACA,MAAI,CAACK,UAAL,EAAiB;AACjB,MAAMC,GAAG,GAAGL,OAAO,CAACG,MAAD,CAAP,GAAkBF,qBAAqB,CAACE,MAAD,CAAvC,GAAkDA,MAA9D;AACA,SAAOL,eAAe,CAACO,GAAD,EAAMD,UAAN,CAAtB;AACD","sourcesContent":["import { getClosestValue } from \"./media-query.utils\"\nimport { useBreakpoint } from \"./use-breakpoint\"\nimport { isArray, arrayToObjectNotation } from \"@chakra-ui/utils\"\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\nexport function useBreakpointValue<T = any>(values: Record<string, T> | T[]) {\n  const breakpoint = useBreakpoint()\n  if (!breakpoint) return\n  const obj = isArray(values) ? arrayToObjectNotation(values) : values\n  return getClosestValue(obj, breakpoint)\n}\n"],"file":"use-breakpoint-value.js"}