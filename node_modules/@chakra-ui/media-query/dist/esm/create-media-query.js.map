{"version":3,"sources":["../../src/create-media-query.ts"],"names":["isNumber","breakpoints","bps","calculateMeasurement","createMediaQueries","keys","Object","sorted","filter","bp","includes","reverse","map","breakpoint","index","minWidth","next","maxWidth","undefined","query","parseInt","toMediaString","subtract","mediaQuery","value"],"mappings":"AAAA,SAAeA,QAAf,EAAyBC,WAAW,IAAIC,GAAxC,QAAmD,kBAAnD;AACA,OAAOC,oBAAP,MAAiC,uBAAjC;AAEA;;;;;AAIA,SAASC,kBAAT,CAA4BH,WAA5B,EAA+C;AAC7C;;;AAGA,MAAMI,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYJ,WAAZ,CAAb;AAEA;;;;;AAIA,MAAMM,MAAM,GAAGL,GAAG,CAACM,MAAJ,CAAYC,EAAD,IAAQJ,IAAI,CAACK,QAAL,CAAcD,EAAd,CAAnB,EAAsCE,OAAtC,EAAf;AAEA;;;;AAGA,SAAOJ,MAAM,CAACK,GAAP,CAAW,CAACC,UAAD,EAAaC,KAAb,KAAuB;AACvC,QAAMC,QAAQ,GAAGd,WAAW,CAACY,UAAD,CAA5B;AACA,QAAMG,IAAI,GAAGT,MAAM,CAACO,KAAK,GAAG,CAAT,CAAnB;AACA,QAAMG,QAAQ,GAAGD,IAAI,GAAGf,WAAW,CAACe,IAAD,CAAd,GAAuBE,SAA5C;AAEA,QAAIC,KAAK,GAAG,EAAZ;;AAEA,QAAIC,QAAQ,CAACL,QAAD,CAAR,IAAsB,CAA1B,EAA6B;AAC3BI,MAAAA,KAAK,oBAAkBE,aAAa,CAACN,QAAD,CAA/B,MAAL;AACD;;AAED,QAAIE,QAAJ,EAAc;AACZ,UAAIE,KAAJ,EAAW;AACTA,QAAAA,KAAK,IAAI,OAAT;AACD;;AACDA,MAAAA,KAAK,qBAAmBE,aAAa,CAACC,QAAQ,CAACL,QAAD,CAAT,CAAhC,MAAL;AACD;;AAED,QAAMM,UAAsB,GAAG;AAC7BV,MAAAA,UAD6B;AAE7BI,MAAAA,QAF6B;AAG7BF,MAAAA,QAH6B;AAI7BI,MAAAA;AAJ6B,KAA/B;AAOA,WAAOI,UAAP;AACD,GA1BM,CAAP;AA2BD;;AASD,SAASD,QAAT,CAAkBE,KAAlB,EAA8B;AAC5B,SAAOrB,oBAAoB,CAACqB,KAAD,EAAQ,CAAC,IAAT,CAA3B;AACD;AAED;;;;;AAGA,SAASH,aAAT,CAAuBG,KAAvB,EAAmC;AACjC,SAAOxB,QAAQ,CAACwB,KAAD,CAAR,GAAqBA,KAArB,UAAiCA,KAAxC;AACD;;AAED,eAAepB,kBAAf","sourcesContent":["import { Dict, isNumber, breakpoints as bps } from \"@chakra-ui/utils\"\nimport calculateMeasurement from \"calculate-measurement\"\n\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\nfunction createMediaQueries(breakpoints: Dict) {\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   */\n  const keys = Object.keys(breakpoints)\n\n  /**\n   * Use only the keys matching the official breakpoints names, and sort them in\n   * largest to smallest order\n   */\n  const sorted = bps.filter((bp) => keys.includes(bp)).reverse()\n\n  /**\n   * create a min-max media query string\n   */\n  return sorted.map((breakpoint, index) => {\n    const minWidth = breakpoints[breakpoint]\n    const next = sorted[index - 1] as string | undefined\n    const maxWidth = next ? breakpoints[next] : undefined\n\n    let query = \"\"\n\n    if (parseInt(minWidth) >= 0) {\n      query = `(min-width: ${toMediaString(minWidth)})`\n    }\n\n    if (maxWidth) {\n      if (query) {\n        query += \" and \"\n      }\n      query += `(max-width: ${toMediaString(subtract(maxWidth))})`\n    }\n\n    const mediaQuery: MediaQuery = {\n      breakpoint,\n      maxWidth,\n      minWidth,\n      query,\n    }\n\n    return mediaQuery\n  })\n}\n\ninterface MediaQuery {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n  query: string\n}\n\nfunction subtract(value: any) {\n  return calculateMeasurement(value, -0.01)\n}\n\n/**\n * Convert media query value to string\n */\nfunction toMediaString(value: any) {\n  return isNumber(value) ? `${value}px` : value\n}\n\nexport default createMediaQueries\n"],"file":"create-media-query.js"}