{"version":3,"sources":["../../src/use-accordion.ts"],"names":["useDescendant","useDescendants","useControllableState","useFocusEffect","useIds","addItem","callAllHandlers","createOnKeyDown","getNextIndex","getPrevIndex","getValidChildren","isArray","mergeRefs","removeItem","createContext","useCallback","cloneElement","useRef","useState","warn","useAccordion","props","onChange","defaultIndex","index","indexProp","allowMultiple","allowToggle","children","htmlProps","allowMultipleAndAllowToggle","domContext","focusedIndex","setFocusedIndex","setIndex","value","defaultValue","propsMap","validChildren","_children","map","child","idx","isExpanded","includes","isOpen","nextState","AccordionProvider","useAccordionContext","name","errorMessage","useAccordionItem","isDisabled","isFocusable","id","descendants","onOpen","onClose","buttonRef","buttonId","panelId","focusableNotDisabled","element","current","context","disabled","focusable","shouldFocus","onClick","onKeyDown","keyMap","ArrowDown","nextIndex","length","nextAccordion","focus","ArrowUp","prevIndex","prevAccordion","Home","firstAccordion","End","lastAccordion","onFocus","getButtonProps","ref","getPanelProps","role","hidden"],"mappings":"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","sourcesContent":["import { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport { useControllableState, useFocusEffect, useIds } from \"@chakra-ui/hooks\"\nimport {\n  addItem,\n  callAllHandlers,\n  createOnKeyDown,\n  Dict,\n  getNextIndex,\n  getPrevIndex,\n  getValidChildren,\n  isArray,\n  mergeRefs,\n  removeItem,\n  __DEV__,\n  createContext,\n} from \"@chakra-ui/utils\"\nimport {\n  Ref,\n  ReactNode,\n  useCallback,\n  cloneElement,\n  useRef,\n  useState,\n} from \"react\"\nimport * as warn from \"./warning\"\n\nexport type ExpandedIndex = number | number[]\n\nexport interface UseAccordionProps {\n  /**\n   * If `true`, multiple accordion items can be expanded at once.\n   */\n  allowMultiple?: boolean\n  /**\n   * If `true`, any expanded accordion item can be collapsed again.\n   */\n  allowToggle?: boolean\n  /**\n   * The index(es) of the expanded accordion item\n   */\n  index?: ExpandedIndex\n  /**\n   * The initial index(es) of the expanded accordion item\n   */\n  defaultIndex?: ExpandedIndex\n  /**\n   * The callback invoked when accordion items are expanded or collapsed.\n   */\n  onChange?: (expandedIndex: ExpandedIndex) => void\n  /**\n   * The content of the accordion. Must be `AccordionItem`\n   */\n  children: ReactNode\n}\n\n/**\n * useAccordion hook provides all the state and focus management logic\n * for accordion items.\n */\nexport function useAccordion(props: UseAccordionProps) {\n  const {\n    onChange,\n    defaultIndex,\n    index: indexProp,\n    allowMultiple,\n    allowToggle,\n    children,\n    ...htmlProps\n  } = props\n\n  // validate the props and `warn` if used incorrectly\n  warn.allowMultiple(props)\n  warn.allowMultipleAndAllowToggle(props)\n\n  /**\n   * Think of this as the register to each accordion item.\n   * We used to manage focus between accordion item buttons.\n   *\n   * Every accordion item, registers their button refs in this context\n   */\n  const domContext = useDescendants()\n\n  /**\n   * This state is used to track the index focused accordion\n   * button when click on the button, tab on the button, or\n   * use the down/up arrow to navigate.\n   */\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  /**\n   * Hook that manages the controlled and un-controlled state\n   * for the accordion.\n   */\n  const [index, setIndex] = useControllableState({\n    value: indexProp,\n    defaultValue: () => {\n      if (allowMultiple) {\n        return defaultIndex ?? []\n      } else {\n        return defaultIndex ?? -1\n      }\n    },\n    onChange,\n    propsMap: {\n      value: \"index\",\n      defaultValue: \"defaultIndex\",\n    },\n  })\n\n  /**\n   * Filter out invalid children (null, false), in the case\n   * of conditional rendering\n   */\n  const validChildren = getValidChildren(children)\n\n  /**\n   * Clone the accordion items and pass them the `onChange`\n   * and `isOpen`\n   */\n  const _children = validChildren.map((child, idx) => {\n    const isExpanded = isArray(index) ? index.includes(idx) : index === idx\n\n    return cloneElement(child, {\n      isOpen: isExpanded,\n      onChange: (isOpen: boolean) => {\n        if (allowMultiple && isArray(index)) {\n          const nextState = isOpen\n            ? addItem(index, idx)\n            : removeItem(index, idx)\n          setIndex(nextState)\n        } else {\n          if (isOpen) {\n            setIndex(idx)\n          } else if (allowToggle) {\n            setIndex(-1)\n          }\n        }\n      },\n    })\n  })\n\n  return {\n    children: _children,\n    htmlProps,\n    focusedIndex,\n    setFocusedIndex,\n    domContext,\n  }\n}\n\nexport type UseAccordionReturn = ReturnType<typeof useAccordion>\n\ntype AccordionContext = Omit<UseAccordionReturn, \"children\" | \"htmlProps\"> & {\n  reduceMotion: boolean\n}\n\nconst [AccordionProvider, useAccordionContext] = createContext<\n  AccordionContext\n>({\n  name: \"AccordionContext\",\n  errorMessage:\n    \"useAccordionContext: `context` is undefined. Seems you forgot to wrap the accordion components in `<Accordion />`\",\n})\n\nexport { AccordionProvider, useAccordionContext }\n\nexport interface UseAccordionItemProps {\n  /**\n   * If `true`, expands the accordion in the controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the accordion item will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the accordion item will be focusable.\n   */\n  isFocusable?: boolean\n  /**\n   * A unique id for the accordion item.\n   */\n  id?: string\n  /**\n   * The callback fired when the accordion is expanded/collapsed.\n   */\n  onChange?: (isOpen: boolean) => void\n}\n\n/**\n * useAccordionItem\n *\n * React hook that provides the open/close functionality\n * for an accordion item and it's children\n */\nexport function useAccordionItem(props: UseAccordionItemProps) {\n  const { isDisabled, isFocusable, onChange, isOpen, id, ...htmlProps } = props\n\n  const { domContext, focusedIndex, setFocusedIndex } = useAccordionContext()\n  const { descendants } = domContext\n\n  const onOpen = () => {\n    onChange?.(true)\n  }\n\n  const onClose = () => {\n    onChange?.(false)\n  }\n\n  const buttonRef = useRef<HTMLElement>(null)\n\n  /**\n   * Generate unique ids for all accordion item components (button and panel)\n   */\n  const [buttonId, panelId] = useIds(id, `accordion-button`, `accordion-panel`)\n\n  warn.focusableNotDisabled(props)\n\n  /**\n   * Think of this as a way to register this accordion item\n   * with it's parent `useAccordion`\n   */\n  const index = useDescendant({\n    element: buttonRef.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable,\n  })\n\n  const shouldFocus = index === focusedIndex\n\n  /**\n   * Autofocus the accordion button when\n   * the active index matched the accordion item's index\n   */\n  useFocusEffect(buttonRef, { shouldFocus })\n\n  /**\n   * Toggle the visibility of the accordion item\n   */\n  const onClick = useCallback(() => {\n    onChange?.(!isOpen)\n    setFocusedIndex(index)\n  }, [index, isOpen, onChange, setFocusedIndex])\n\n  /**\n   * Manage keyboard navigation between accordion items.\n   * `createOnKeyDown` makes it easy to write actions\n   * for each event key\n   */\n  const onKeyDown = createOnKeyDown({\n    keyMap: {\n      ArrowDown: () => {\n        const nextIndex = getNextIndex(index, descendants.length)\n        const nextAccordion = descendants[nextIndex]\n        nextAccordion?.element?.focus()\n      },\n      ArrowUp: () => {\n        const prevIndex = getPrevIndex(index, descendants.length)\n        const prevAccordion = descendants[prevIndex]\n        prevAccordion?.element?.focus()\n      },\n      Home: () => {\n        const firstAccordion = descendants[0]\n        firstAccordion?.element?.focus()\n      },\n      End: () => {\n        const lastAccordion = descendants[descendants.length - 1]\n        lastAccordion?.element?.focus()\n      },\n    },\n  })\n\n  /**\n   * Since each accordion item's button still remains tabbable, let's\n   * update the focusedIndex when it receives focus\n   */\n  const onFocus = useCallback(() => setFocusedIndex(index), [\n    index,\n    setFocusedIndex,\n  ])\n\n  const getButtonProps = useCallback(\n    (props: Dict = {}, ref: Ref<any> = null) => ({\n      ...props,\n      ref: mergeRefs(buttonRef, ref),\n      id: buttonId,\n      disabled: !!isDisabled,\n      \"aria-expanded\": !!isOpen,\n      \"aria-controls\": panelId,\n      onClick: callAllHandlers(props.onClick, onClick),\n      onFocus: callAllHandlers(props.onFocus, onFocus),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    }),\n    [buttonId, isDisabled, isOpen, onClick, onFocus, onKeyDown, panelId],\n  )\n\n  const getPanelProps = useCallback(\n    (props: Dict = {}, ref: Ref<any> = null) => ({\n      ...props,\n      ref,\n      role: \"region\",\n      id: panelId,\n      \"aria-labelledby\": buttonId,\n      hidden: !isOpen,\n    }),\n    [buttonId, isOpen, panelId],\n  )\n\n  return {\n    isOpen,\n    isDisabled,\n    isFocusable,\n    onOpen,\n    onClose,\n    getButtonProps,\n    getPanelProps,\n    htmlProps,\n  }\n}\n\nexport type UseAccordionItemReturn = ReturnType<typeof useAccordionItem>\n"],"file":"use-accordion.js"}