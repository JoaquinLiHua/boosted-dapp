{"version":3,"sources":["../../src/accordion.tsx"],"names":["Collapse","Icon","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","cx","createContext","runIfFn","__DEV__","React","useMemo","AccordionProvider","useAccordion","useAccordionContext","useAccordionItem","Accordion","props","ref","styles","_props","children","htmlProps","context","_context","reduceMotion","className","displayName","AccordionItemProvider","useAccordionItemContext","name","errorMessage","AccordionItem","container","isExpanded","isOpen","isDisabled","useAccordionItemState","onClose","onOpen","AccordionButton","getButtonProps","buttonProps","buttonStyles","display","alignItems","width","transition","outline","button","AccordionPanel","getPanelProps","hidden","panelProps","_className","child","panel","AccordionIcon","iconStyles","fontSize","opacity","transform","undefined","transformOrigin"],"mappings":"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","sourcesContent":["import { Collapse } from \"@chakra-ui/collapse\"\nimport { Icon, IconProps } from \"@chakra-ui/icon\"\nimport {\n  chakra,\n  forwardRef,\n  PropsOf,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport {\n  cx,\n  createContext,\n  Omit,\n  ReactNodeOrRenderProp,\n  runIfFn,\n  __DEV__,\n  Dict,\n} from \"@chakra-ui/utils\"\nimport React, { useMemo } from \"react\"\nimport {\n  AccordionProvider,\n  useAccordion,\n  useAccordionContext,\n  useAccordionItem,\n  UseAccordionItemProps,\n  UseAccordionItemReturn,\n  UseAccordionProps,\n} from \"./use-accordion\"\n\ninterface DivProps extends PropsOf<typeof chakra.div> {}\n\nexport interface AccordionProps\n  extends UseAccordionProps,\n    Omit<DivProps, keyof UseAccordionProps>,\n    ThemingProps {\n  /**\n   * If `true`, height animation and transitions will be disabled.\n   */\n  reduceMotion?: boolean\n}\n\n/**\n * The wrapper that provides context and focus management\n * for all accordion items.\n *\n * It wraps all accordion items in a `div` for better grouping.\n * @see Docs https://chakra-ui.com/components/accordion\n */\nexport const Accordion = forwardRef<AccordionProps, \"div\">(function Accordion(\n  props,\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Accordion\", props)\n  const _props = omitThemingProps(props)\n\n  const { children, htmlProps, ...context } = useAccordion(_props)\n\n  const _context = useMemo(\n    () => ({ ...context, reduceMotion: !!props.reduceMotion }),\n    [context, props.reduceMotion],\n  )\n\n  return (\n    <AccordionProvider value={_context}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          ref={ref}\n          {...htmlProps}\n          className={cx(\"chakra-accordion\", props.className)}\n        >\n          {children}\n        </chakra.div>\n      </StylesProvider>\n    </AccordionProvider>\n  )\n})\n\nif (__DEV__) {\n  Accordion.displayName = \"Accordion\"\n}\n\ntype AccordionItemContext = Omit<UseAccordionItemReturn, \"htmlProps\">\n\nconst [AccordionItemProvider, useAccordionItemContext] = createContext<\n  AccordionItemContext\n>({\n  name: \"AccordionItemContext\",\n  errorMessage:\n    \"useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` \",\n})\n\nexport interface AccordionItemProps\n  extends Omit<DivProps, keyof UseAccordionItemProps>,\n    UseAccordionItemProps {\n  children?: ReactNodeOrRenderProp<{\n    isExpanded: boolean\n    isDisabled: boolean\n  }>\n}\n\n/**\n * AccordionItem is a single accordion that provides the open-close\n * behavior when the accordion button is clicked.\n *\n * It also provides context for the accordion button and panel.\n */\nexport const AccordionItem = forwardRef<AccordionItemProps, \"div\">(\n  function AccordionItem(props, ref) {\n    const { children, className } = props\n    const { htmlProps, ...context } = useAccordionItem(props)\n\n    const styles = useStyles()\n    const _context = useMemo(() => context, [context])\n\n    return (\n      <AccordionItemProvider value={_context}>\n        <chakra.div\n          ref={ref}\n          {...htmlProps}\n          className={cx(\"chakra-accordion__item\", className)}\n          __css={styles.container}\n        >\n          {runIfFn(children, {\n            isExpanded: !!context.isOpen,\n            isDisabled: !!context.isDisabled,\n          })}\n        </chakra.div>\n      </AccordionItemProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  AccordionItem.displayName = \"AccordionItem\"\n}\n\n/**\n * React hook to get the state and actions of an accordion item\n */\nexport function useAccordionItemState() {\n  const { isOpen, isDisabled, onClose, onOpen } = useAccordionItemContext()\n  return { isOpen, onClose, isDisabled, onOpen }\n}\n\nexport interface AccordionButtonProps extends PropsOf<typeof chakra.button> {}\n\n/**\n * AccordionButton is used expands and collapses an accordion item.\n * It must be a child of `AccordionItem`.\n *\n * Note ðŸš¨: Each accordion button must be wrapped in an heading tag,\n * that is appropriate for the information architecture of the page.\n */\nexport const AccordionButton = forwardRef<AccordionButtonProps, \"button\">(\n  function AccordionButton(props, ref) {\n    const { getButtonProps } = useAccordionItemContext()\n    const buttonProps = getButtonProps(props, ref)\n\n    const styles = useStyles()\n    const buttonStyles = {\n      display: \"flex\",\n      alignItems: \"center\",\n      width: \"100%\",\n      transition: \"all 0.2s\",\n      outline: 0,\n      ...styles.button,\n    }\n\n    return (\n      <chakra.button\n        {...buttonProps}\n        className={cx(\"chakra-accordion__button\", props.className)}\n        __css={buttonStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  AccordionButton.displayName = \"AccordionButton\"\n}\n\nexport type AccordionPanelProps = DivProps\n\n/**\n * Accordion panel that holds the content for each accordion.\n * It shows and hides based on the state login from the `AccordionItem`.\n *\n * It uses the `Collapse` component to animate it's height.\n */\nexport const AccordionPanel = forwardRef<AccordionPanelProps, \"div\">(\n  function AccordionPanel(props, ref) {\n    const { reduceMotion } = useAccordionContext()\n    const { getPanelProps, isOpen } = useAccordionItemContext()\n\n    // remove `hidden` prop, 'coz we're using height animation\n    const { hidden, ...panelProps } = getPanelProps({ ...props, ref }) as Dict\n\n    const _className = cx(\"chakra-accordion__panel\", props.className)\n    const styles = useStyles()\n\n    if (reduceMotion == true) {\n      panelProps.hidden = hidden\n    }\n\n    const child = (\n      <chakra.div\n        {...panelProps}\n        __css={styles.panel}\n        className={_className}\n        transition=\"height 150ms ease-in-out, opacity 150ms ease-in-out, transform 150ms ease-in-out\"\n      />\n    )\n\n    if (reduceMotion == false) {\n      return <Collapse isOpen={isOpen}>{child}</Collapse>\n    }\n\n    return child\n  },\n)\n\nif (__DEV__) {\n  AccordionPanel.displayName = \"AccordionPanel\"\n}\n\n/**\n * AccordionIcon that gives a visual cue of the open/close state of the accordion item.\n * It rotates `180deg` based on the open/close state.\n */\nexport const AccordionIcon: React.FC<IconProps> = (props) => {\n  const { isOpen, isDisabled } = useAccordionItemContext()\n  const { reduceMotion } = useAccordionContext()\n\n  const iconStyles = {\n    fontSize: \"1.25em\",\n    opacity: isDisabled ? 0.4 : 1,\n    transform: isOpen ? \"rotate(-180deg)\" : undefined,\n    transition: reduceMotion ? undefined : \"transform 0.2s\",\n    transformOrigin: \"center\",\n  }\n\n  return (\n    <Icon viewBox=\"0 0 24 24\" aria-hidden __css={iconStyles} {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n      />\n    </Icon>\n  )\n}\n\nif (__DEV__) {\n  AccordionIcon.displayName = \"AccordionIcon\"\n}\n"],"file":"accordion.js"}