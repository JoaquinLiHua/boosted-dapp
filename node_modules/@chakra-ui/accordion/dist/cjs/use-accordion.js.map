{"version":3,"sources":["../../src/use-accordion.ts"],"names":["useAccordion","props","onChange","defaultIndex","indexProp","index","allowMultiple","allowToggle","children","htmlProps","warn","allowMultipleAndAllowToggle","domContext","focusedIndex","setFocusedIndex","value","defaultValue","propsMap","setIndex","validChildren","_children","map","child","idx","isExpanded","includes","isOpen","nextState","name","errorMessage","AccordionProvider","useAccordionContext","useAccordionItem","isDisabled","isFocusable","id","descendants","onOpen","onClose","buttonRef","buttonId","panelId","focusableNotDisabled","element","current","context","disabled","focusable","shouldFocus","onClick","onKeyDown","keyMap","ArrowDown","nextIndex","length","nextAccordion","focus","ArrowUp","prevIndex","prevAccordion","Home","firstAccordion","End","lastAccordion","onFocus","getButtonProps","ref","getPanelProps","role","hidden"],"mappings":"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","sourcesContent":["import { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport { useControllableState, useFocusEffect, useIds } from \"@chakra-ui/hooks\"\nimport {\n  addItem,\n  callAllHandlers,\n  createOnKeyDown,\n  Dict,\n  getNextIndex,\n  getPrevIndex,\n  getValidChildren,\n  isArray,\n  mergeRefs,\n  removeItem,\n  __DEV__,\n  createContext,\n} from \"@chakra-ui/utils\"\nimport {\n  Ref,\n  ReactNode,\n  useCallback,\n  cloneElement,\n  useRef,\n  useState,\n} from \"react\"\nimport * as warn from \"./warning\"\n\nexport type ExpandedIndex = number | number[]\n\nexport interface UseAccordionProps {\n  /**\n   * If `true`, multiple accordion items can be expanded at once.\n   */\n  allowMultiple?: boolean\n  /**\n   * If `true`, any expanded accordion item can be collapsed again.\n   */\n  allowToggle?: boolean\n  /**\n   * The index(es) of the expanded accordion item\n   */\n  index?: ExpandedIndex\n  /**\n   * The initial index(es) of the expanded accordion item\n   */\n  defaultIndex?: ExpandedIndex\n  /**\n   * The callback invoked when accordion items are expanded or collapsed.\n   */\n  onChange?: (expandedIndex: ExpandedIndex) => void\n  /**\n   * The content of the accordion. Must be `AccordionItem`\n   */\n  children: ReactNode\n}\n\n/**\n * useAccordion hook provides all the state and focus management logic\n * for accordion items.\n */\nexport function useAccordion(props: UseAccordionProps) {\n  const {\n    onChange,\n    defaultIndex,\n    index: indexProp,\n    allowMultiple,\n    allowToggle,\n    children,\n    ...htmlProps\n  } = props\n\n  // validate the props and `warn` if used incorrectly\n  warn.allowMultiple(props)\n  warn.allowMultipleAndAllowToggle(props)\n\n  /**\n   * Think of this as the register to each accordion item.\n   * We used to manage focus between accordion item buttons.\n   *\n   * Every accordion item, registers their button refs in this context\n   */\n  const domContext = useDescendants()\n\n  /**\n   * This state is used to track the index focused accordion\n   * button when click on the button, tab on the button, or\n   * use the down/up arrow to navigate.\n   */\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  /**\n   * Hook that manages the controlled and un-controlled state\n   * for the accordion.\n   */\n  const [index, setIndex] = useControllableState({\n    value: indexProp,\n    defaultValue: () => {\n      if (allowMultiple) {\n        return defaultIndex ?? []\n      } else {\n        return defaultIndex ?? -1\n      }\n    },\n    onChange,\n    propsMap: {\n      value: \"index\",\n      defaultValue: \"defaultIndex\",\n    },\n  })\n\n  /**\n   * Filter out invalid children (null, false), in the case\n   * of conditional rendering\n   */\n  const validChildren = getValidChildren(children)\n\n  /**\n   * Clone the accordion items and pass them the `onChange`\n   * and `isOpen`\n   */\n  const _children = validChildren.map((child, idx) => {\n    const isExpanded = isArray(index) ? index.includes(idx) : index === idx\n\n    return cloneElement(child, {\n      isOpen: isExpanded,\n      onChange: (isOpen: boolean) => {\n        if (allowMultiple && isArray(index)) {\n          const nextState = isOpen\n            ? addItem(index, idx)\n            : removeItem(index, idx)\n          setIndex(nextState)\n        } else {\n          if (isOpen) {\n            setIndex(idx)\n          } else if (allowToggle) {\n            setIndex(-1)\n          }\n        }\n      },\n    })\n  })\n\n  return {\n    children: _children,\n    htmlProps,\n    focusedIndex,\n    setFocusedIndex,\n    domContext,\n  }\n}\n\nexport type UseAccordionReturn = ReturnType<typeof useAccordion>\n\ntype AccordionContext = Omit<UseAccordionReturn, \"children\" | \"htmlProps\"> & {\n  reduceMotion: boolean\n}\n\nconst [AccordionProvider, useAccordionContext] = createContext<\n  AccordionContext\n>({\n  name: \"AccordionContext\",\n  errorMessage:\n    \"useAccordionContext: `context` is undefined. Seems you forgot to wrap the accordion components in `<Accordion />`\",\n})\n\nexport { AccordionProvider, useAccordionContext }\n\nexport interface UseAccordionItemProps {\n  /**\n   * If `true`, expands the accordion in the controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the accordion item will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the accordion item will be focusable.\n   */\n  isFocusable?: boolean\n  /**\n   * A unique id for the accordion item.\n   */\n  id?: string\n  /**\n   * The callback fired when the accordion is expanded/collapsed.\n   */\n  onChange?: (isOpen: boolean) => void\n}\n\n/**\n * useAccordionItem\n *\n * React hook that provides the open/close functionality\n * for an accordion item and it's children\n */\nexport function useAccordionItem(props: UseAccordionItemProps) {\n  const { isDisabled, isFocusable, onChange, isOpen, id, ...htmlProps } = props\n\n  const { domContext, focusedIndex, setFocusedIndex } = useAccordionContext()\n  const { descendants } = domContext\n\n  const onOpen = () => {\n    onChange?.(true)\n  }\n\n  const onClose = () => {\n    onChange?.(false)\n  }\n\n  const buttonRef = useRef<HTMLElement>(null)\n\n  /**\n   * Generate unique ids for all accordion item components (button and panel)\n   */\n  const [buttonId, panelId] = useIds(id, `accordion-button`, `accordion-panel`)\n\n  warn.focusableNotDisabled(props)\n\n  /**\n   * Think of this as a way to register this accordion item\n   * with it's parent `useAccordion`\n   */\n  const index = useDescendant({\n    element: buttonRef.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable,\n  })\n\n  const shouldFocus = index === focusedIndex\n\n  /**\n   * Autofocus the accordion button when\n   * the active index matched the accordion item's index\n   */\n  useFocusEffect(buttonRef, { shouldFocus })\n\n  /**\n   * Toggle the visibility of the accordion item\n   */\n  const onClick = useCallback(() => {\n    onChange?.(!isOpen)\n    setFocusedIndex(index)\n  }, [index, isOpen, onChange, setFocusedIndex])\n\n  /**\n   * Manage keyboard navigation between accordion items.\n   * `createOnKeyDown` makes it easy to write actions\n   * for each event key\n   */\n  const onKeyDown = createOnKeyDown({\n    keyMap: {\n      ArrowDown: () => {\n        const nextIndex = getNextIndex(index, descendants.length)\n        const nextAccordion = descendants[nextIndex]\n        nextAccordion?.element?.focus()\n      },\n      ArrowUp: () => {\n        const prevIndex = getPrevIndex(index, descendants.length)\n        const prevAccordion = descendants[prevIndex]\n        prevAccordion?.element?.focus()\n      },\n      Home: () => {\n        const firstAccordion = descendants[0]\n        firstAccordion?.element?.focus()\n      },\n      End: () => {\n        const lastAccordion = descendants[descendants.length - 1]\n        lastAccordion?.element?.focus()\n      },\n    },\n  })\n\n  /**\n   * Since each accordion item's button still remains tabbable, let's\n   * update the focusedIndex when it receives focus\n   */\n  const onFocus = useCallback(() => setFocusedIndex(index), [\n    index,\n    setFocusedIndex,\n  ])\n\n  const getButtonProps = useCallback(\n    (props: Dict = {}, ref: Ref<any> = null) => ({\n      ...props,\n      ref: mergeRefs(buttonRef, ref),\n      id: buttonId,\n      disabled: !!isDisabled,\n      \"aria-expanded\": !!isOpen,\n      \"aria-controls\": panelId,\n      onClick: callAllHandlers(props.onClick, onClick),\n      onFocus: callAllHandlers(props.onFocus, onFocus),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    }),\n    [buttonId, isDisabled, isOpen, onClick, onFocus, onKeyDown, panelId],\n  )\n\n  const getPanelProps = useCallback(\n    (props: Dict = {}, ref: Ref<any> = null) => ({\n      ...props,\n      ref,\n      role: \"region\",\n      id: panelId,\n      \"aria-labelledby\": buttonId,\n      hidden: !isOpen,\n    }),\n    [buttonId, isOpen, panelId],\n  )\n\n  return {\n    isOpen,\n    isDisabled,\n    isFocusable,\n    onOpen,\n    onClose,\n    getButtonProps,\n    getPanelProps,\n    htmlProps,\n  }\n}\n\nexport type UseAccordionItemReturn = ReturnType<typeof useAccordionItem>\n"],"file":"use-accordion.js"}