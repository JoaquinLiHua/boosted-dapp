{"version":3,"sources":["../../src/accordion.tsx"],"names":["Accordion","props","ref","styles","_props","children","htmlProps","context","_context","reduceMotion","className","__DEV__","displayName","name","errorMessage","AccordionItemProvider","useAccordionItemContext","AccordionItem","container","isExpanded","isOpen","isDisabled","useAccordionItemState","onClose","onOpen","AccordionButton","getButtonProps","buttonProps","buttonStyles","display","alignItems","width","transition","outline","button","AccordionPanel","getPanelProps","hidden","panelProps","_className","child","panel","AccordionIcon","iconStyles","fontSize","opacity","transform","undefined","transformOrigin"],"mappings":"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","sourcesContent":["import { Collapse } from \"@chakra-ui/collapse\"\nimport { Icon, IconProps } from \"@chakra-ui/icon\"\nimport {\n  chakra,\n  forwardRef,\n  PropsOf,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport {\n  cx,\n  createContext,\n  Omit,\n  ReactNodeOrRenderProp,\n  runIfFn,\n  __DEV__,\n  Dict,\n} from \"@chakra-ui/utils\"\nimport React, { useMemo } from \"react\"\nimport {\n  AccordionProvider,\n  useAccordion,\n  useAccordionContext,\n  useAccordionItem,\n  UseAccordionItemProps,\n  UseAccordionItemReturn,\n  UseAccordionProps,\n} from \"./use-accordion\"\n\ninterface DivProps extends PropsOf<typeof chakra.div> {}\n\nexport interface AccordionProps\n  extends UseAccordionProps,\n    Omit<DivProps, keyof UseAccordionProps>,\n    ThemingProps {\n  /**\n   * If `true`, height animation and transitions will be disabled.\n   */\n  reduceMotion?: boolean\n}\n\n/**\n * The wrapper that provides context and focus management\n * for all accordion items.\n *\n * It wraps all accordion items in a `div` for better grouping.\n * @see Docs https://chakra-ui.com/components/accordion\n */\nexport const Accordion = forwardRef<AccordionProps, \"div\">(function Accordion(\n  props,\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Accordion\", props)\n  const _props = omitThemingProps(props)\n\n  const { children, htmlProps, ...context } = useAccordion(_props)\n\n  const _context = useMemo(\n    () => ({ ...context, reduceMotion: !!props.reduceMotion }),\n    [context, props.reduceMotion],\n  )\n\n  return (\n    <AccordionProvider value={_context}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          ref={ref}\n          {...htmlProps}\n          className={cx(\"chakra-accordion\", props.className)}\n        >\n          {children}\n        </chakra.div>\n      </StylesProvider>\n    </AccordionProvider>\n  )\n})\n\nif (__DEV__) {\n  Accordion.displayName = \"Accordion\"\n}\n\ntype AccordionItemContext = Omit<UseAccordionItemReturn, \"htmlProps\">\n\nconst [AccordionItemProvider, useAccordionItemContext] = createContext<\n  AccordionItemContext\n>({\n  name: \"AccordionItemContext\",\n  errorMessage:\n    \"useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` \",\n})\n\nexport interface AccordionItemProps\n  extends Omit<DivProps, keyof UseAccordionItemProps>,\n    UseAccordionItemProps {\n  children?: ReactNodeOrRenderProp<{\n    isExpanded: boolean\n    isDisabled: boolean\n  }>\n}\n\n/**\n * AccordionItem is a single accordion that provides the open-close\n * behavior when the accordion button is clicked.\n *\n * It also provides context for the accordion button and panel.\n */\nexport const AccordionItem = forwardRef<AccordionItemProps, \"div\">(\n  function AccordionItem(props, ref) {\n    const { children, className } = props\n    const { htmlProps, ...context } = useAccordionItem(props)\n\n    const styles = useStyles()\n    const _context = useMemo(() => context, [context])\n\n    return (\n      <AccordionItemProvider value={_context}>\n        <chakra.div\n          ref={ref}\n          {...htmlProps}\n          className={cx(\"chakra-accordion__item\", className)}\n          __css={styles.container}\n        >\n          {runIfFn(children, {\n            isExpanded: !!context.isOpen,\n            isDisabled: !!context.isDisabled,\n          })}\n        </chakra.div>\n      </AccordionItemProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  AccordionItem.displayName = \"AccordionItem\"\n}\n\n/**\n * React hook to get the state and actions of an accordion item\n */\nexport function useAccordionItemState() {\n  const { isOpen, isDisabled, onClose, onOpen } = useAccordionItemContext()\n  return { isOpen, onClose, isDisabled, onOpen }\n}\n\nexport interface AccordionButtonProps extends PropsOf<typeof chakra.button> {}\n\n/**\n * AccordionButton is used expands and collapses an accordion item.\n * It must be a child of `AccordionItem`.\n *\n * Note ðŸš¨: Each accordion button must be wrapped in an heading tag,\n * that is appropriate for the information architecture of the page.\n */\nexport const AccordionButton = forwardRef<AccordionButtonProps, \"button\">(\n  function AccordionButton(props, ref) {\n    const { getButtonProps } = useAccordionItemContext()\n    const buttonProps = getButtonProps(props, ref)\n\n    const styles = useStyles()\n    const buttonStyles = {\n      display: \"flex\",\n      alignItems: \"center\",\n      width: \"100%\",\n      transition: \"all 0.2s\",\n      outline: 0,\n      ...styles.button,\n    }\n\n    return (\n      <chakra.button\n        {...buttonProps}\n        className={cx(\"chakra-accordion__button\", props.className)}\n        __css={buttonStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  AccordionButton.displayName = \"AccordionButton\"\n}\n\nexport type AccordionPanelProps = DivProps\n\n/**\n * Accordion panel that holds the content for each accordion.\n * It shows and hides based on the state login from the `AccordionItem`.\n *\n * It uses the `Collapse` component to animate it's height.\n */\nexport const AccordionPanel = forwardRef<AccordionPanelProps, \"div\">(\n  function AccordionPanel(props, ref) {\n    const { reduceMotion } = useAccordionContext()\n    const { getPanelProps, isOpen } = useAccordionItemContext()\n\n    // remove `hidden` prop, 'coz we're using height animation\n    const { hidden, ...panelProps } = getPanelProps({ ...props, ref }) as Dict\n\n    const _className = cx(\"chakra-accordion__panel\", props.className)\n    const styles = useStyles()\n\n    if (reduceMotion == true) {\n      panelProps.hidden = hidden\n    }\n\n    const child = (\n      <chakra.div\n        {...panelProps}\n        __css={styles.panel}\n        className={_className}\n        transition=\"height 150ms ease-in-out, opacity 150ms ease-in-out, transform 150ms ease-in-out\"\n      />\n    )\n\n    if (reduceMotion == false) {\n      return <Collapse isOpen={isOpen}>{child}</Collapse>\n    }\n\n    return child\n  },\n)\n\nif (__DEV__) {\n  AccordionPanel.displayName = \"AccordionPanel\"\n}\n\n/**\n * AccordionIcon that gives a visual cue of the open/close state of the accordion item.\n * It rotates `180deg` based on the open/close state.\n */\nexport const AccordionIcon: React.FC<IconProps> = (props) => {\n  const { isOpen, isDisabled } = useAccordionItemContext()\n  const { reduceMotion } = useAccordionContext()\n\n  const iconStyles = {\n    fontSize: \"1.25em\",\n    opacity: isDisabled ? 0.4 : 1,\n    transform: isOpen ? \"rotate(-180deg)\" : undefined,\n    transition: reduceMotion ? undefined : \"transform 0.2s\",\n    transformOrigin: \"center\",\n  }\n\n  return (\n    <Icon viewBox=\"0 0 24 24\" aria-hidden __css={iconStyles} {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n      />\n    </Icon>\n  )\n}\n\nif (__DEV__) {\n  AccordionIcon.displayName = \"AccordionIcon\"\n}\n"],"file":"accordion.js"}