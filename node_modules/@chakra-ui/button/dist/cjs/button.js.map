{"version":3,"sources":["../../src/button.tsx"],"names":["Button","props","ref","group","styles","isDisabled","isLoading","isActive","isFullWidth","children","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","className","as","rest","_focus","zIndex","buttonStyles","display","appearance","alignItems","justifyContent","transition","userSelect","position","whiteSpace","verticalAlign","outline","width","undefined","fontSize","lineHeight","__DEV__","displayName","ButtonIcon","_children","focusable","_className","ButtonSpinner","label","spacing","__css","spinnerStyles","mr"],"mappings":"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","sourcesContent":["import { Spinner } from \"@chakra-ui/spinner\"\nimport {\n  chakra,\n  forwardRef,\n  PropsOf,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, merge, __DEV__ } from \"@chakra-ui/utils\"\nimport React, { ReactElement, isValidElement, cloneElement } from \"react\"\nimport { useButtonGroup } from \"./button-group\"\n\nexport interface ButtonOptions {\n  /**\n   * If `true`, the button will show a spinner.\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button will be styled in it's active state.\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * The label to show in the button when `isLoading` is true\n   * If no text is passed, it only shows the spinner\n   */\n  loadingText?: string\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  isFullWidth?: boolean\n  /**\n   * The html button type to use.\n   */\n  type?: \"button\" | \"reset\" | \"submit\"\n  /**\n   * If added, the button will show an icon before the button's label.\n   */\n  leftIcon?: ReactElement\n  /**\n   * If added, the button will show an icon after the button's label.\n   */\n  rightIcon?: ReactElement\n  /**\n   * The space between the button icon and label.\n   */\n  iconSpacing?: SystemProps[\"marginRight\"]\n  /**\n   * Replace the spinner component when `isLoading` is set to `true`\n   */\n  spinner?: ReactElement\n}\n\nexport interface ButtonProps\n  extends PropsOf<typeof chakra.button>,\n    ButtonOptions,\n    ThemingProps {}\n\nexport const Button = forwardRef<ButtonProps, \"button\">(function Button(\n  props,\n  ref,\n) {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type = \"button\",\n    spinner,\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it's important to add a `zIndex` when it's focused to it doesn't look funky.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const _focus = merge({}, styles?.[\"_focus\"] ?? {}, { zIndex: 1 })\n\n  const buttonStyles = {\n    display: \"inline-flex\",\n    appearance: \"none\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    transition: \"all 250ms\",\n    userSelect: \"none\",\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    verticalAlign: \"middle\",\n    outline: \"none\",\n    width: isFullWidth ? \"100%\" : \"auto\",\n    ...styles,\n    ...(!!group && { _focus }),\n  }\n\n  return (\n    <chakra.button\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      as={as}\n      type={as ? undefined : type}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n    >\n      {leftIcon && !isLoading && (\n        <ButtonIcon mr={iconSpacing} children={leftIcon} />\n      )}\n      {isLoading && (\n        <ButtonSpinner\n          __css={{ fontSize: \"1em\", lineHeight: \"normal\" }}\n          spacing={iconSpacing}\n          label={loadingText}\n          children={spinner}\n        />\n      )}\n      {isLoading\n        ? loadingText || <chakra.span opacity={0} children={children} />\n        : children}\n      {rightIcon && !isLoading && (\n        <ButtonIcon ml={iconSpacing} children={rightIcon} />\n      )}\n    </chakra.button>\n  )\n})\n\nif (__DEV__) {\n  Button.displayName = \"Button\"\n}\n\nconst ButtonIcon: React.FC<PropsOf<typeof chakra.span>> = (props) => {\n  const { children, className, ...rest } = props\n\n  const _children = isValidElement(children)\n    ? cloneElement(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return <chakra.span {...rest} className={_className} children={_children} />\n}\n\nif (__DEV__) {\n  ButtonIcon.displayName = \"ButtonIcon\"\n}\n\ninterface ButtonSpinnerProps extends PropsOf<typeof chakra.div> {\n  label?: string\n  spacing?: SystemProps[\"margin\"]\n}\n\nconst ButtonSpinner: React.FC<ButtonSpinnerProps> = (props) => {\n  const {\n    label,\n    spacing,\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n  const spinnerStyles = {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    mr: label ? spacing : 0,\n    ...__css,\n  }\n\n  return (\n    <chakra.div\n      className={_className}\n      {...rest}\n      __css={spinnerStyles}\n      children={children}\n    />\n  )\n}\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\"\n}\n"],"file":"button.js"}