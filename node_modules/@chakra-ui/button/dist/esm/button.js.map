{"version":3,"sources":["../../src/button.tsx"],"names":["Spinner","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","dataAttr","merge","__DEV__","React","isValidElement","cloneElement","useButtonGroup","Button","props","ref","group","styles","isDisabled","isLoading","isActive","isFullWidth","children","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","className","as","rest","_focus","zIndex","buttonStyles","display","appearance","alignItems","justifyContent","transition","userSelect","position","whiteSpace","verticalAlign","outline","width","undefined","fontSize","lineHeight","displayName","ButtonIcon","_children","focusable","_className","ButtonSpinner","label","spacing","__css","spinnerStyles","mr"],"mappings":"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","sourcesContent":["import { Spinner } from \"@chakra-ui/spinner\"\nimport {\n  chakra,\n  forwardRef,\n  PropsOf,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, merge, __DEV__ } from \"@chakra-ui/utils\"\nimport React, { ReactElement, isValidElement, cloneElement } from \"react\"\nimport { useButtonGroup } from \"./button-group\"\n\nexport interface ButtonOptions {\n  /**\n   * If `true`, the button will show a spinner.\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button will be styled in it's active state.\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * The label to show in the button when `isLoading` is true\n   * If no text is passed, it only shows the spinner\n   */\n  loadingText?: string\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  isFullWidth?: boolean\n  /**\n   * The html button type to use.\n   */\n  type?: \"button\" | \"reset\" | \"submit\"\n  /**\n   * If added, the button will show an icon before the button's label.\n   */\n  leftIcon?: ReactElement\n  /**\n   * If added, the button will show an icon after the button's label.\n   */\n  rightIcon?: ReactElement\n  /**\n   * The space between the button icon and label.\n   */\n  iconSpacing?: SystemProps[\"marginRight\"]\n  /**\n   * Replace the spinner component when `isLoading` is set to `true`\n   */\n  spinner?: ReactElement\n}\n\nexport interface ButtonProps\n  extends PropsOf<typeof chakra.button>,\n    ButtonOptions,\n    ThemingProps {}\n\nexport const Button = forwardRef<ButtonProps, \"button\">(function Button(\n  props,\n  ref,\n) {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type = \"button\",\n    spinner,\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it's important to add a `zIndex` when it's focused to it doesn't look funky.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const _focus = merge({}, styles?.[\"_focus\"] ?? {}, { zIndex: 1 })\n\n  const buttonStyles = {\n    display: \"inline-flex\",\n    appearance: \"none\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    transition: \"all 250ms\",\n    userSelect: \"none\",\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    verticalAlign: \"middle\",\n    outline: \"none\",\n    width: isFullWidth ? \"100%\" : \"auto\",\n    ...styles,\n    ...(!!group && { _focus }),\n  }\n\n  return (\n    <chakra.button\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      as={as}\n      type={as ? undefined : type}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n    >\n      {leftIcon && !isLoading && (\n        <ButtonIcon mr={iconSpacing} children={leftIcon} />\n      )}\n      {isLoading && (\n        <ButtonSpinner\n          __css={{ fontSize: \"1em\", lineHeight: \"normal\" }}\n          spacing={iconSpacing}\n          label={loadingText}\n          children={spinner}\n        />\n      )}\n      {isLoading\n        ? loadingText || <chakra.span opacity={0} children={children} />\n        : children}\n      {rightIcon && !isLoading && (\n        <ButtonIcon ml={iconSpacing} children={rightIcon} />\n      )}\n    </chakra.button>\n  )\n})\n\nif (__DEV__) {\n  Button.displayName = \"Button\"\n}\n\nconst ButtonIcon: React.FC<PropsOf<typeof chakra.span>> = (props) => {\n  const { children, className, ...rest } = props\n\n  const _children = isValidElement(children)\n    ? cloneElement(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return <chakra.span {...rest} className={_className} children={_children} />\n}\n\nif (__DEV__) {\n  ButtonIcon.displayName = \"ButtonIcon\"\n}\n\ninterface ButtonSpinnerProps extends PropsOf<typeof chakra.div> {\n  label?: string\n  spacing?: SystemProps[\"margin\"]\n}\n\nconst ButtonSpinner: React.FC<ButtonSpinnerProps> = (props) => {\n  const {\n    label,\n    spacing,\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n  const spinnerStyles = {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    mr: label ? spacing : 0,\n    ...__css,\n  }\n\n  return (\n    <chakra.div\n      className={_className}\n      {...rest}\n      __css={spinnerStyles}\n      children={children}\n    />\n  )\n}\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\"\n}\n"],"file":"button.js"}