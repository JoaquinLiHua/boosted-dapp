{"version":3,"sources":["../../src/use-number-input.ts"],"names":["useNumberInput","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","minSafeInteger","max","maxSafeInteger","step","stepProp","isReadOnly","isDisabled","getAriaValueText","isInvalid","onChangeProp","onChange","id","htmlProps","counter","updateFn","update","incrementFn","increment","decrementFn","decrement","isFocused","setFocused","inputRef","isInteractive","spinner","event","valueString","target","value","split","filter","isFloatingPointNumericCharacter","join","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","ratio","metaKey","ctrlKey","shiftKey","ariaValueText","validateAndClamp","next","valueAsNumber","cast","onBlur","off","focusInput","current","spinUp","up","spinDown","down","pointerDown","isBrowser","document","documentElement","ontouchstart","getIncrementButtonProps","role","tabIndex","onMouseUp","stop","onMouseLeave","onTouchEnd","disabled","isAtMax","getDecrementButtonProps","isAtMin","getInputProps","ref","type","inputMode","pattern","isNaN","undefined","isOutOfRange","readOnly","autoComplete","autoCorrect","onFocus","on"],"mappings":"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","sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport { useBoolean } from \"@chakra-ui/hooks\"\nimport {\n  callAllHandlers,\n  Dict,\n  focus,\n  mergeRefs,\n  normalizeEventKey,\n  StringOrNumber,\n  ariaAttr,\n  minSafeInteger,\n  maxSafeInteger,\n  isBrowser,\n} from \"@chakra-ui/utils\"\nimport {\n  useCallback,\n  useRef,\n  InputHTMLAttributes,\n  ChangeEvent,\n  KeyboardEvent,\n} from \"react\"\nimport { useSpinner } from \"./use-spinner\"\nimport {\n  isFloatingPointNumericCharacter,\n  isValidNumericKeyboardEvent,\n} from \"./utils\"\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: StringOrNumber): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the input will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n}\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    getAriaValueText,\n    isInvalid,\n    onChange: onChangeProp,\n    id,\n    ...htmlProps\n  } = props\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useBoolean()\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const valueString = event.target.value\n        .split(\"\")\n        .filter(isFloatingPointNumericCharacter)\n        .join(\"\")\n      updateFn(valueString)\n    },\n    [updateFn],\n  )\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      /**\n       * only allow valid numeric keys\n       */\n      if (!isValidNumericKeyboardEvent(event)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = normalizeEventKey(event)\n\n      switch (eventKey) {\n        case \"ArrowUp\":\n          event.preventDefault()\n          increment(stepFactor)\n          break\n        case \"ArrowDown\":\n          event.preventDefault()\n          decrement(stepFactor)\n          break\n        case \"Home\":\n          event.preventDefault()\n          updateFn(min)\n          break\n        case \"End\":\n          event.preventDefault()\n          updateFn(max)\n          break\n        default:\n          break\n      }\n    },\n    [updateFn, decrement, increment, max, min, stepProp],\n  )\n\n  const getStepFactor = (event: KeyboardEvent) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const ariaValueText = getAriaValueText?.(counter.value)\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = useCallback(() => {\n    let next = counter.value as StringOrNumber\n\n    if (next === \"\") return\n\n    if (counter.valueAsNumber < min) {\n      next = min\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max\n    }\n\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n    counter.cast(next)\n  }, [counter, max, min])\n\n  const onBlur = useCallback(() => {\n    setFocused.off()\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = useCallback(() => {\n    if (focusInputOnChange && inputRef.current) {\n      focus(inputRef.current)\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = useCallback(\n    (event: MouseEvent) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = useCallback(\n    (event: MouseEvent) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const pointerDown =\n    isBrowser && !!document.documentElement.ontouchstart\n      ? \"onTouchStart\"\n      : \"onMouseDown\"\n\n  const getIncrementButtonProps = useCallback(\n    (props: Dict = {}) => ({\n      ...props,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled: keepWithinRange && counter.isAtMax,\n      \"aria-disabled\": ariaAttr(keepWithinRange && counter.isAtMax),\n    }),\n    [pointerDown, counter.isAtMax, keepWithinRange, spinUp, spinner.stop],\n  )\n\n  const getDecrementButtonProps = useCallback(\n    (props: Dict = {}) => ({\n      ...props,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n      onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled: keepWithinRange && counter.isAtMin,\n      \"aria-disabled\": ariaAttr(keepWithinRange && counter.isAtMin),\n    }),\n    [pointerDown, counter.isAtMin, keepWithinRange, spinDown, spinner.stop],\n  )\n\n  type InputMode = InputHTMLAttributes<any>[\"inputMode\"]\n\n  const getInputProps = useCallback(\n    (props: Dict = {}) => ({\n      ...props,\n      id,\n      ref: mergeRefs(inputRef, props.ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      type: \"text\",\n      inputMode: \"numeric\" as InputMode,\n      pattern: \"[0-9]*\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-disabled\": isDisabled,\n      \"aria-valuenow\": isNaN(counter.valueAsNumber)\n        ? undefined\n        : counter.valueAsNumber,\n      \"aria-invalid\": isInvalid || counter.isOutOfRange,\n      \"aria-valuetext\": ariaValueText,\n      readOnly: isReadOnly,\n      disabled: isDisabled,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, setFocused.on),\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n    }),\n    [\n      ariaValueText,\n      counter.isOutOfRange,\n      counter.value,\n      counter.valueAsNumber,\n      id,\n      isDisabled,\n      isInvalid,\n      isReadOnly,\n      max,\n      min,\n      onBlur,\n      onChange,\n      onKeyDown,\n      setFocused.on,\n    ],\n  )\n\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"],"file":"use-number-input.js"}