{"version":3,"sources":["../../src/use-number-input.ts"],"names":["useCounter","useBoolean","callAllHandlers","focus","mergeRefs","normalizeEventKey","ariaAttr","minSafeInteger","maxSafeInteger","isBrowser","useCallback","useRef","useSpinner","isFloatingPointNumericCharacter","isValidNumericKeyboardEvent","useNumberInput","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","max","step","stepProp","isReadOnly","isDisabled","getAriaValueText","isInvalid","id","htmlProps","counter","update","updateFn","increment","incrementFn","decrement","decrementFn","isFocused","setFocused","inputRef","isInteractive","spinner","onChange","event","valueString","target","value","split","filter","join","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","ratio","metaKey","ctrlKey","shiftKey","ariaValueText","validateAndClamp","next","valueAsNumber","cast","onBlur","off","focusInput","current","spinUp","up","spinDown","down","pointerDown","document","documentElement","ontouchstart","getIncrementButtonProps","role","tabIndex","onMouseUp","stop","onMouseLeave","onTouchEnd","disabled","isAtMax","getDecrementButtonProps","isAtMin","getInputProps","ref","type","inputMode","pattern","isNaN","undefined","isOutOfRange","readOnly","autoComplete","autoCorrect","onFocus","on"],"mappings":"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","sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport { useBoolean } from \"@chakra-ui/hooks\"\nimport {\n  callAllHandlers,\n  Dict,\n  focus,\n  mergeRefs,\n  normalizeEventKey,\n  StringOrNumber,\n  ariaAttr,\n  minSafeInteger,\n  maxSafeInteger,\n  isBrowser,\n} from \"@chakra-ui/utils\"\nimport {\n  useCallback,\n  useRef,\n  InputHTMLAttributes,\n  ChangeEvent,\n  KeyboardEvent,\n} from \"react\"\nimport { useSpinner } from \"./use-spinner\"\nimport {\n  isFloatingPointNumericCharacter,\n  isValidNumericKeyboardEvent,\n} from \"./utils\"\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: StringOrNumber): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the input will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n}\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    getAriaValueText,\n    isInvalid,\n    onChange: onChangeProp,\n    id,\n    ...htmlProps\n  } = props\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useBoolean()\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const valueString = event.target.value\n        .split(\"\")\n        .filter(isFloatingPointNumericCharacter)\n        .join(\"\")\n      updateFn(valueString)\n    },\n    [updateFn],\n  )\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      /**\n       * only allow valid numeric keys\n       */\n      if (!isValidNumericKeyboardEvent(event)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = normalizeEventKey(event)\n\n      switch (eventKey) {\n        case \"ArrowUp\":\n          event.preventDefault()\n          increment(stepFactor)\n          break\n        case \"ArrowDown\":\n          event.preventDefault()\n          decrement(stepFactor)\n          break\n        case \"Home\":\n          event.preventDefault()\n          updateFn(min)\n          break\n        case \"End\":\n          event.preventDefault()\n          updateFn(max)\n          break\n        default:\n          break\n      }\n    },\n    [updateFn, decrement, increment, max, min, stepProp],\n  )\n\n  const getStepFactor = (event: KeyboardEvent) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const ariaValueText = getAriaValueText?.(counter.value)\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = useCallback(() => {\n    let next = counter.value as StringOrNumber\n\n    if (next === \"\") return\n\n    if (counter.valueAsNumber < min) {\n      next = min\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max\n    }\n\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n    counter.cast(next)\n  }, [counter, max, min])\n\n  const onBlur = useCallback(() => {\n    setFocused.off()\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = useCallback(() => {\n    if (focusInputOnChange && inputRef.current) {\n      focus(inputRef.current)\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = useCallback(\n    (event: MouseEvent) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = useCallback(\n    (event: MouseEvent) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const pointerDown =\n    isBrowser && !!document.documentElement.ontouchstart\n      ? \"onTouchStart\"\n      : \"onMouseDown\"\n\n  const getIncrementButtonProps = useCallback(\n    (props: Dict = {}) => ({\n      ...props,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled: keepWithinRange && counter.isAtMax,\n      \"aria-disabled\": ariaAttr(keepWithinRange && counter.isAtMax),\n    }),\n    [pointerDown, counter.isAtMax, keepWithinRange, spinUp, spinner.stop],\n  )\n\n  const getDecrementButtonProps = useCallback(\n    (props: Dict = {}) => ({\n      ...props,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n      onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled: keepWithinRange && counter.isAtMin,\n      \"aria-disabled\": ariaAttr(keepWithinRange && counter.isAtMin),\n    }),\n    [pointerDown, counter.isAtMin, keepWithinRange, spinDown, spinner.stop],\n  )\n\n  type InputMode = InputHTMLAttributes<any>[\"inputMode\"]\n\n  const getInputProps = useCallback(\n    (props: Dict = {}) => ({\n      ...props,\n      id,\n      ref: mergeRefs(inputRef, props.ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      type: \"text\",\n      inputMode: \"numeric\" as InputMode,\n      pattern: \"[0-9]*\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-disabled\": isDisabled,\n      \"aria-valuenow\": isNaN(counter.valueAsNumber)\n        ? undefined\n        : counter.valueAsNumber,\n      \"aria-invalid\": isInvalid || counter.isOutOfRange,\n      \"aria-valuetext\": ariaValueText,\n      readOnly: isReadOnly,\n      disabled: isDisabled,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, setFocused.on),\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n    }),\n    [\n      ariaValueText,\n      counter.isOutOfRange,\n      counter.value,\n      counter.valueAsNumber,\n      id,\n      isDisabled,\n      isInvalid,\n      isReadOnly,\n      max,\n      min,\n      onBlur,\n      onChange,\n      onKeyDown,\n      setFocused.on,\n    ],\n  )\n\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"],"file":"use-number-input.js"}