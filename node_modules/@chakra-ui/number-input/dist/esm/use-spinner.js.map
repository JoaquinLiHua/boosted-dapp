{"version":3,"sources":["../../src/use-spinner.ts"],"names":["useInterval","useState","useRef","useEffect","useCallback","CONTINUOUS_CHANGE_INTERVAL","CONTINUOUS_CHANGE_DELAY","useSpinner","increment","decrement","isSpinning","setIsSpinning","action","setAction","runOnce","setRunOnce","timeoutRef","removeTimeout","clearTimeout","current","up","setTimeout","down","stop"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,EAAsCC,WAAtC,QAAyD,OAAzD;AAEA;;;;AAGA,IAAMC,0BAA0B,GAAG,EAAnC;AAEA;;;;AAGA,IAAMC,uBAAuB,GAAG,GAAhC;;AAIA;;;;;;;AAOA,OAAO,SAASC,UAAT,CAAoBC,SAApB,EAAyCC,SAAzC,EAA8D;AACnE;;;AAGA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,KAAD,CAA5C,CAJmE,CAMnE;;AACA,MAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAgB,IAAhB,CAApC,CAPmE,CASnE;;AACA,MAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC,CAVmE,CAYnE;;AACA,MAAMe,UAAU,GAAGd,MAAM,CAAM,IAAN,CAAzB,CAbmE,CAenE;;AACA,MAAMe,aAAa,GAAG,MAAMC,YAAY,CAACF,UAAU,CAACG,OAAZ,CAAxC;AAEA;;;;;;AAIAnB,EAAAA,WAAW,CACT,MAAM;AACJ,QAAIY,MAAM,KAAK,WAAf,EAA4B;AAC1BJ,MAAAA,SAAS;AACV;;AACD,QAAII,MAAM,KAAK,WAAf,EAA4B;AAC1BH,MAAAA,SAAS;AACV;AACF,GARQ,EASTC,UAAU,GAAGL,0BAAH,GAAgC,IATjC,CAAX,CAtBmE,CAkCnE;;AACA,MAAMe,EAAE,GAAGhB,WAAW,CAAC,MAAM;AAC3B;AACA,QAAIU,OAAJ,EAAa;AACXN,MAAAA,SAAS;AACV,KAJ0B,CAM3B;;;AACAQ,IAAAA,UAAU,CAACG,OAAX,GAAqBE,UAAU,CAAC,MAAM;AACpCN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,MAAAA,SAAS,CAAC,WAAD,CAAT;AACD,KAJ8B,EAI5BP,uBAJ4B,CAA/B;AAKD,GAZqB,EAYnB,CAACE,SAAD,EAAYM,OAAZ,CAZmB,CAAtB,CAnCmE,CAiDnE;;AACA,MAAMQ,IAAI,GAAGlB,WAAW,CAAC,MAAM;AAC7B;AACA,QAAIU,OAAJ,EAAa;AACXL,MAAAA,SAAS;AACV,KAJ4B,CAM7B;;;AACAO,IAAAA,UAAU,CAACG,OAAX,GAAqBE,UAAU,CAAC,MAAM;AACpCN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,MAAAA,SAAS,CAAC,WAAD,CAAT;AACD,KAJ8B,EAI5BP,uBAJ4B,CAA/B;AAKD,GAZuB,EAYrB,CAACG,SAAD,EAAYK,OAAZ,CAZqB,CAAxB,CAlDmE,CAgEnE;;AACA,MAAMS,IAAI,GAAGnB,WAAW,CAAC,MAAM;AAC7BW,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAJ,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAM,IAAAA,aAAa;AACd,GAJuB,EAIrB,EAJqB,CAAxB;AAMA;;;;;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACXc,MAAAA,aAAa;AACd,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO;AAAEG,IAAAA,EAAF;AAAME,IAAAA,IAAN;AAAYC,IAAAA;AAAZ,GAAP;AACD","sourcesContent":["import { useInterval } from \"@chakra-ui/hooks\"\nimport { useState, useRef, useEffect, useCallback } from \"react\"\n\n/**\n * When click and hold on a button - the speed of auto changing the value.\n */\nconst CONTINUOUS_CHANGE_INTERVAL = 50\n\n/**\n * When click and hold on a button - the delay before auto changing the value.\n */\nconst CONTINUOUS_CHANGE_DELAY = 300\n\ntype Action = \"increment\" | \"decrement\"\n\n/**\n * React hook used in the number input to spin it's\n * value on long press of the spin buttons\n *\n * @param increment the function to increment\n * @param decrement the function to decrement\n */\nexport function useSpinner(increment: Function, decrement: Function) {\n  /**\n   * To keep incrementing/decrementing on press, we call that `spinning`\n   */\n  const [isSpinning, setIsSpinning] = useState(false)\n\n  // This state keeps track of the action (\"increment\" or \"decrement\")\n  const [action, setAction] = useState<Action | null>(null)\n\n  // To increment the value the first time you mousedown, we call that `runOnce`\n  const [runOnce, setRunOnce] = useState(true)\n\n  // Store the timeout instance id in a ref, so we can clear the timeout later\n  const timeoutRef = useRef<any>(null)\n\n  // Clears the timeout from memory\n  const removeTimeout = () => clearTimeout(timeoutRef.current)\n\n  /**\n   * useInterval hook provides a performant way to\n   * update the state value at specific interval\n   */\n  useInterval(\n    () => {\n      if (action === \"increment\") {\n        increment()\n      }\n      if (action === \"decrement\") {\n        decrement()\n      }\n    },\n    isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null,\n  )\n\n  // Function to activate the spinning and increment the value\n  const up = useCallback(() => {\n    // increment the first fime\n    if (runOnce) {\n      increment()\n    }\n\n    // after a delay, keep incrementing at interval (\"spinning up\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"increment\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [increment, runOnce])\n\n  // Function to activate the spinning and increment the value\n  const down = useCallback(() => {\n    // decrement the first fime\n    if (runOnce) {\n      decrement()\n    }\n\n    // after a delay, keep decrementing at interval (\"spinning down\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"decrement\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [decrement, runOnce])\n\n  // Function to stop spinng (useful for mouseup, keyup handlers)\n  const stop = useCallback(() => {\n    setRunOnce(true)\n    setIsSpinning(false)\n    removeTimeout()\n  }, [])\n\n  /**\n   * If the component unmounts while spinning,\n   * let's clear the timeout as well\n   */\n  useEffect(() => {\n    return () => {\n      removeTimeout()\n    }\n  }, [])\n\n  return { up, down, stop }\n}\n"],"file":"use-spinner.js"}