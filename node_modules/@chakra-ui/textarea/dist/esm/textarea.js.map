{"version":3,"sources":["../../src/textarea.tsx"],"names":["useFormControl","chakra","forwardRef","useStyleConfig","omitThemingProps","React","__DEV__","cx","omit","Textarea","props","ref","styles","className","rows","otherProps","textareaProps","omitted","textareaStyles","displayName"],"mappings":";;;;AAAA,SAA6BA,cAA7B,QAAmD,yBAAnD;AACA,SACEC,MADF,EAGEC,UAHF,EAIEC,cAJF,EAKEC,gBALF,QAQO,mBARP;AASA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,EAAkBC,EAAlB,EAAsBC,IAAtB,QAAkC,kBAAlC;;AA8BA;;;;AAIA,OAAO,IAAMC,QAAQ,gBAAGP,UAAU,CAA4B,SAASO,QAAT,CAC5DC,KAD4D,EAE5DC,GAF4D,EAG5D;AACA,MAAMC,MAAM,GAAGT,cAAc,CAAC,UAAD,EAAaO,KAAb,CAA7B;;AACA,0BAA2CN,gBAAgB,CAACM,KAAD,CAA3D;AAAA,MAAM;AAAEG,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAN;AAAA,MAA4BC,UAA5B;;AAEA,MAAMC,aAAa,GAAGhB,cAAc,CAAsBe,UAAtB,CAApC;AAEA,MAAME,OAAO,GAAG,CACd,GADc,EAEd,MAFc,EAGd,QAHc,EAId,WAJc,CAAhB;AAOA,MAAMC,cAAc,GAAGJ,IAAI,GAAGN,IAAI,CAACI,MAAD,EAASK,OAAT,CAAP,GAA2BL,MAAtD;AAEA,sBACE,oBAAC,MAAD,CAAQ,QAAR;AACE,IAAA,GAAG,EAAED,GADP;AAEE,IAAA,IAAI,EAAEG;AAFR,KAGME,aAHN;AAIE,IAAA,SAAS,EAAET,EAAE,CAAC,iBAAD,EAAoBM,SAApB,CAJf;AAKE,IAAA,KAAK,EAAEK;AALT,KADF;AASD,CA3BiC,CAA3B;;AA6BP,IAAIZ,OAAJ,EAAa;AACXG,EAAAA,QAAQ,CAACU,WAAT,GAAuB,UAAvB;AACD","sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  PropsOf,\n  forwardRef,\n  useStyleConfig,\n  omitThemingProps,\n  ThemingProps,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport * as React from \"react\"\nimport { __DEV__, cx, omit } from \"@chakra-ui/utils\"\n\ninterface TextareaOptions {\n  /**\n   * The border color when the textarea is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the textarea is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the textarea element will span the full width of it's parent\n   */\n  isFullWidth?: boolean\n}\n\nexport interface TextareaProps\n  extends Omit<\n      PropsOf<typeof chakra.textarea>,\n      \"disabled\" | \"required\" | \"readOnly\"\n    >,\n    TextareaOptions,\n    FormControlOptions,\n    ThemingProps {}\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/components/textarea\n */\nexport const Textarea = forwardRef<TextareaProps, \"textarea\">(function Textarea(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Textarea\", props)\n  const { className, rows, ...otherProps } = omitThemingProps(props)\n\n  const textareaProps = useFormControl<HTMLTextAreaElement>(otherProps)\n\n  const omitted = [\n    \"h\",\n    \"minH\",\n    \"height\",\n    \"minHeight\",\n  ] as (keyof SystemStyleObject)[]\n\n  const textareaStyles = rows ? omit(styles, omitted) : styles\n\n  return (\n    <chakra.textarea\n      ref={ref}\n      rows={rows}\n      {...textareaProps}\n      className={cx(\"chakra-textarea\", className)}\n      __css={textareaStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Textarea.displayName = \"Textarea\"\n}\n"],"file":"textarea.js"}