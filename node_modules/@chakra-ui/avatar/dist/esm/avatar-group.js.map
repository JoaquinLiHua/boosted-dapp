{"version":3,"sources":["../../src/avatar-group.tsx"],"names":["chakra","useMultiStyleConfig","omitThemingProps","forwardRef","getValidChildren","__DEV__","cx","React","cloneElement","baseStyle","AvatarGroup","props","ref","styles","children","borderColor","max","spacing","rest","validChildren","childrenWithinMax","slice","excess","length","reversedChildren","reverse","clones","map","child","index","isFirstAvatar","mr","size","showBorder","groupStyles","display","alignItems","justifyContent","flexDirection","excessStyles","borderRadius","ml","excessLabel","className","displayName"],"mappings":";;;;AAAA,SACEA,MADF,EAKEC,mBALF,EAMEC,gBANF,EAOEC,UAPF,QAQO,mBARP;AASA,SAASC,gBAAT,EAA2BC,OAA3B,EAAoCC,EAApC,QAA8C,kBAA9C;AACA,OAAOC,KAAP,IAA2BC,YAA3B,QAA+C,OAA/C;AACA,SAASC,SAAT,QAA0B,UAA1B;;AAwBA;;;AAGA,OAAO,IAAMC,WAAW,gBAAGP,UAAU,CACnC,SAASO,WAAT,CAAqBC,KAArB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAMC,MAAM,GAAGZ,mBAAmB,CAAC,QAAD,EAAWU,KAAX,CAAlC;;AAEA,0BAMIT,gBAAgB,CAACS,KAAD,CANpB;AAAA,MAAM;AACJG,IAAAA,QADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,GAHI;AAIJC,IAAAA,OAAO,GAAG;AAJN,GAAN;AAAA,MAKKC,IALL;;AAQA,MAAMC,aAAa,GAAGf,gBAAgB,CAACU,QAAD,CAAtC;AAEA;;;;AAGA,MAAMM,iBAAiB,GAAGJ,GAAG,GAAGG,aAAa,CAACE,KAAd,CAAoB,CAApB,EAAuBL,GAAvB,CAAH,GAAiCG,aAA9D;AAEA;;;;AAGA,MAAMG,MAAM,GAAGN,GAAG,IAAI,IAAP,IAAeG,aAAa,CAACI,MAAd,GAAuBP,GAArD;AAEA;;;;;AAIA,MAAMQ,gBAAgB,GAAGJ,iBAAiB,CAACK,OAAlB,EAAzB;AAEA,MAAMC,MAAM,GAAGF,gBAAgB,CAACG,GAAjB,CAAqB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACpD,QAAMC,aAAa,GAAGD,KAAK,KAAK,CAAhC;AAEA,wBAAOrB,YAAY,CAACoB,KAAD,EAAQ;AACzBG,MAAAA,EAAE,EAAED,aAAa,GAAG,CAAH,GAAOb,OADC;AAEzBe,MAAAA,IAAI,EAAErB,KAAK,CAACqB,IAFa;AAGzBjB,MAAAA,WAAW,EAAEa,KAAK,CAACjB,KAAN,CAAYI,WAAZ,IAA2BA,WAHf;AAIzBkB,MAAAA,UAAU,EAAE;AAJa,KAAR,CAAnB;AAMD,GATc,CAAf;AAWA,MAAMC,WAAW,GAAG;AAClBC,IAAAA,OAAO,EAAE,MADS;AAElBC,IAAAA,UAAU,EAAE,QAFM;AAGlBC,IAAAA,cAAc,EAAE,UAHE;AAIlBC,IAAAA,aAAa,EAAE;AAJG,GAApB;;AAOA,MAAMC,YAAY;AAChBC,IAAAA,YAAY,EAAE,MADE;AAEhBC,IAAAA,EAAE,EAAExB;AAFY,KAGbR,SAHa,EAIbI,MAAM,CAAC6B,WAJM,CAAlB;;AAOA,sBACE,oBAAC,MAAD,CAAQ,GAAR;AACE,IAAA,GAAG,EAAE9B,GADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAEsB;AAHT,KAIMhB,IAJN;AAKE,IAAA,SAAS,EAAEZ,EAAE,CAAC,sBAAD,EAAyBK,KAAK,CAACgC,SAA/B;AALf,MAOGrB,MAAM,iBACL,oBAAC,MAAD,CAAQ,IAAR;AACE,IAAA,SAAS,EAAC,uBADZ;AAEE,IAAA,KAAK,EAAEiB,YAFT;AAGE,IAAA,QAAQ,QAAMjB;AAHhB,IARJ,EAcGI,MAdH,CADF;AAkBD,CAzEkC,CAA9B;;AA4EP,IAAIrB,OAAJ,EAAa;AACXK,EAAAA,WAAW,CAACkC,WAAZ,GAA0B,aAA1B;AACD","sourcesContent":["import {\n  chakra,\n  PropsOf,\n  SystemProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  omitThemingProps,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { getValidChildren, __DEV__, cx } from \"@chakra-ui/utils\"\nimport React, { ReactNode, cloneElement } from \"react\"\nimport { baseStyle } from \"./avatar\"\n\ninterface AvatarGroupOptions {\n  /**\n   * The children of the avatar group.\n   *\n   * Ideally should be `Avatar` and `MoreIndicator` components\n   */\n  children: ReactNode\n  /**\n   * The space between the avatars in the group.\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The maximum number of visible avatars\n   */\n  max?: number\n}\n\nexport interface AvatarGroupProps\n  extends AvatarGroupOptions,\n    Omit<PropsOf<typeof chakra.div>, \"children\">,\n    ThemingProps {}\n\n/**\n * AvatarGroup displays a number of avatars grouped together in a stack.\n */\nexport const AvatarGroup = forwardRef<AvatarGroupProps, \"div\">(\n  function AvatarGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Avatar\", props)\n\n    const {\n      children,\n      borderColor,\n      max,\n      spacing = \"-0.75rem\",\n      ...rest\n    } = omitThemingProps(props)\n\n    const validChildren = getValidChildren(children)\n\n    /**\n     * get the avatars within the max\n     */\n    const childrenWithinMax = max ? validChildren.slice(0, max) : validChildren\n\n    /**\n     * get the remaining avatar count\n     */\n    const excess = max != null && validChildren.length - max\n\n    /**\n     * Reversing the children is a great way to avoid using zIndex\n     * to overlap the avatars\n     */\n    const reversedChildren = childrenWithinMax.reverse()\n\n    const clones = reversedChildren.map((child, index) => {\n      const isFirstAvatar = index === 0\n\n      return cloneElement(child, {\n        mr: isFirstAvatar ? 0 : spacing,\n        size: props.size,\n        borderColor: child.props.borderColor || borderColor,\n        showBorder: true,\n      })\n    })\n\n    const groupStyles = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      flexDirection: \"row-reverse\",\n    }\n\n    const excessStyles = {\n      borderRadius: \"full\",\n      ml: spacing,\n      ...baseStyle,\n      ...styles.excessLabel,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        role=\"group\"\n        __css={groupStyles}\n        {...rest}\n        className={cx(\"chakra-avatar__group\", props.className)}\n      >\n        {excess && (\n          <chakra.span\n            className=\"chakra-avatar__excess\"\n            __css={excessStyles}\n            children={`+${excess}`}\n          />\n        )}\n        {clones}\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  AvatarGroup.displayName = \"AvatarGroup\"\n}\n"],"file":"avatar-group.js"}