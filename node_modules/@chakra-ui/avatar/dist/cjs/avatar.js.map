{"version":3,"sources":["../../src/avatar.tsx"],"names":["AvatarBadge","props","ref","styles","badgeStyles","position","display","alignItems","justifyContent","right","bottom","badge","className","__DEV__","displayName","initials","name","split","firstName","lastName","charAt","Initials","getInitials","rest","label","DefaultIcon","width","height","baseStyle","textAlign","textTransform","fontWeight","flexShrink","Avatar","src","showBorder","borderRadius","onError","icon","children","avatarStyles","borderWidth","undefined","container","AvatarImage","status","hasLoaded","showFallback","role","objectFit"],"mappings":"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","sourcesContent":["import { useImage } from \"@chakra-ui/image\"\nimport {\n  chakra,\n  omitThemingProps,\n  PropsOf,\n  StylesProvider,\n  SystemProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  SystemStyleObject,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport React, { cloneElement, ReactElement, ReactNode } from \"react\"\n\ninterface AvatarOptions {\n  /**\n   * The name of the person in the avatar.\n   *\n   * - if `src` has loaded, the name will be used as the `alt` attribute of the `img`\n   * - If `src` is not loaded, the name will be used to create the initials\n   */\n  name?: string\n  /**\n   * The size of the avatar.\n   */\n  size?: string\n  /**\n   * If `true`, the `Avatar` will show a border around it.\n   *\n   * Best for a group of avatars\n   */\n  showBorder?: boolean\n  /**\n   * The badge at the bottom right corner of the avatar.\n   */\n  children?: ReactNode\n  /**\n   * The image url of the `Avatar`\n   */\n  src?: string\n  /**\n   * List of sources to use for different screen resolutions\n   */\n  srcSet?: string\n  /**\n   * The border color of the avatar\n   */\n  borderColor?: SystemProps[\"borderColor\"]\n  /**\n   * Function called when image failed to load\n   */\n  onError?(): void\n  /**\n   * The default avatar used as fallback when `name`, and `src`\n   * is not specified.\n   */\n  icon?: ReactElement\n  /**\n   * Function to get the initials to display\n   */\n  getInitials?(name?: string): string\n}\n\nexport interface AvatarBadgeProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * AvatarBadge used to show extra badge to the top-right\n * or bottom-right corner of an avatar.\n */\nexport const AvatarBadge = forwardRef<AvatarBadgeProps, \"div\">(\n  function AvatarBadge(props, ref) {\n    const styles = useStyles()\n    const badgeStyles = {\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      right: \"0\",\n      bottom: \"0\",\n      ...styles.badge,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-avatar__badge\", props.className)}\n        __css={badgeStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  AvatarBadge.displayName = \"AvatarBadge\"\n}\n\nfunction initials(name: string) {\n  const [firstName, lastName] = name.split(\" \")\n  return firstName && lastName\n    ? `${firstName.charAt(0)}${lastName.charAt(0)}`\n    : firstName.charAt(0)\n}\n\ninterface InitialsProps\n  extends PropsOf<typeof chakra.div>,\n    Pick<AvatarOptions, \"name\" | \"getInitials\"> {}\n\n/**\n * The avatar name container\n */\nconst Initials: React.FC<InitialsProps> = (props) => {\n  const { name, getInitials, ...rest } = props\n  const styles = useStyles()\n\n  return (\n    <chakra.div aria-label={name} {...rest} __css={styles.label}>\n      {name ? getInitials?.(name) : null}\n    </chakra.div>\n  )\n}\n\n/**\n * Fallback avatar react component.\n * This should be a generic svg used to represent an avatar\n */\nconst DefaultIcon: React.FC<PropsOf<\"svg\">> = (props) => {\n  return (\n    <svg\n      viewBox=\"0 0 128 128\"\n      color=\"#fff\"\n      style={{ width: \"100%\", height: \"100%\" }}\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n      />\n      <path\n        fill=\"currentColor\"\n        d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n      />\n    </svg>\n  )\n}\n\nexport const baseStyle: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0,\n}\n\nexport interface AvatarProps\n  extends Omit<PropsOf<typeof chakra.span>, \"onError\">,\n    AvatarOptions,\n    ThemingProps {}\n\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\nexport const Avatar = forwardRef<AvatarProps, \"span\">(function Avatar(\n  props,\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n\n  const {\n    src,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    getInitials = initials,\n    icon = <DefaultIcon />,\n    children,\n    ...rest\n  } = omitThemingProps(props)\n\n  const avatarStyles = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined,\n    ...baseStyle,\n    ...styles.container,\n  }\n\n  return (\n    <chakra.span\n      ref={ref}\n      {...rest}\n      className={cx(\"chakra-avatar\", props.className)}\n      __css={avatarStyles}\n    >\n      <StylesProvider value={styles}>\n        <AvatarImage\n          src={src}\n          onError={onError}\n          getInitials={getInitials}\n          name={name}\n          borderRadius={borderRadius}\n          icon={icon}\n        />\n        {children}\n      </StylesProvider>\n    </chakra.span>\n  )\n})\n\nif (__DEV__) {\n  Avatar.displayName = \"Avatar\"\n}\n\ntype AvatarImageProps = Pick<\n  AvatarProps,\n  \"src\" | \"onError\" | \"name\" | \"getInitials\" | \"borderRadius\" | \"icon\"\n>\n\nconst AvatarImage: React.FC<AvatarImageProps> = ({\n  src,\n  onError,\n  getInitials,\n  name,\n  borderRadius,\n  icon = <DefaultIcon />,\n}) => {\n  /**\n   * use the image hook to only show the image when it has loaded\n   */\n  const status = useImage({ src, onError })\n\n  const hasLoaded = status === \"loaded\"\n\n  /**\n   * Fallback avatar applies under 2 conditions:\n   * - If `src` was passed and the image has not loaded or failed to load\n   * - If `src` wasn't passed\n   *\n   * In this case, we'll show either the name avatar or default avatar\n   */\n  const showFallback = !src || (src && !hasLoaded)\n\n  if (showFallback) {\n    return name ? (\n      <Initials\n        className=\"chakra-avatar__initials\"\n        getInitials={getInitials}\n        name={name}\n      />\n    ) : (\n      cloneElement(icon, { role: \"img\" })\n    )\n  }\n\n  /**\n   * If `src` was passed and the image has loaded, we'll show it\n   */\n  return (\n    <chakra.img\n      src={src}\n      alt={name}\n      className=\"chakra-avatar__img\"\n      __css={{\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n        borderRadius,\n      }}\n    />\n  )\n}\n\nif (__DEV__) {\n  AvatarImage.displayName = \"AvatarImage\"\n}\n"],"file":"avatar.js"}