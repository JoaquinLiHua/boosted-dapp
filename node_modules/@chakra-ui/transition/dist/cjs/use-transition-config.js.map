{"version":3,"sources":["../../src/use-transition-config.ts"],"names":["useTransitionConfig","themeKey","props","classNames","theme","path","defaultConfig","configObjectOrFn","transitionConfig","config","partsTransitionRef","React","useRef","useMemo","partsTransition","part","timeout","className","toLowerCase","styles","prevTransitionString","JSON","stringify","current","nextTransitionString","errorMessage","TransitionsProvider","useTransitions"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAeO,SAASA,mBAAT,CACLC,QADK,EAELC,KAFK,EAGLC,UAHK,EAIL;AACA,MAAMC,KAAK,GAAG,uBAAd;AACA,MAAMC,IAAI,mBAAiBJ,QAAjB,gBAAV;AAEA,MAAMK,aAAa,GAAG,gBAAIF,KAAJ,EAAWC,IAAX,CAAtB;AACA,MAAME,gBAAgB,GAAIL,KAAK,CAACM,gBAAN,IACxBF,aADF;AAEA,MAAMG,MAAM,GAAG,oBAAQF,gBAAR,EAA0BL,KAA1B,CAAf;AAEA,MAAMQ,kBAAkB,GAAGC,KAAK,CAACC,MAAN,CAA6B,EAA7B,CAA3B;AAEA,SAAOD,KAAK,CAACE,OAAN,CAAc,YAAM;AACzB,QAAIJ,MAAJ,EAAY;AACV,UAAMK,eAA+B,GAAG,EAAxC;;AAEA,WAAK,IAAMC,KAAX,IAAmBN,MAAnB,EAA2B;AAAA;;AAAA,oCACDA,MAAM,CAACM,KAAD,CADL,CACjBC,OADiB;AAAA,YACjBA,OADiB,sCACP,CADO;AAEzB,YAAMC,SAAS,wBAAGd,UAAH,oBAAGA,UAAU,CAAGY,KAAH,CAAb,gCAAyBd,QAAQ,CAACiB,WAAT,EAAxC;AACA,YAAMC,MAAM,GAAG,6CAAsBV,MAAM,CAACM,KAAD,CAA5B,EAAoCE,SAApC,CAAf;AACAH,QAAAA,eAAe,CAACC,KAAD,CAAf,GAAwB;AAAEI,UAAAA,MAAM,EAANA,MAAF;AAAUH,UAAAA,OAAO,EAAPA,OAAV;AAAmBC,UAAAA,SAAS,EAATA;AAAnB,SAAxB;AACD;;AAED,UAAMG,oBAAoB,GAAGC,IAAI,CAACC,SAAL,CAAeZ,kBAAkB,CAACa,OAAlC,CAA7B;AACA,UAAMC,oBAAoB,GAAGH,IAAI,CAACC,SAAL,CAAeR,eAAf,CAA7B;;AAEA,UAAIU,oBAAoB,KAAKJ,oBAA7B,EAAmD;AACjDV,QAAAA,kBAAkB,CAACa,OAAnB,GAA6BT,eAA7B;AACD;AACF;;AAED,WAAOJ,kBAAkB,CAACa,OAA1B;AACD,GApBM,EAoBJ,CAACpB,UAAD,EAAaM,MAAb,EAAqBR,QAArB,CApBI,CAAP;AAqBD;;qBAQ6C,0BAE5C;AACAwB,EAAAA,YAAY,EACV;AAFF,CAF4C,C;IAAvCC,mB;IAAqBC,c","sourcesContent":["import { SystemStyleObject, useTheme } from \"@chakra-ui/system\"\nimport { Dict, get, runIfFn, createContext } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { TransitionConfig, transitionConfigToCSS } from \"./transition-config\"\n\ntype MaybeTransitionConfig =\n  | { [part: string]: TransitionConfig }\n  | ((props: Dict) => { [part: string]: TransitionConfig })\n  | undefined\n\ntype Timeout = TransitionConfig[\"timeout\"]\n\ntype PartTransition = Dict<{\n  styles: SystemStyleObject\n  timeout: NonNullable<Timeout>\n  className: string\n}>\n\nexport function useTransitionConfig(\n  themeKey: string,\n  props: Dict,\n  classNames?: Dict<string>,\n) {\n  const theme = useTheme()\n  const path = `components.${themeKey}.transition`\n\n  const defaultConfig = get(theme, path)\n  const configObjectOrFn = (props.transitionConfig ||\n    defaultConfig) as MaybeTransitionConfig\n  const config = runIfFn(configObjectOrFn, props)\n\n  const partsTransitionRef = React.useRef<PartTransition>({})\n\n  return React.useMemo(() => {\n    if (config) {\n      const partsTransition: PartTransition = {}\n\n      for (const part in config) {\n        const { timeout = 0 } = config[part]\n        const className = classNames?.[part] ?? themeKey.toLowerCase()\n        const styles = transitionConfigToCSS(config[part], className)\n        partsTransition[part] = { styles, timeout, className }\n      }\n\n      const prevTransitionString = JSON.stringify(partsTransitionRef.current)\n      const nextTransitionString = JSON.stringify(partsTransition)\n\n      if (nextTransitionString !== prevTransitionString) {\n        partsTransitionRef.current = partsTransition\n      }\n    }\n\n    return partsTransitionRef.current\n  }, [classNames, config, themeKey])\n}\n\nexport type UseTransitionConfigReturn = ReturnType<typeof useTransitionConfig>\n\nexport type TransitionConfigProps = {\n  transitionConfig?: Record<string, TransitionConfig>\n}\n\nconst [TransitionsProvider, useTransitions] = createContext<\n  UseTransitionConfigReturn\n>({\n  errorMessage:\n    \"useTransitions: `context` is undefined or null. Seems you forgot to wrap the components within <TransitionsProvider />\",\n})\n\nexport { TransitionsProvider, useTransitions }\n"],"file":"use-transition-config.js"}