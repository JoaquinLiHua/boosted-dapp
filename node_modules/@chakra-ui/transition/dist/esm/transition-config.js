function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function toCSSTransition(transition) {
  return {
    transitionTimingFunction: transition.easing,
    transitionProperty: transition.property,
    transitionDuration: transition.duration
  };
}

export function transitionConfigToCSS(config, className) {
  var _enter$transition, _exit$transition;

  var {
    addDoneStyles,
    addAppearStyles,
    enter,
    exit,
    transition
  } = config;
  var enterClass = addAppearStyles ? "&-enter, &-appear" : "&-enter";
  var enterDoneClass = addAppearStyles ? "&-enter-done, &-appear-done" : "&-enter-done";
  var enterActiveClass = addAppearStyles ? "&-enter-active, &-appear-active" : "&-enter-active";
  var enterTransition = (_enter$transition = enter.transition) != null ? _enter$transition : transition;
  var exitTransition = (_exit$transition = exit.transition) != null ? _exit$transition : transition;
  return {
    ["&." + className]: _extends({}, addDoneStyles && enter.from, {
      [enterClass]: enter.from,
      [enterActiveClass]: _extends({}, enter.to, enterTransition && toCSSTransition(enterTransition))
    }, addDoneStyles && {
      [enterDoneClass]: enter.to
    }, {
      "&-exit": exit.from,
      "&-exit-active": _extends({}, exit.to, exitTransition && toCSSTransition(exitTransition))
    }, addDoneStyles && {
      "&-exit-done": exit.to
    })
  };
}
//# sourceMappingURL=transition-config.js.map