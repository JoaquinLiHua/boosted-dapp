import { useTheme } from "@chakra-ui/system";
import { get, runIfFn, createContext } from "@chakra-ui/utils";
import * as React from "react";
import { transitionConfigToCSS } from "./transition-config";
export function useTransitionConfig(themeKey, props, classNames) {
  var theme = useTheme();
  var path = "components." + themeKey + ".transition";
  var defaultConfig = get(theme, path);
  var configObjectOrFn = props.transitionConfig || defaultConfig;
  var config = runIfFn(configObjectOrFn, props);
  var partsTransitionRef = React.useRef({});
  return React.useMemo(() => {
    if (config) {
      var partsTransition = {};

      for (var _part in config) {
        var _classNames$_part;

        var {
          timeout = 0
        } = config[_part];
        var className = (_classNames$_part = classNames == null ? void 0 : classNames[_part]) != null ? _classNames$_part : themeKey.toLowerCase();
        var styles = transitionConfigToCSS(config[_part], className);
        partsTransition[_part] = {
          styles,
          timeout,
          className
        };
      }

      var prevTransitionString = JSON.stringify(partsTransitionRef.current);
      var nextTransitionString = JSON.stringify(partsTransition);

      if (nextTransitionString !== prevTransitionString) {
        partsTransitionRef.current = partsTransition;
      }
    }

    return partsTransitionRef.current;
  }, [classNames, config, themeKey]);
}
var [TransitionsProvider, useTransitions] = createContext({
  errorMessage: "useTransitions: `context` is undefined or null. Seems you forgot to wrap the components within <TransitionsProvider />"
});
export { TransitionsProvider, useTransitions };
//# sourceMappingURL=use-transition-config.js.map