function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/** @jsx jsx */
import AnimateHeight from "react-animate-height";
import { chakra, jsx, forwardRef } from "@chakra-ui/system";
import { __DEV__ } from "@chakra-ui/utils";
export var Collapse = /*#__PURE__*/forwardRef(function Collapse(props, ref) {
  var {
    isOpen,
    animateOpacity = true,
    onAnimationStart,
    onAnimationEnd,
    duration,
    easing = "ease",
    startingHeight = 0,
    endingHeight = "auto"
  } = props,
      rest = _objectWithoutPropertiesLoose(props, ["isOpen", "animateOpacity", "onAnimationStart", "onAnimationEnd", "duration", "easing", "startingHeight", "endingHeight"]);

  return jsx(AnimateHeight, {
    duration: duration,
    easing: easing,
    animateOpacity: animateOpacity,
    height: isOpen ? endingHeight : startingHeight,
    applyInlineTransitions: false,
    onAnimationStart: onAnimationStart,
    onAnimationEnd: onAnimationEnd,
    css: {
      transition: "height 0.2s ease,opacity 0.2s ease-in-out,transform 0.2s ease-in-out",
      "&.rah-animating--to-height-zero": {
        opacity: 0,
        transform: "translateY(-0.625rem)"
      }
    }
  }, jsx(chakra.div, _extends({
    ref: ref
  }, rest)));
});

if (__DEV__) {
  Collapse.displayName = "Collapse";
}

export default Collapse;
//# sourceMappingURL=collapse.js.map