{"version":3,"sources":["../../src/collapse.tsx"],"names":["AnimateHeight","chakra","jsx","forwardRef","__DEV__","Collapse","props","ref","isOpen","animateOpacity","onAnimationStart","onAnimationEnd","duration","easing","startingHeight","endingHeight","rest","transition","opacity","transform","displayName"],"mappings":";;;;AAAA;AACA,OAAOA,aAAP,MAEO,sBAFP;AAGA,SAASC,MAAT,EAAiBC,GAAjB,EAA+BC,UAA/B,QAAiD,mBAAjD;AACA,SAASC,OAAT,QAAwB,kBAAxB;AAqDA,OAAO,IAAMC,QAAQ,gBAAGF,UAAU,CAAuB,SAASE,QAAT,CACvDC,KADuD,EAEvDC,GAFuD,EAGvD;AACA,MAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,cAAc,GAAG,IAFb;AAGJC,IAAAA,gBAHI;AAIJC,IAAAA,cAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,MAAM,GAAG,MANL;AAOJC,IAAAA,cAAc,GAAG,CAPb;AAQJC,IAAAA,YAAY,GAAG;AARX,MAUFT,KAVJ;AAAA,MASKU,IATL,iCAUIV,KAVJ;;AAYA,SACE,IAAC,aAAD;AACE,IAAA,QAAQ,EAAEM,QADZ;AAEE,IAAA,MAAM,EAAEC,MAFV;AAGE,IAAA,cAAc,EAAEJ,cAHlB;AAIE,IAAA,MAAM,EAAED,MAAM,GAAGO,YAAH,GAAkBD,cAJlC;AAKE,IAAA,sBAAsB,EAAE,KAL1B;AAME,IAAA,gBAAgB,EAAEJ,gBANpB;AAOE,IAAA,cAAc,EAAEC,cAPlB;AAQE,IAAA,GAAG,EAAE;AACHM,MAAAA,UAAU,EACR,sEAFC;AAGH,yCAAmC;AACjCC,QAAAA,OAAO,EAAE,CADwB;AAEjCC,QAAAA,SAAS,EAAE;AAFsB;AAHhC;AARP,KAiBE,IAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,GAAG,EAAEZ;AAAjB,KAA0BS,IAA1B,EAjBF,CADF;AAqBD,CArCiC,CAA3B;;AAuCP,IAAIZ,OAAJ,EAAa;AACXC,EAAAA,QAAQ,CAACe,WAAT,GAAuB,UAAvB;AACD;;AAED,eAAef,QAAf","sourcesContent":["/** @jsx jsx */\nimport AnimateHeight, {\n  AnimateHeightProps as AnimateProps,\n} from \"react-animate-height\"\nimport { chakra, jsx, PropsOf, forwardRef } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\n\ntype AnimateHeightProps = Pick<\n  AnimateProps,\n  | \"animationStateClasses\"\n  | \"applyInlineTransitions\"\n  | \"delay\"\n  | \"easing\"\n  | \"style\"\n  | \"children\"\n>\n\nexport interface CollapseOptions {\n  /**\n   * If `true`, the content will be visible\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the opacity of the content will be animated\n   */\n  animateOpacity?: boolean\n  /**\n   * The duration of the animation in `ms`\n   */\n  duration?: number\n  /**\n   * The height you want the content in it's collapsed state. Set to `0` by default\n   */\n  startingHeight?: number | string\n  /**\n   * The height you want the content in it's expanded state. Set to `auto` by default\n   */\n  endingHeight?: number | string\n  /**\n   * The function to be called when the collapse animation starts. It provides the `newHeight` as an argument\n   */\n  onAnimationEnd?(props: { newHeight: number }): void\n  /**\n   * The function to be called when the collapse animation ends. It provides the `newHeight` as an argument\n   */\n  onAnimationStart?(props: { newHeight: number }): void\n}\n\nexport type ICollapse = CollapseProps\n\nexport interface CollapseProps\n  extends AnimateHeightProps,\n    CollapseOptions,\n    Omit<\n      PropsOf<typeof chakra.div>,\n      \"onAnimationEnd\" | \"onAnimationStart\" | \"children\"\n    > {}\n\nexport const Collapse = forwardRef<CollapseProps, \"div\">(function Collapse(\n  props,\n  ref,\n) {\n  const {\n    isOpen,\n    animateOpacity = true,\n    onAnimationStart,\n    onAnimationEnd,\n    duration,\n    easing = \"ease\",\n    startingHeight = 0,\n    endingHeight = \"auto\",\n    ...rest\n  } = props\n\n  return (\n    <AnimateHeight\n      duration={duration}\n      easing={easing}\n      animateOpacity={animateOpacity}\n      height={isOpen ? endingHeight : startingHeight}\n      applyInlineTransitions={false}\n      onAnimationStart={onAnimationStart}\n      onAnimationEnd={onAnimationEnd}\n      css={{\n        transition:\n          \"height 0.2s ease,opacity 0.2s ease-in-out,transform 0.2s ease-in-out\",\n        \"&.rah-animating--to-height-zero\": {\n          opacity: 0,\n          transform: \"translateY(-0.625rem)\",\n        },\n      }}\n    >\n      <chakra.div ref={ref} {...rest} />\n    </AnimateHeight>\n  )\n})\n\nif (__DEV__) {\n  Collapse.displayName = \"Collapse\"\n}\n\nexport default Collapse\n"],"file":"collapse.js"}