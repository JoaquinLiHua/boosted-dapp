{"version":3,"sources":["../../src/tooltip.tsx"],"names":["Portal","chakra","useStyleConfig","omitThemingProps","forwardRef","isString","omit","pick","__DEV__","VisuallyHidden","React","useTooltip","Tooltip","props","ref","styles","ownProps","children","label","shouldWrapChildren","ariaLabel","hasArrow","rest","isOpen","getTriggerProps","getTooltipProps","getArrowProps","shouldWrap","trigger","child","Children","only","cloneElement","hasAriaLabel","_tooltipProps","arrowProps","tooltipProps","hiddenProps","bg","displayName"],"mappings":";;;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AACA,SACEC,MADF,EAIEC,cAJF,EAKEC,gBALF,EAMEC,UANF,QAOO,mBAPP;AAQA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,OAA/B,QAA8C,kBAA9C;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA4C,eAA5C;;AAkCA;;;;;;AAMA,OAAO,IAAMC,OAAO,gBAAGR,UAAU,CAAsB,SAASQ,OAAT,CACrDC,KADqD,EAErDC,GAFqD,EAGrD;AACA,MAAMC,MAAM,GAAGb,cAAc,CAAC,SAAD,EAAYW,KAAZ,CAA7B;AACA,MAAMG,QAAQ,GAAGb,gBAAgB,CAACU,KAAD,CAAjC;;AAEA,MAAM;AACJI,IAAAA,QADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,kBAHI;AAIJ,kBAAcC,SAJV;AAKJC,IAAAA;AALI,MAOFL,QAPJ;AAAA,MAMKM,IANL,iCAOIN,QAPJ;;AASA,MAAM;AACJO,IAAAA,MADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA,eAHI;AAIJC,IAAAA;AAJI,MAKFf,UAAU,CAACK,QAAD,CALd;AAOA,MAAMW,UAAU,GAAGtB,QAAQ,CAACY,QAAD,CAAR,IAAsBE,kBAAzC;AAEA,MAAIS,OAAJ;;AAEA,MAAID,UAAJ,EAAgB;AACdC,IAAAA,OAAO,gBACL,oBAAC,MAAD,CAAQ,IAAR;AAAa,MAAA,QAAQ,EAAE;AAAvB,OAA8BJ,eAAe,EAA7C,GACGP,QADH,CADF;AAKD,GAND,MAMO;AACL;;;AAGA,QAAMY,KAAK,GAAGnB,KAAK,CAACoB,QAAN,CAAeC,IAAf,CAAoBd,QAApB,CAAd;AACAW,IAAAA,OAAO,gBAAGlB,KAAK,CAACsB,YAAN,CAAmBH,KAAnB,EAA0BL,eAAe,CAACK,KAAK,CAAChB,KAAP,CAAzC,CAAV;AACD;;AAED,MAAMoB,YAAY,GAAG,CAAC,CAACb,SAAvB;;AAEA,MAAMc,aAAa,GAAGT,eAAe,CAACH,IAAD,EAAOR,GAAP,CAArC;;AACA,MAAMqB,UAAU,GAAGT,aAAa,EAAhC;AAEA,MAAMU,YAAY,GAAGH,YAAY,GAC7B3B,IAAI,CAAC4B,aAAD,EAAgB,CAAC,MAAD,EAAS,IAAT,CAAhB,CADyB,GAE7BA,aAFJ;AAIA,MAAMG,WAAW,GAAG9B,IAAI,CAAC2B,aAAD,EAAgB,CAAC,MAAD,EAAS,IAAT,CAAhB,CAAxB;AAEA;;;;;AAIA,MAAI,CAAChB,KAAL,EAAY;AACV,wBAAO,0CAAGD,QAAH,CAAP;AACD;;AAED,sBACE,0CACGW,OADH,EAEGL,MAAM,iBACL,oBAAC,MAAD,qBACE,oBAAC,MAAD,CAAQ,GAAR,eAAgBa,YAAhB;AAA8B,IAAA,KAAK,EAAErB;AAArC,MACGG,KADH,EAEGe,YAAY,iBACX,oBAAC,cAAD,EAAoBI,WAApB,EAAkCjB,SAAlC,CAHJ,EAKGC,QAAQ,iBACP,oBAAC,MAAD,CAAQ,GAAR;AACE,IAAA,SAAS,EAAC;AADZ,KAEMc,UAFN;AAGE,IAAA,KAAK,EAAE;AAAEG,MAAAA,EAAE,EAAE;AAAN;AAHT,KANJ,CADF,CAHJ,CADF;AAsBD,CAlFgC,CAA1B;;AAoFP,IAAI9B,OAAJ,EAAa;AACXI,EAAAA,OAAO,CAAC2B,WAAR,GAAsB,SAAtB;AACD","sourcesContent":["import { Portal } from \"@chakra-ui/portal\"\nimport {\n  chakra,\n  PropsOf,\n  ThemingProps,\n  useStyleConfig,\n  omitThemingProps,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { isString, omit, pick, __DEV__ } from \"@chakra-ui/utils\"\nimport { VisuallyHidden } from \"@chakra-ui/visually-hidden\"\nimport * as React from \"react\"\nimport { useTooltip, UseTooltipProps } from \"./use-tooltip\"\n\nexport interface TooltipProps\n  extends PropsOf<typeof chakra.div>,\n    ThemingProps,\n    UseTooltipProps {\n  /**\n   * The react component to use as the\n   * trigger for the tooltip\n   */\n  children: React.ReactNode\n  /**\n   * The label of the tooltip\n   */\n  label?: string\n  /**\n   * The accessible, human friendly label to use for\n   * screen readers.\n   *\n   * If passed, tooltip will show the content `label`\n   * but expose only `aria-label` to assistive technologies\n   */\n  \"aria-label\"?: string\n  /**\n   * If `true`, the tooltip will wrap it's children\n   * in a `<span/>` with `tabIndex=0`\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true`, the tooltip will show an arrow tip\n   */\n  hasArrow?: boolean\n}\n\n/**\n * Tooltips display informative text when users hover, focus on, or tap an element.\n *\n * @see Docs     https://chakra-ui.com/components/tooltip\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#tooltip\n */\nexport const Tooltip = forwardRef<TooltipProps, \"div\">(function Tooltip(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Tooltip\", props)\n  const ownProps = omitThemingProps(props)\n\n  const {\n    children,\n    label,\n    shouldWrapChildren,\n    \"aria-label\": ariaLabel,\n    hasArrow,\n    ...rest\n  } = ownProps\n\n  const {\n    isOpen,\n    getTriggerProps,\n    getTooltipProps,\n    getArrowProps,\n  } = useTooltip(ownProps)\n\n  const shouldWrap = isString(children) || shouldWrapChildren\n\n  let trigger: React.ReactElement\n\n  if (shouldWrap) {\n    trigger = (\n      <chakra.span tabIndex={0} {...getTriggerProps()}>\n        {children}\n      </chakra.span>\n    )\n  } else {\n    /**\n     * Ensure tooltip has only one child node\n     */\n    const child = React.Children.only(children) as React.ReactElement\n    trigger = React.cloneElement(child, getTriggerProps(child.props))\n  }\n\n  const hasAriaLabel = !!ariaLabel\n\n  const _tooltipProps = getTooltipProps(rest, ref)\n  const arrowProps = getArrowProps()\n\n  const tooltipProps = hasAriaLabel\n    ? omit(_tooltipProps, [\"role\", \"id\"])\n    : _tooltipProps\n\n  const hiddenProps = pick(_tooltipProps, [\"role\", \"id\"])\n\n  /**\n   * If the `label` is empty, there's no\n   * point showing the tooltip. Let's simply return back the children\n   */\n  if (!label) {\n    return <>{children}</>\n  }\n\n  return (\n    <>\n      {trigger}\n      {isOpen && (\n        <Portal>\n          <chakra.div {...tooltipProps} __css={styles}>\n            {label}\n            {hasAriaLabel && (\n              <VisuallyHidden {...hiddenProps}>{ariaLabel}</VisuallyHidden>\n            )}\n            {hasArrow && (\n              <chakra.div\n                className=\"chakra-tooltip__arrow\"\n                {...arrowProps}\n                __css={{ bg: \"inherit\" }}\n              />\n            )}\n          </chakra.div>\n        </Portal>\n      )}\n    </>\n  )\n})\n\nif (__DEV__) {\n  Tooltip.displayName = \"Tooltip\"\n}\n"],"file":"tooltip.js"}