{"version":3,"sources":["../../src/stack.tsx"],"names":["chakra","css","forwardRef","cx","getValidChildren","mapResponsive","__DEV__","React","StackDivider","props","borderWidth","alignSelf","borderColor","width","height","StackItem","display","flex","Stack","ref","isInline","direction","align","justify","spacing","wrap","children","divider","className","shouldWrapChildren","rest","selector","directionStyles","column","mt","ml","row","mb","mr","styles","flexDirection","value","dividerStyles","includes","mx","my","borderLeftWidth","borderBottomWidth","hasDivider","shouldUseChildren","validChildren","clones","map","child","index","isLast","length","_child","cloneDivider","cloneElement","sx","theme","undefined","_className","displayName","HStack","VStack"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  css,\n  PropsOf,\n  ResponsiveValue,\n  SystemProps,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport {\n  cx,\n  Dict,\n  getValidChildren,\n  mapResponsive,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   */\n  isInline?: boolean\n}\n\nexport interface StackDividerProps extends PropsOf<typeof chakra.div> {}\n\nexport const StackDivider: React.FC<StackDividerProps> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    __css={{\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\",\n    }}\n    {...props}\n  />\n)\n\nexport const StackItem: React.FC<PropsOf<typeof chakra.div>> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    __css={{ display: \"inline-block\", flex: 0 }}\n    {...props}\n  />\n)\n\nexport interface StackProps extends PropsOf<typeof chakra.div>, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/components/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">(function Stack(props, ref) {\n  const {\n    isInline,\n    direction = isInline ? \"row\" : \"column\",\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  /**\n   * If we ever run into SSR issues with this, check this post to find a fix for it:\n   * @see https://medium.com/@emmenko/patching-lobotomized-owl-selector-for-emotion-ssr-5a582a3c424c\n   */\n  const selector = \"& > *:not(style) ~ *:not(style)\"\n\n  const directionStyles = {\n    column: { mt: spacing, ml: 0 },\n    row: { ml: spacing, mt: 0 },\n    \"column-reverse\": { mb: spacing, mr: 0 },\n    \"row-reverse\": { mr: spacing, mb: 0 },\n  }\n\n  const styles = {\n    flexDirection: direction,\n    [selector]: mapResponsive(direction, (value) => directionStyles[value]),\n  }\n\n  const dividerStyles = mapResponsive(direction, (value) => {\n    if (value.includes(\"row\")) {\n      return {\n        mx: spacing,\n        my: 0,\n        borderLeftWidth: \"1px\",\n        borderBottomWidth: 0,\n      }\n    }\n    return {\n      mx: 0,\n      my: spacing,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    }\n  })\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const validChildren = getValidChildren(children)\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        const isLast = index + 1 === validChildren.length\n        const _child = shouldWrapChildren ? (\n          <StackItem children={child} />\n        ) : (\n          child\n        )\n\n        if (!hasDivider) return _child\n\n        const cloneDivider = isLast\n          ? null\n          : React.cloneElement(divider as any, {\n              css: css({ \"&\": dividerStyles }),\n            })\n\n        return (\n          <React.Fragment key={index}>\n            {_child}\n            {cloneDivider}\n          </React.Fragment>\n        )\n      })\n\n  const sx = (theme: Dict) => {\n    if (hasDivider) return undefined\n    return css({ [selector]: styles[selector] })(theme)\n  }\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={styles.flexDirection}\n      flexWrap={wrap}\n      className={_className}\n      css={sx as any}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Stack.displayName = \"Stack\"\n}\n\n/**\n * A view that arranges its children in a horizontal line.\n */\nexport const HStack = forwardRef<StackProps, \"div\">((props, ref) => {\n  return <Stack align=\"center\" {...props} direction=\"row\" ref={ref} />\n})\n\nif (__DEV__) {\n  HStack.displayName = \"HStack\"\n}\n\n/**\n * A view that arranges its children in a vertical line.\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => {\n  return <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n})\n\nif (__DEV__) {\n  VStack.displayName = \"VStack\"\n}\n"],"file":"stack.js"}