{"version":3,"sources":["../../src/wrap.tsx"],"names":["chakra","css","useTheme","forwardRef","getValidChildren","mapResponsive","__DEV__","React","Wrap","props","ref","spacing","children","justify","direction","align","rest","theme","itemSpacing","value","margin","groupSpacing","validChildren","clones","map","child","index","display","flexWrap","justifyContent","alignItems","flexDirection","listStyleType","padding","displayName"],"mappings":";;;;AAAA,SACEA,MADF,EAEEC,GAFF,EAKEC,QALF,EAMEC,UANF,QAOO,mBAPP;AAQA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,OAA1C,QAAyD,kBAAzD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAqBA;;;;;;;;;;AAUA,OAAO,IAAMC,IAAI,gBAAGL,UAAU,CAAmB,SAASK,IAAT,CAAcC,KAAd,EAAqBC,GAArB,EAA0B;AACzE,MAAM;AACJC,IAAAA,OAAO,GAAG,QADN;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA;AALI,MAOFN,KAPJ;AAAA,MAMKO,IANL,iCAOIP,KAPJ;;AASA,MAAMQ,KAAK,GAAGf,QAAQ,EAAtB;AAEA,MAAMgB,WAAW,GAAGb,aAAa,CAACM,OAAD,EAAWQ,KAAD,IAAW;AACpD,QAAM;AAAEC,MAAAA;AAAF,QAAanB,GAAG,CAAC;AAAEmB,MAAAA,MAAM,EAAED;AAAV,KAAD,CAAH,CAAuBF,KAAvB,CAAnB;AACA,qBAAeG,MAAf;AACD,GAHgC,CAAjC;AAKA,MAAMC,YAAY,GAAGhB,aAAa,CAACM,OAAD,EAAWQ,KAAD,IAAW;AACrD,QAAM;AAAEC,MAAAA;AAAF,QAAanB,GAAG,CAAC;AAAEmB,MAAAA,MAAM,EAAED;AAAV,KAAD,CAAH,CAAuBF,KAAvB,CAAnB;AACA,qBAAeG,MAAf;AACD,GAHiC,CAAlC;AAKA,MAAME,aAAa,GAAGlB,gBAAgB,CAACQ,QAAD,CAAtC;AAEA,MAAMW,MAAM,GAAGD,aAAa,CAACE,GAAd,CAAkB,CAACC,KAAD,EAAQC,KAAR,kBAC/B,oBAAC,MAAD,CAAQ,EAAR;AAAW,IAAA,GAAG,EAAEA,KAAhB;AAAuB,IAAA,MAAM,EAAER,WAA/B;AAA4C,IAAA,OAAO,EAAC;AAApD,KACGO,KADH,CADa,CAAf;AAMA,sBACE,oBAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,GAAG,EAAEf;AAAjB,KAA0BM,IAA1B,gBACE,oBAAC,MAAD,CAAQ,EAAR;AACE,IAAA,KAAK,EAAE;AACLW,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,QAAQ,EAAE,MAFL;AAGLC,MAAAA,cAAc,EAAEhB,OAHX;AAILiB,MAAAA,UAAU,EAAEf,KAJP;AAKLgB,MAAAA,aAAa,EAAEjB,SALV;AAMLkB,MAAAA,aAAa,EAAE,MANV;AAOLC,MAAAA,OAAO,EAAE,GAPJ;AAQLb,MAAAA,MAAM,EAAEC;AARH;AADT,KAYGE,MAZH,CADF,CADF;AAkBD,CAhD6B,CAAvB;;AAkDP,IAAIjB,OAAJ,EAAa;AACXE,EAAAA,IAAI,CAAC0B,WAAL,GAAmB,MAAnB;AACD","sourcesContent":["import {\n  chakra,\n  css,\n  PropsOf,\n  SystemProps,\n  useTheme,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { getValidChildren, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface WrapProps extends PropsOf<typeof chakra.div> {\n  /**\n   * The space between the each child (even if it wraps)\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The `justify-content` value (for cross-axis alignment)\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * The `align-items` value (for main axis alignment)\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The `flex-direction` value\n   */\n  direction?: SystemProps[\"flexDirection\"]\n}\n\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/components/wrap\n */\nexport const Wrap = forwardRef<WrapProps, \"div\">(function Wrap(props, ref) {\n  const {\n    spacing = \"0.5rem\",\n    children,\n    justify,\n    direction,\n    align,\n    ...rest\n  } = props\n\n  const theme = useTheme()\n\n  const itemSpacing = mapResponsive(spacing, (value) => {\n    const { margin } = css({ margin: value })(theme)\n    return `calc(${margin} / 2)`\n  })\n\n  const groupSpacing = mapResponsive(spacing, (value) => {\n    const { margin } = css({ margin: value })(theme)\n    return `calc(${margin} / 2 * -1)`\n  })\n\n  const validChildren = getValidChildren(children)\n\n  const clones = validChildren.map((child, index) => (\n    <chakra.li key={index} margin={itemSpacing} display=\"inline-flex\">\n      {child}\n    </chakra.li>\n  ))\n\n  return (\n    <chakra.div ref={ref} {...rest}>\n      <chakra.ul\n        __css={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: justify,\n          alignItems: align,\n          flexDirection: direction,\n          listStyleType: \"none\",\n          padding: \"0\",\n          margin: groupSpacing,\n        }}\n      >\n        {clones}\n      </chakra.ul>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Wrap.displayName = \"Wrap\"\n}\n"],"file":"wrap.js"}