function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from "@chakra-ui/system";
import { cx, mergeRefs, runIfFn, __DEV__ } from "@chakra-ui/utils";
import React, { useMemo } from "react";
import { MenuProvider, useMenu, useMenuButton, useMenuItem, useMenuList, useMenuOption, useMenuOptionGroup } from "./use-menu";

/**
 * Menu provides context, state, and focus management
 * to its sub-components. It doesn't render any DOM node.
 */
export var Menu = props => {
  var styles = useMultiStyleConfig("Menu", props);
  var realProps = omitThemingProps(props);
  var ctx = useMenu(realProps);
  var context = useMemo(() => ctx, [ctx]);
  return /*#__PURE__*/React.createElement(MenuProvider, {
    value: context
  }, /*#__PURE__*/React.createElement(StylesProvider, {
    value: styles
  }, runIfFn(props.children, {
    isOpen: context.isOpen,
    onClose: context.onClose
  })));
};

if (__DEV__) {
  Menu.displayName = "Menu";
}

var StyledMenuButton = /*#__PURE__*/forwardRef(function StyledMenuButton(props, ref) {
  var styles = useStyles();
  return /*#__PURE__*/React.createElement(chakra.button, _extends({
    ref: ref
  }, props, {
    __css: _extends({
      display: "inline-flex",
      appearance: "none",
      alignItems: "center",
      outline: 0,
      transition: "all 250ms"
    }, styles.button)
  }));
});
/**
 * The trigger for the menu list. Must be a direct child of `Menu`.
 */

export var MenuButton = /*#__PURE__*/forwardRef(function MenuButton(props, ref) {
  var {
    as: Comp
  } = props,
      otherProps = _objectWithoutPropertiesLoose(props, ["children", "as"]);

  var ownProps = useMenuButton(otherProps);
  var ownRef = mergeRefs(ref, ownProps.ref);
  var Wrapper = Comp || StyledMenuButton;
  return /*#__PURE__*/React.createElement(Wrapper, _extends({}, ownProps, {
    ref: ownRef
  }), /*#__PURE__*/React.createElement(chakra.span, {
    __css: {
      pointerEvents: "none",
      flex: "1"
    }
  }, props.children));
});

if (__DEV__) {
  MenuButton.displayName = "MenuButton";
} //////////////////////////////////////////////////////////////////////////


export var MenuList = /*#__PURE__*/forwardRef(function MenuList(props, ref) {
  var menulist = useMenuList(props);
  var styles = useStyles();
  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, menulist, {
    ref: mergeRefs(menulist.ref, ref),
    __css: _extends({
      outline: 0
    }, styles.list)
  }));
});

if (__DEV__) {
  MenuList.displayName = "MenuList";
} //////////////////////////////////////////////////////////////////////////


var StyledMenuItem = /*#__PURE__*/forwardRef(function StyledMenuItem(props, ref) {
  var _props$type;

  var styles = useStyles(); // given another component, use its type if present
  // else, use no type to avoid invalid html, e.g. <a type="button" />
  // else, fall back to "button"

  var type = props.as ? (_props$type = props.type) != null ? _props$type : undefined : "button";
  return /*#__PURE__*/React.createElement(chakra.button, _extends({
    ref: ref,
    type: type
  }, props, {
    __css: _extends({
      textDecoration: "none",
      color: "inherit",
      userSelect: "none",
      display: "flex",
      width: "100%",
      alignItems: "center",
      textAlign: "left",
      flex: "0 0 auto",
      outline: 0
    }, styles.item)
  }));
});
export var MenuItem = /*#__PURE__*/forwardRef(function MenuItem(props, ref) {
  var {
    icon,
    iconSpacing = "0.75rem",
    command,
    children
  } = props,
      otherProps = _objectWithoutPropertiesLoose(props, ["icon", "iconSpacing", "command", "children"]);

  var ownProps = useMenuItem(otherProps);
  var ownRef = mergeRefs(ownProps.ref, ref);
  var shouldWrap = icon || command;

  var _children = shouldWrap ? /*#__PURE__*/React.createElement(chakra.span, {
    pointerEvents: "none",
    flex: "1"
  }, children) : children;

  return /*#__PURE__*/React.createElement(StyledMenuItem, _extends({}, ownProps, {
    ref: ownRef
  }), icon && /*#__PURE__*/React.createElement(MenuIcon, {
    fontSize: "0.8em",
    mr: iconSpacing,
    children: icon
  }), _children, command && /*#__PURE__*/React.createElement(MenuCommand, {
    children: command
  }));
});

if (__DEV__) {
  MenuItem.displayName = "MenuItem";
} //////////////////////////////////////////////////////////////////////////


var CheckIcon = props => /*#__PURE__*/React.createElement("svg", _extends({
  viewBox: "0 0 14 14",
  width: "1em",
  height: "1em"
}, props), /*#__PURE__*/React.createElement("polygon", {
  fill: "currentColor",
  points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"
}));

export var MenuItemOption = /*#__PURE__*/forwardRef(function MenuItemOption(props, ref) {
  var {
    icon,
    iconSpacing = "0.75rem"
  } = props,
      htmlProps = _objectWithoutPropertiesLoose(props, ["icon", "iconSpacing"]);

  var ownProps = useMenuOption(htmlProps);
  var ownRef = mergeRefs(ownProps.ref, ref);
  return /*#__PURE__*/React.createElement(StyledMenuItem, _extends({}, ownProps, {
    ref: ownRef
  }), /*#__PURE__*/React.createElement(MenuIcon, {
    fontSize: "0.8em",
    children: icon || /*#__PURE__*/React.createElement(CheckIcon, null),
    mr: iconSpacing,
    visibility: props.isChecked ? "visible" : "hidden"
  }), /*#__PURE__*/React.createElement(chakra.span, {
    flex: "1"
  }, ownProps.children));
});

if (__DEV__) {
  MenuItemOption.displayName = "MenuItemOption";
} //////////////////////////////////////////////////////////////////////////


export var MenuOptionGroup = props => {
  var _useMenuOptionGroup = useMenuOptionGroup(props),
      {
    children
  } = _useMenuOptionGroup,
      rest = _objectWithoutPropertiesLoose(_useMenuOptionGroup, ["children"]);

  return /*#__PURE__*/React.createElement(MenuGroup, _extends({
    title: props.title,
    children: children
  }, rest));
};

if (__DEV__) {
  MenuOptionGroup.displayName = "MenuOptionGroup";
} //////////////////////////////////////////////////////////////////////////


export var MenuGroup = props => {
  var {
    title,
    children,
    className
  } = props,
      rest = _objectWithoutPropertiesLoose(props, ["title", "children", "className"]);

  var _className = cx("chakra-menu__group__title", className);

  var styles = useStyles();
  return /*#__PURE__*/React.createElement(chakra.div, {
    className: "chakra-menu__group",
    role: "group"
  }, title && /*#__PURE__*/React.createElement(chakra.p, _extends({
    className: _className
  }, rest, {
    __css: styles.groupTitle
  }), title), children);
};

if (__DEV__) {
  MenuGroup.displayName = "MenuGroup";
} //////////////////////////////////////////////////////////////////////////


export var MenuCommand = props => {
  var styles = useStyles();
  return /*#__PURE__*/React.createElement(chakra.span, _extends({}, props, {
    __css: styles.command,
    className: "chakra-menu__command"
  }));
};

if (__DEV__) {
  MenuCommand.displayName = "MenuCommand";
} //////////////////////////////////////////////////////////////////////////


export var MenuIcon = props => {
  var {
    className,
    children
  } = props,
      rest = _objectWithoutPropertiesLoose(props, ["className", "children"]);

  var child = React.Children.only(children);
  var clone = /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React.cloneElement(child, {
    focusable: "false",
    "aria-hidden": true,
    className: cx("chakra-menu__icon", child.props.className)
  }) : null;

  var _className = cx("chakra-menu__icon-wrapper", className);

  return /*#__PURE__*/React.createElement(chakra.span, _extends({
    className: _className
  }, rest, {
    __css: {
      flexShrink: 0
    }
  }), clone);
};

if (__DEV__) {
  MenuIcon.displayName = "MenuIcon";
}

export var MenuDivider = props => {
  var {
    className
  } = props,
      rest = _objectWithoutPropertiesLoose(props, ["className"]);

  var _className = cx("chakra-menu__divider", className);

  return /*#__PURE__*/React.createElement(chakra.hr, _extends({
    role: "separator",
    "aria-orientation": "horizontal",
    className: _className
  }, rest, {
    __css: {
      border: 0,
      borderBottom: "1px solid",
      borderColor: "inherit",
      my: "0.5rem",
      opacity: 0.6
    }
  }));
};

if (__DEV__) {
  MenuDivider.displayName = "MenuDivider";
}
//# sourceMappingURL=menu.js.map